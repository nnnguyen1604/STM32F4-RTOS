
LCD_INIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001830  0800a168  0800a168  0000b168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b998  0800b998  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b998  0800b998  0000c998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9a0  0800b9a0  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9a0  0800b9a0  0000c9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9a4  0800b9a4  0000c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b9a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1e4  2**0
                  CONTENTS
 10 .bss          00004c50  200001e4  200001e4  0000d1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20004e34  20004e34  0000d1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149d2  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b73  00000000  00000000  00021be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00025760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9d  00000000  00000000  00026958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000588a  00000000  00000000  000276f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016dac  00000000  00000000  0002cf7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e91  00000000  00000000  00043d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115bbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005918  00000000  00000000  00115c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003a  00000000  00000000  0011b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a14c 	.word	0x0800a14c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a14c 	.word	0x0800a14c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000eac:	4a27      	ldr	r2, [pc, #156]	@ (8000f4c <MX_ADC1_Init+0xb4>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000eb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000eda:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <MX_ADC1_Init+0xb8>)
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eea:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	4813      	ldr	r0, [pc, #76]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000efa:	f001 f921 	bl	8002140 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fabe 	bl	8001484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000f10:	2304      	movs	r3, #4
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	480b      	ldr	r0, [pc, #44]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000f1a:	f001 f955 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 faae 	bl	8001484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <MX_ADC1_Init+0xb0>)
 8000f32:	f001 f949 	bl	80021c8 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000f3c:	f000 faa2 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000200 	.word	0x20000200
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	0f000001 	.word	0x0f000001

08000f54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0b      	ldr	r2, [pc, #44]	@ (8000f90 <HAL_ADC_MspInit+0x3c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d10d      	bne.n	8000f82 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <HAL_ADC_MspInit+0x40>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <HAL_ADC_MspInit+0x40>)
 8000f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <HAL_ADC_MspInit+0x40>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40012000 	.word	0x40012000
 8000f94:	40023800 	.word	0x40023800

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <MX_DMA_Init+0x4c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe4 <MX_DMA_Init+0x4c>)
 8000fa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <MX_DMA_Init+0x4c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	2038      	movs	r0, #56	@ 0x38
 8000fc0:	f001 fbfb 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fc4:	2038      	movs	r0, #56	@ 0x38
 8000fc6:	f001 fc14 	bl	80027f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2105      	movs	r1, #5
 8000fce:	203b      	movs	r0, #59	@ 0x3b
 8000fd0:	f001 fbf3 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fd4:	203b      	movs	r0, #59	@ 0x3b
 8000fd6:	f001 fc0c 	bl	80027f2 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800

08000fe8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2280      	movs	r2, #128	@ 0x80
 8001004:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000274 	.word	0x20000274
 8001018:	200002c8 	.word	0x200002c8

0800101c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b0a0      	sub	sp, #128	@ 0x80
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */


	osMessageQDef(uartQueue, 20, char*); // Hàng đợi chứa con trỏ chuỗi
 8001022:	4b2e      	ldr	r3, [pc, #184]	@ (80010dc <MX_FREERTOS_Init+0xc0>)
 8001024:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800102a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uartQueueHandle = osMessageCreate(osMessageQ(uartQueue), NULL);
 800102e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f004 fa74 	bl	8005522 <osMessageCreate>
 800103a:	4603      	mov	r3, r0
 800103c:	4a28      	ldr	r2, [pc, #160]	@ (80010e0 <MX_FREERTOS_Init+0xc4>)
 800103e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <MX_FREERTOS_Init+0xc8>)
 8001042:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001054:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f004 fa01 	bl	8005462 <osThreadCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a21      	ldr	r2, [pc, #132]	@ (80010e8 <MX_FREERTOS_Init+0xcc>)
 8001064:	6013      	str	r3, [r2, #0]

  /* definition and creation of Temp */
  osThreadDef(Temp, StartTask01, osPriorityIdle, 0, 128);
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <MX_FREERTOS_Init+0xd0>)
 8001068:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800106c:	461d      	mov	r5, r3
 800106e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001072:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TempHandle = osThreadCreate(osThread(Temp), NULL);
 800107a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f9ee 	bl	8005462 <osThreadCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <MX_FREERTOS_Init+0xd4>)
 800108a:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD */
  osThreadDef(LCD, StartTask02, osPriorityIdle, 0, 128);
 800108c:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_FREERTOS_Init+0xd8>)
 800108e:	f107 041c 	add.w	r4, r7, #28
 8001092:	461d      	mov	r5, r3
 8001094:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001098:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800109c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 f9db 	bl	8005462 <osThreadCreate>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <MX_FREERTOS_Init+0xdc>)
 80010b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sound */
  osThreadDef(Sound, StartTask03, osPriorityIdle, 0, 128);
 80010b2:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_FREERTOS_Init+0xe0>)
 80010b4:	463c      	mov	r4, r7
 80010b6:	461d      	mov	r5, r3
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoundHandle = osThreadCreate(osThread(Sound), NULL);
 80010c4:	463b      	mov	r3, r7
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 f9ca 	bl	8005462 <osThreadCreate>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001100 <MX_FREERTOS_Init+0xe4>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010d4:	bf00      	nop
 80010d6:	3780      	adds	r7, #128	@ 0x80
 80010d8:	46bd      	mov	sp, r7
 80010da:	bdb0      	pop	{r4, r5, r7, pc}
 80010dc:	0800a168 	.word	0x0800a168
 80010e0:	20000260 	.word	0x20000260
 80010e4:	0800a184 	.word	0x0800a184
 80010e8:	20000264 	.word	0x20000264
 80010ec:	0800a1a8 	.word	0x0800a1a8
 80010f0:	20000268 	.word	0x20000268
 80010f4:	0800a1c8 	.word	0x0800a1c8
 80010f8:	2000026c 	.word	0x2000026c
 80010fc:	0800a1ec 	.word	0x0800a1ec
 8001100:	20000270 	.word	0x20000270

08001104 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN Header_StartDefaultTask */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    static uint8_t rx_data; // Biến nhận ký tự mới nhất

    if (huart->Instance == USART2) // Xử lý UART2
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <HAL_UART_RxCpltCallback+0x74>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12c      	bne.n	8001170 <HAL_UART_RxCpltCallback+0x6c>
    {
        if (rx_data == '\n' || rx_data == '\r') // Ký tự kết thúc chuỗi
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <HAL_UART_RxCpltCallback+0x78>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d003      	beq.n	8001126 <HAL_UART_RxCpltCallback+0x22>
 800111e:	4b17      	ldr	r3, [pc, #92]	@ (800117c <HAL_UART_RxCpltCallback+0x78>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b0d      	cmp	r3, #13
 8001124:	d110      	bne.n	8001148 <HAL_UART_RxCpltCallback+0x44>
        {
            rx_buffer[rx_index] = '\0'; // Thêm ký tự kết thúc chuỗi
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_UART_RxCpltCallback+0x7c>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_UART_RxCpltCallback+0x80>)
 800112e:	2100      	movs	r1, #0
 8001130:	5499      	strb	r1, [r3, r2]
            xQueueSendFromISR(uartQueueHandle, rx_buffer, NULL); // Gửi toàn bộ chuỗi vào hàng đợi
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_UART_RxCpltCallback+0x84>)
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2200      	movs	r2, #0
 800113a:	4912      	ldr	r1, [pc, #72]	@ (8001184 <HAL_UART_RxCpltCallback+0x80>)
 800113c:	f004 fc0f 	bl	800595e <xQueueGenericSendFromISR>
            rx_index = 0; // Reset chỉ số buffer
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_UART_RxCpltCallback+0x7c>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e00e      	b.n	8001166 <HAL_UART_RxCpltCallback+0x62>
        }
        else if (rx_index < RX_BUFFER_SIZE - 1) // Chỉ thêm ký tự nếu còn không gian
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_UART_RxCpltCallback+0x7c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b13      	cmp	r3, #19
 800114e:	d80a      	bhi.n	8001166 <HAL_UART_RxCpltCallback+0x62>
        {
            rx_buffer[rx_index++] = rx_data; // Lưu ký tự vào buffer
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_UART_RxCpltCallback+0x7c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	b2d1      	uxtb	r1, r2
 8001158:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_UART_RxCpltCallback+0x7c>)
 800115a:	7011      	strb	r1, [r2, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <HAL_UART_RxCpltCallback+0x78>)
 8001160:	7819      	ldrb	r1, [r3, #0]
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <HAL_UART_RxCpltCallback+0x80>)
 8001164:	5499      	strb	r1, [r3, r2]
        }

        // Tiếp tục nhận ký tự tiếp theo
        HAL_UART_Receive_IT(&huart2, &rx_data, 1); // Khởi động nhận ký tự tiếp theo
 8001166:	2201      	movs	r2, #1
 8001168:	4904      	ldr	r1, [pc, #16]	@ (800117c <HAL_UART_RxCpltCallback+0x78>)
 800116a:	4808      	ldr	r0, [pc, #32]	@ (800118c <HAL_UART_RxCpltCallback+0x88>)
 800116c:	f003 fa36 	bl	80045dc <HAL_UART_Receive_IT>
    }
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	200004c8 	.word	0x200004c8
 8001180:	2000025d 	.word	0x2000025d
 8001184:	20000248 	.word	0x20000248
 8001188:	20000260 	.word	0x20000260
 800118c:	20000f48 	.word	0x20000f48

08001190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001198:	2001      	movs	r0, #1
 800119a:	f004 f9ae 	bl	80054fa <osDelay>
 800119e:	e7fb      	b.n	8001198 <StartDefaultTask+0x8>

080011a0 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GPIOB, LED0_Pin);
 80011a8:	2101      	movs	r1, #1
 80011aa:	4804      	ldr	r0, [pc, #16]	@ (80011bc <StartTask01+0x1c>)
 80011ac:	f002 f8f3 	bl	8003396 <HAL_GPIO_TogglePin>
    osDelay(1500);
 80011b0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80011b4:	f004 f9a1 	bl	80054fa <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LED0_Pin);
 80011b8:	bf00      	nop
 80011ba:	e7f5      	b.n	80011a8 <StartTask01+0x8>
 80011bc:	40020400 	.word	0x40020400

080011c0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    static uint8_t rx_data;

    HAL_UART_Receive_IT(&huart2, &rx_data, 1); // Bắt đầu nhận dữ liệu UART
 80011c8:	2201      	movs	r2, #1
 80011ca:	4904      	ldr	r1, [pc, #16]	@ (80011dc <StartTask02+0x1c>)
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <StartTask02+0x20>)
 80011ce:	f003 fa05 	bl	80045dc <HAL_UART_Receive_IT>

    for (;;)
    {
        osDelay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f004 f991 	bl	80054fa <osDelay>
 80011d8:	e7fb      	b.n	80011d2 <StartTask02+0x12>
 80011da:	bf00      	nop
 80011dc:	200004c9 	.word	0x200004c9
 80011e0:	20000f48 	.word	0x20000f48

080011e4 <StartTask03>:




void StartTask03(void const * argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	@ 0x50
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	6078      	str	r0, [r7, #4]
    char display_buffer[RX_BUFFER_SIZE];
    char temp_buffer[RX_BUFFER_SIZE];
    const char *name_prefix = "Name: "; // Chuỗi cố định hiển thị tên
 80011ec:	4b17      	ldr	r3, [pc, #92]	@ (800124c <StartTask03+0x68>)
 80011ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

    for (;;)
    {
        if (xQueueReceive(uartQueueHandle, &temp_buffer, portMAX_DELAY) == pdPASS)
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <StartTask03+0x6c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f107 010c 	add.w	r1, r7, #12
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fc4d 	bl	8005a9c <xQueueReceive>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d11c      	bne.n	8001242 <StartTask03+0x5e>
        {
            // Kết hợp tên và chuỗi nhận được
            snprintf(display_buffer, RX_BUFFER_SIZE, "%s%s", name_prefix, temp_buffer);
 8001208:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001214:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <StartTask03+0x70>)
 8001216:	2115      	movs	r1, #21
 8001218:	f006 fe58 	bl	8007ecc <sniprintf>

            // Xóa màn hình và hiển thị nội dung
            ST7789_Fill_Color(BLACK);
 800121c:	2000      	movs	r0, #0
 800121e:	f000 fbfd 	bl	8001a1c <ST7789_Fill_Color>
            ST7789_WriteString(10, 10, display_buffer, Font_16x26, WHITE, BLACK);
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <StartTask03+0x74>)
 8001224:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001228:	2200      	movs	r2, #0
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001230:	9201      	str	r2, [sp, #4]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	9200      	str	r2, [sp, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	460a      	mov	r2, r1
 800123a:	210a      	movs	r1, #10
 800123c:	200a      	movs	r0, #10
 800123e:	f000 fc9f 	bl	8001b80 <ST7789_WriteString>
        }
        osDelay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f004 f959 	bl	80054fa <osDelay>
        if (xQueueReceive(uartQueueHandle, &temp_buffer, portMAX_DELAY) == pdPASS)
 8001248:	e7d2      	b.n	80011f0 <StartTask03+0xc>
 800124a:	bf00      	nop
 800124c:	0800a208 	.word	0x0800a208
 8001250:	20000260 	.word	0x20000260
 8001254:	0800a210 	.word	0x0800a210
 8001258:	20000000 	.word	0x20000000

0800125c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b3f      	ldr	r3, [pc, #252]	@ (8001374 <MX_GPIO_Init+0x118>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a3e      	ldr	r2, [pc, #248]	@ (8001374 <MX_GPIO_Init+0x118>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b3c      	ldr	r3, [pc, #240]	@ (8001374 <MX_GPIO_Init+0x118>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b38      	ldr	r3, [pc, #224]	@ (8001374 <MX_GPIO_Init+0x118>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a37      	ldr	r2, [pc, #220]	@ (8001374 <MX_GPIO_Init+0x118>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b35      	ldr	r3, [pc, #212]	@ (8001374 <MX_GPIO_Init+0x118>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <MX_GPIO_Init+0x118>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a30      	ldr	r2, [pc, #192]	@ (8001374 <MX_GPIO_Init+0x118>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <MX_GPIO_Init+0x118>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|GPIO_PIN_1|ST7789_DC_Pin_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f240 1103 	movw	r1, #259	@ 0x103
 80012cc:	482a      	ldr	r0, [pc, #168]	@ (8001378 <MX_GPIO_Init+0x11c>)
 80012ce:	f002 f849 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_RST_Pin_Pin|GPIO_PIN_6|ST7789_CS_Pin_Pin, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	21c4      	movs	r1, #196	@ 0xc4
 80012d6:	4828      	ldr	r0, [pc, #160]	@ (8001378 <MX_GPIO_Init+0x11c>)
 80012d8:	f002 f844 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012e2:	4826      	ldr	r0, [pc, #152]	@ (800137c <MX_GPIO_Init+0x120>)
 80012e4:	f002 f83e 	bl	8003364 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin PB1 ST7789_RST_Pin_Pin ST7789_DC_Pin_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|GPIO_PIN_1|ST7789_RST_Pin_Pin|ST7789_DC_Pin_Pin;
 80012e8:	f240 1307 	movw	r3, #263	@ 0x107
 80012ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	481d      	ldr	r0, [pc, #116]	@ (8001378 <MX_GPIO_Init+0x11c>)
 8001302:	f001 fe93 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800130a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4817      	ldr	r0, [pc, #92]	@ (800137c <MX_GPIO_Init+0x120>)
 8001320:	f001 fe84 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001324:	2310      	movs	r3, #16
 8001326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001328:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	480f      	ldr	r0, [pc, #60]	@ (8001378 <MX_GPIO_Init+0x11c>)
 800133a:	f001 fe77 	bl	800302c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 ST7789_CS_Pin_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|ST7789_CS_Pin_Pin;
 800133e:	23c0      	movs	r3, #192	@ 0xc0
 8001340:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	@ (8001378 <MX_GPIO_Init+0x11c>)
 8001356:	f001 fe69 	bl	800302c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2105      	movs	r1, #5
 800135e:	200a      	movs	r0, #10
 8001360:	f001 fa2b 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001364:	200a      	movs	r0, #10
 8001366:	f001 fa44 	bl	80027f2 <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400
 800137c:	40020000 	.word	0x40020000

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fe46 	bl	8002014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 f812 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138c:	f7ff ff66 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 8001390:	f7ff fe02 	bl	8000f98 <MX_DMA_Init>
  MX_SPI1_Init();
 8001394:	f000 f87c 	bl	8001490 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001398:	f7ff fd7e 	bl	8000e98 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800139c:	f000 fd96 	bl	8001ecc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 80013a0:	f000 fa96 	bl	80018d0 <ST7789_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80013a4:	f7ff fe3a 	bl	800101c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80013a8:	f004 f854 	bl	8005454 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//	ST7789_Test();   //test lcd
//	ST7789_WriteString(120, 160, "Touch pin", Font_11x18, RED, WHITE);
	while (1) {
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <main+0x2c>

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	@ 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2230      	movs	r2, #48	@ 0x30
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f006 fdfb 	bl	8007fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a27      	ldr	r2, [pc, #156]	@ (800147c <SystemClock_Config+0xcc>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e4:	4b25      	ldr	r3, [pc, #148]	@ (800147c <SystemClock_Config+0xcc>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <SystemClock_Config+0xd0>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <SystemClock_Config+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001416:	2302      	movs	r3, #2
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001420:	2304      	movs	r3, #4
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001424:	23a8      	movs	r3, #168	@ 0xa8
 8001426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800142c:	2304      	movs	r3, #4
 800142e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4618      	mov	r0, r3
 8001436:	f001 ffed 	bl	8003414 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001440:	f000 f820 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001450:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2105      	movs	r1, #5
 8001462:	4618      	mov	r0, r3
 8001464:	f002 fa4e 	bl	8003904 <HAL_RCC_ClockConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800146e:	f000 f809 	bl	8001484 <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	3750      	adds	r7, #80	@ 0x50
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <Error_Handler+0x8>

08001490 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <MX_SPI1_Init+0x64>)
 8001496:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <MX_SPI1_Init+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_SPI1_Init+0x64>)
 800149c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ae:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014c4:	2228      	movs	r2, #40	@ 0x28
 80014c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014dc:	220a      	movs	r2, #10
 80014de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	@ (80014f4 <MX_SPI1_Init+0x64>)
 80014e2:	f002 fc2f 	bl	8003d44 <HAL_SPI_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014ec:	f7ff ffca 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200004cc 	.word	0x200004cc
 80014f8:	40013000 	.word	0x40013000

080014fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a56      	ldr	r2, [pc, #344]	@ (8001674 <HAL_SPI_MspInit+0x178>)
 800151a:	4293      	cmp	r3, r2
 800151c:	f040 80a6 	bne.w	800166c <HAL_SPI_MspInit+0x170>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	4b54      	ldr	r3, [pc, #336]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 8001526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001528:	4a53      	ldr	r2, [pc, #332]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 800152a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800152e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001530:	4b51      	ldr	r3, [pc, #324]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	4b4d      	ldr	r3, [pc, #308]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	4a4c      	ldr	r2, [pc, #304]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	@ 0x30
 800154c:	4b4a      	ldr	r3, [pc, #296]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	4b46      	ldr	r3, [pc, #280]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	4a45      	ldr	r2, [pc, #276]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6313      	str	r3, [r2, #48]	@ 0x30
 8001568:	4b43      	ldr	r3, [pc, #268]	@ (8001678 <HAL_SPI_MspInit+0x17c>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001574:	23c0      	movs	r3, #192	@ 0xc0
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001584:	2305      	movs	r3, #5
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	483b      	ldr	r0, [pc, #236]	@ (800167c <HAL_SPI_MspInit+0x180>)
 8001590:	f001 fd4c 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001594:	2308      	movs	r3, #8
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a4:	2305      	movs	r3, #5
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4834      	ldr	r0, [pc, #208]	@ (8001680 <HAL_SPI_MspInit+0x184>)
 80015b0:	f001 fd3c 	bl	800302c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80015b4:	4b33      	ldr	r3, [pc, #204]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015b6:	4a34      	ldr	r2, [pc, #208]	@ (8001688 <HAL_SPI_MspInit+0x18c>)
 80015b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80015ba:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80015c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c2:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015c4:	2240      	movs	r2, #64	@ 0x40
 80015c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015dc:	4b29      	ldr	r3, [pc, #164]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015e2:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e8:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015f4:	4823      	ldr	r0, [pc, #140]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 80015f6:	f001 f917 	bl	8002828 <HAL_DMA_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 8001600:	f7ff ff40 	bl	8001484 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a1f      	ldr	r2, [pc, #124]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 8001608:	649a      	str	r2, [r3, #72]	@ 0x48
 800160a:	4a1e      	ldr	r2, [pc, #120]	@ (8001684 <HAL_SPI_MspInit+0x188>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001610:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001612:	4a1f      	ldr	r2, [pc, #124]	@ (8001690 <HAL_SPI_MspInit+0x194>)
 8001614:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001616:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001618:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800161c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <HAL_SPI_MspInit+0x190>)
 800162c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_SPI_MspInit+0x190>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001640:	2200      	movs	r2, #0
 8001642:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001646:	2200      	movs	r2, #0
 8001648:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <HAL_SPI_MspInit+0x190>)
 800164c:	2200      	movs	r2, #0
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001650:	480e      	ldr	r0, [pc, #56]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001652:	f001 f8e9 	bl	8002828 <HAL_DMA_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 800165c:	f7ff ff12 	bl	8001484 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001664:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <HAL_SPI_MspInit+0x190>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	@ 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40013000 	.word	0x40013000
 8001678:	40023800 	.word	0x40023800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	20000524 	.word	0x20000524
 8001688:	40026458 	.word	0x40026458
 800168c:	20000584 	.word	0x20000584
 8001690:	40026410 	.word	0x40026410

08001694 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800169e:	2200      	movs	r2, #0
 80016a0:	2180      	movs	r1, #128	@ 0x80
 80016a2:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <ST7789_WriteCommand+0x40>)
 80016a4:	f001 fe5e 	bl	8003364 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ae:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <ST7789_WriteCommand+0x40>)
 80016b0:	f001 fe58 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80016b4:	1df9      	adds	r1, r7, #7
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	2201      	movs	r2, #1
 80016bc:	4806      	ldr	r0, [pc, #24]	@ (80016d8 <ST7789_WriteCommand+0x44>)
 80016be:	f002 fbca 	bl	8003e56 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80016c2:	2201      	movs	r2, #1
 80016c4:	2180      	movs	r1, #128	@ 0x80
 80016c6:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <ST7789_WriteCommand+0x40>)
 80016c8:	f001 fe4c 	bl	8003364 <HAL_GPIO_WritePin>
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020400 	.word	0x40020400
 80016d8:	200004cc 	.word	0x200004cc

080016dc <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80016e6:	2200      	movs	r2, #0
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	4820      	ldr	r0, [pc, #128]	@ (800176c <ST7789_WriteData+0x90>)
 80016ec:	f001 fe3a 	bl	8003364 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f6:	481d      	ldr	r0, [pc, #116]	@ (800176c <ST7789_WriteData+0x90>)
 80016f8:	f001 fe34 	bl	8003364 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80016fc:	e02a      	b.n	8001754 <ST7789_WriteData+0x78>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001704:	4293      	cmp	r3, r2
 8001706:	bf28      	it	cs
 8001708:	4613      	movcs	r3, r2
 800170a:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <ST7789_WriteData+0x94>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	4293      	cmp	r3, r2
 8001716:	d30e      	bcc.n	8001736 <ST7789_WriteData+0x5a>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8001718:	89fb      	ldrh	r3, [r7, #14]
 800171a:	461a      	mov	r2, r3
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4815      	ldr	r0, [pc, #84]	@ (8001774 <ST7789_WriteData+0x98>)
 8001720:	f002 fcde 	bl	80040e0 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8001724:	bf00      	nop
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <ST7789_WriteData+0x98>)
 8001728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b01      	cmp	r3, #1
 8001732:	d1f8      	bne.n	8001726 <ST7789_WriteData+0x4a>
 8001734:	e006      	b.n	8001744 <ST7789_WriteData+0x68>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001736:	89fa      	ldrh	r2, [r7, #14]
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	480d      	ldr	r0, [pc, #52]	@ (8001774 <ST7789_WriteData+0x98>)
 8001740:	f002 fb89 	bl	8003e56 <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1d1      	bne.n	80016fe <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 800175a:	2201      	movs	r2, #1
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	4803      	ldr	r0, [pc, #12]	@ (800176c <ST7789_WriteData+0x90>)
 8001760:	f001 fe00 	bl	8003364 <HAL_GPIO_WritePin>
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40020400 	.word	0x40020400
 8001770:	20000008 	.word	0x20000008
 8001774:	200004cc 	.word	0x200004cc

08001778 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <ST7789_WriteSmallData+0x40>)
 8001788:	f001 fdec 	bl	8003364 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800178c:	2201      	movs	r2, #1
 800178e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001792:	4809      	ldr	r0, [pc, #36]	@ (80017b8 <ST7789_WriteSmallData+0x40>)
 8001794:	f001 fde6 	bl	8003364 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001798:	1df9      	adds	r1, r7, #7
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	2201      	movs	r2, #1
 80017a0:	4806      	ldr	r0, [pc, #24]	@ (80017bc <ST7789_WriteSmallData+0x44>)
 80017a2:	f002 fb58 	bl	8003e56 <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80017a6:	2201      	movs	r2, #1
 80017a8:	2180      	movs	r1, #128	@ 0x80
 80017aa:	4803      	ldr	r0, [pc, #12]	@ (80017b8 <ST7789_WriteSmallData+0x40>)
 80017ac:	f001 fdda 	bl	8003364 <HAL_GPIO_WritePin>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020400 	.word	0x40020400
 80017bc:	200004cc 	.word	0x200004cc

080017c0 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80017ca:	2036      	movs	r0, #54	@ 0x36
 80017cc:	f7ff ff62 	bl	8001694 <ST7789_WriteCommand>
	switch (m) {
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d81a      	bhi.n	800180c <ST7789_SetRotation+0x4c>
 80017d6:	a201      	add	r2, pc, #4	@ (adr r2, 80017dc <ST7789_SetRotation+0x1c>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f5 	.word	0x080017f5
 80017e4:	080017fd 	.word	0x080017fd
 80017e8:	08001805 	.word	0x08001805
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80017ec:	20c0      	movs	r0, #192	@ 0xc0
 80017ee:	f7ff ffc3 	bl	8001778 <ST7789_WriteSmallData>
		break;
 80017f2:	e00c      	b.n	800180e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80017f4:	20a0      	movs	r0, #160	@ 0xa0
 80017f6:	f7ff ffbf 	bl	8001778 <ST7789_WriteSmallData>
		break;
 80017fa:	e008      	b.n	800180e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff ffbb 	bl	8001778 <ST7789_WriteSmallData>
		break;
 8001802:	e004      	b.n	800180e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001804:	2060      	movs	r0, #96	@ 0x60
 8001806:	f7ff ffb7 	bl	8001778 <ST7789_WriteSmallData>
		break;
 800180a:	e000      	b.n	800180e <ST7789_SetRotation+0x4e>
	default:
		break;
 800180c:	bf00      	nop
	}
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop

08001818 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	4604      	mov	r4, r0
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4623      	mov	r3, r4
 8001828:	80fb      	strh	r3, [r7, #6]
 800182a:	4603      	mov	r3, r0
 800182c:	80bb      	strh	r3, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	807b      	strh	r3, [r7, #2]
 8001832:	4613      	mov	r3, r2
 8001834:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001836:	2200      	movs	r2, #0
 8001838:	2180      	movs	r1, #128	@ 0x80
 800183a:	4824      	ldr	r0, [pc, #144]	@ (80018cc <ST7789_SetAddressWindow+0xb4>)
 800183c:	f001 fd92 	bl	8003364 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	82fb      	strh	r3, [r7, #22]
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001848:	88bb      	ldrh	r3, [r7, #4]
 800184a:	827b      	strh	r3, [r7, #18]
 800184c:	883b      	ldrh	r3, [r7, #0]
 800184e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001850:	202a      	movs	r0, #42	@ 0x2a
 8001852:	f7ff ff1f 	bl	8001694 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001856:	8afb      	ldrh	r3, [r7, #22]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	733b      	strb	r3, [r7, #12]
 8001860:	8afb      	ldrh	r3, [r7, #22]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	737b      	strb	r3, [r7, #13]
 8001866:	8abb      	ldrh	r3, [r7, #20]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	b29b      	uxth	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	73bb      	strb	r3, [r7, #14]
 8001870:	8abb      	ldrh	r3, [r7, #20]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2104      	movs	r1, #4
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff2d 	bl	80016dc <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001882:	202b      	movs	r0, #43	@ 0x2b
 8001884:	f7ff ff06 	bl	8001694 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001888:	8a7b      	ldrh	r3, [r7, #18]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	723b      	strb	r3, [r7, #8]
 8001892:	8a7b      	ldrh	r3, [r7, #18]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	727b      	strb	r3, [r7, #9]
 8001898:	8a3b      	ldrh	r3, [r7, #16]
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	b29b      	uxth	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	72bb      	strb	r3, [r7, #10]
 80018a2:	8a3b      	ldrh	r3, [r7, #16]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80018a8:	f107 0308 	add.w	r3, r7, #8
 80018ac:	2104      	movs	r1, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff14 	bl	80016dc <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80018b4:	202c      	movs	r0, #44	@ 0x2c
 80018b6:	f7ff feed 	bl	8001694 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80018ba:	2201      	movs	r2, #1
 80018bc:	2180      	movs	r1, #128	@ 0x80
 80018be:	4803      	ldr	r0, [pc, #12]	@ (80018cc <ST7789_SetAddressWindow+0xb4>)
 80018c0:	f001 fd50 	bl	8003364 <HAL_GPIO_WritePin>
}
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}
 80018cc:	40020400 	.word	0x40020400

080018d0 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b08b      	sub	sp, #44	@ 0x2c
 80018d4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 80018d6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80018da:	2100      	movs	r1, #0
 80018dc:	484a      	ldr	r0, [pc, #296]	@ (8001a08 <ST7789_Init+0x138>)
 80018de:	f006 fb6c 	bl	8007fba <memset>
	#endif
	HAL_Delay(10);
 80018e2:	200a      	movs	r0, #10
 80018e4:	f000 fc08 	bl	80020f8 <HAL_Delay>
    ST7789_RST_Clr();
 80018e8:	2200      	movs	r2, #0
 80018ea:	2104      	movs	r1, #4
 80018ec:	4847      	ldr	r0, [pc, #284]	@ (8001a0c <ST7789_Init+0x13c>)
 80018ee:	f001 fd39 	bl	8003364 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80018f2:	200a      	movs	r0, #10
 80018f4:	f000 fc00 	bl	80020f8 <HAL_Delay>
    ST7789_RST_Set();
 80018f8:	2201      	movs	r2, #1
 80018fa:	2104      	movs	r1, #4
 80018fc:	4843      	ldr	r0, [pc, #268]	@ (8001a0c <ST7789_Init+0x13c>)
 80018fe:	f001 fd31 	bl	8003364 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001902:	2014      	movs	r0, #20
 8001904:	f000 fbf8 	bl	80020f8 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001908:	203a      	movs	r0, #58	@ 0x3a
 800190a:	f7ff fec3 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800190e:	2055      	movs	r0, #85	@ 0x55
 8001910:	f7ff ff32 	bl	8001778 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001914:	20b2      	movs	r0, #178	@ 0xb2
 8001916:	f7ff febd 	bl	8001694 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800191a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a10 <ST7789_Init+0x140>)
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001924:	6018      	str	r0, [r3, #0]
 8001926:	3304      	adds	r3, #4
 8001928:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	2105      	movs	r1, #5
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fed3 	bl	80016dc <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001936:	2002      	movs	r0, #2
 8001938:	f7ff ff42 	bl	80017c0 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800193c:	20b7      	movs	r0, #183	@ 0xb7
 800193e:	f7ff fea9 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001942:	2035      	movs	r0, #53	@ 0x35
 8001944:	f7ff ff18 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001948:	20bb      	movs	r0, #187	@ 0xbb
 800194a:	f7ff fea3 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800194e:	2019      	movs	r0, #25
 8001950:	f7ff ff12 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001954:	20c0      	movs	r0, #192	@ 0xc0
 8001956:	f7ff fe9d 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800195a:	202c      	movs	r0, #44	@ 0x2c
 800195c:	f7ff ff0c 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001960:	20c2      	movs	r0, #194	@ 0xc2
 8001962:	f7ff fe97 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff ff06 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800196c:	20c3      	movs	r0, #195	@ 0xc3
 800196e:	f7ff fe91 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001972:	2012      	movs	r0, #18
 8001974:	f7ff ff00 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001978:	20c4      	movs	r0, #196	@ 0xc4
 800197a:	f7ff fe8b 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800197e:	2020      	movs	r0, #32
 8001980:	f7ff fefa 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001984:	20c6      	movs	r0, #198	@ 0xc6
 8001986:	f7ff fe85 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800198a:	200f      	movs	r0, #15
 800198c:	f7ff fef4 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001990:	20d0      	movs	r0, #208	@ 0xd0
 8001992:	f7ff fe7f 	bl	8001694 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001996:	20a4      	movs	r0, #164	@ 0xa4
 8001998:	f7ff feee 	bl	8001778 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 800199c:	20a1      	movs	r0, #161	@ 0xa1
 800199e:	f7ff feeb 	bl	8001778 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80019a2:	20e0      	movs	r0, #224	@ 0xe0
 80019a4:	f7ff fe76 	bl	8001694 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80019a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <ST7789_Init+0x144>)
 80019aa:	f107 0410 	add.w	r4, r7, #16
 80019ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b0:	c407      	stmia	r4!, {r0, r1, r2}
 80019b2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	210e      	movs	r1, #14
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe8e 	bl	80016dc <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80019c0:	20e1      	movs	r0, #225	@ 0xe1
 80019c2:	f7ff fe67 	bl	8001694 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <ST7789_Init+0x148>)
 80019c8:	463c      	mov	r4, r7
 80019ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019cc:	c407      	stmia	r4!, {r0, r1, r2}
 80019ce:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80019d0:	463b      	mov	r3, r7
 80019d2:	210e      	movs	r1, #14
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fe81 	bl	80016dc <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80019da:	2021      	movs	r0, #33	@ 0x21
 80019dc:	f7ff fe5a 	bl	8001694 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80019e0:	2011      	movs	r0, #17
 80019e2:	f7ff fe57 	bl	8001694 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80019e6:	2013      	movs	r0, #19
 80019e8:	f7ff fe54 	bl	8001694 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80019ec:	2029      	movs	r0, #41	@ 0x29
 80019ee:	f7ff fe51 	bl	8001694 <ST7789_WriteCommand>

	HAL_Delay(50);
 80019f2:	2032      	movs	r0, #50	@ 0x32
 80019f4:	f000 fb80 	bl	80020f8 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 f80f 	bl	8001a1c <ST7789_Fill_Color>
}
 80019fe:	bf00      	nop
 8001a00:	372c      	adds	r7, #44	@ 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200005e4 	.word	0x200005e4
 8001a0c:	40020400 	.word	0x40020400
 8001a10:	0800a218 	.word	0x0800a218
 8001a14:	0800a220 	.word	0x0800a220
 8001a18:	0800a230 	.word	0x0800a230

08001a1c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001a26:	f240 133f 	movw	r3, #319	@ 0x13f
 8001a2a:	22ef      	movs	r2, #239	@ 0xef
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fef2 	bl	8001818 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001a34:	2200      	movs	r2, #0
 8001a36:	2180      	movs	r1, #128	@ 0x80
 8001a38:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <ST7789_Fill_Color+0x60>)
 8001a3a:	f001 fc93 	bl	8003364 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	81fb      	strh	r3, [r7, #14]
 8001a42:	e00e      	b.n	8001a62 <ST7789_Fill_Color+0x46>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001a44:	88fb      	ldrh	r3, [r7, #6]
 8001a46:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	@ (8001a80 <ST7789_Fill_Color+0x64>)
 8001a4e:	f006 fab4 	bl	8007fba <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001a52:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001a56:	480a      	ldr	r0, [pc, #40]	@ (8001a80 <ST7789_Fill_Color+0x64>)
 8001a58:	f7ff fe40 	bl	80016dc <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	81fb      	strh	r3, [r7, #14]
 8001a62:	89fb      	ldrh	r3, [r7, #14]
 8001a64:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a66:	d9ed      	bls.n	8001a44 <ST7789_Fill_Color+0x28>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2180      	movs	r1, #128	@ 0x80
 8001a6c:	4803      	ldr	r0, [pc, #12]	@ (8001a7c <ST7789_Fill_Color+0x60>)
 8001a6e:	f001 fc79 	bl	8003364 <HAL_GPIO_WritePin>
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	200005e4 	.word	0x200005e4

08001a84 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001a84:	b082      	sub	sp, #8
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b088      	sub	sp, #32
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	460b      	mov	r3, r1
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	4837      	ldr	r0, [pc, #220]	@ (8001b7c <ST7789_WriteChar+0xf8>)
 8001aa0:	f001 fc60 	bl	8003364 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001aa4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4413      	add	r3, r2
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001ab8:	4619      	mov	r1, r3
 8001aba:	88bb      	ldrh	r3, [r7, #4]
 8001abc:	440b      	add	r3, r1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	88b9      	ldrh	r1, [r7, #4]
 8001ac6:	88f8      	ldrh	r0, [r7, #6]
 8001ac8:	f7ff fea6 	bl	8001818 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	e041      	b.n	8001b56 <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8001ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	3b20      	subs	r3, #32
 8001ad8:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	440b      	add	r3, r1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	e027      	b.n	8001b44 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00e      	beq.n	8001b22 <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001b04:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b06:	0a1b      	lsrs	r3, r3, #8
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	743b      	strb	r3, [r7, #16]
 8001b0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fdde 	bl	80016dc <ST7789_WriteData>
 8001b20:	e00d      	b.n	8001b3e <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001b22:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	733b      	strb	r3, [r7, #12]
 8001b2c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	2102      	movs	r1, #2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fdcf 	bl	80016dc <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d3d1      	bcc.n	8001af4 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	3301      	adds	r3, #1
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d3b7      	bcc.n	8001ad2 <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8001b62:	2201      	movs	r2, #1
 8001b64:	2180      	movs	r1, #128	@ 0x80
 8001b66:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <ST7789_WriteChar+0xf8>)
 8001b68:	f001 fbfc 	bl	8003364 <HAL_GPIO_WritePin>
}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b76:	b002      	add	sp, #8
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40020400 	.word	0x40020400

08001b80 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001b80:	b082      	sub	sp, #8
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af04      	add	r7, sp, #16
 8001b88:	603a      	str	r2, [r7, #0]
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	460b      	mov	r3, r1
 8001b92:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001b94:	2200      	movs	r2, #0
 8001b96:	2180      	movs	r1, #128	@ 0x80
 8001b98:	4822      	ldr	r0, [pc, #136]	@ (8001c24 <ST7789_WriteString+0xa4>)
 8001b9a:	f001 fbe3 	bl	8003364 <HAL_GPIO_WritePin>
	while (*str) {
 8001b9e:	e02e      	b.n	8001bfe <ST7789_WriteString+0x7e>
		if (x + font.width >= ST7789_WIDTH) {
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	7d3a      	ldrb	r2, [r7, #20]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2bef      	cmp	r3, #239	@ 0xef
 8001ba8:	dd14      	ble.n	8001bd4 <ST7789_WriteString+0x54>
			x = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001bae:	7d7b      	ldrb	r3, [r7, #21]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	88bb      	ldrh	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	7d7a      	ldrb	r2, [r7, #21]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001bc2:	da21      	bge.n	8001c08 <ST7789_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d103      	bne.n	8001bd4 <ST7789_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	603b      	str	r3, [r7, #0]
				continue;
 8001bd2:	e014      	b.n	8001bfe <ST7789_WriteString+0x7e>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	88b9      	ldrh	r1, [r7, #4]
 8001bda:	88f8      	ldrh	r0, [r7, #6]
 8001bdc:	8c3b      	ldrh	r3, [r7, #32]
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	8bbb      	ldrh	r3, [r7, #28]
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f7ff ff4b 	bl	8001a84 <ST7789_WriteChar>
		x += font.width;
 8001bee:	7d3b      	ldrb	r3, [r7, #20]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	80fb      	strh	r3, [r7, #6]
		str++;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1cc      	bne.n	8001ba0 <ST7789_WriteString+0x20>
 8001c06:	e000      	b.n	8001c0a <ST7789_WriteString+0x8a>
				break;
 8001c08:	bf00      	nop
	}
	ST7789_UnSelect();
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2180      	movs	r1, #128	@ 0x80
 8001c0e:	4805      	ldr	r0, [pc, #20]	@ (8001c24 <ST7789_WriteString+0xa4>)
 8001c10:	f001 fba8 	bl	8003364 <HAL_GPIO_WritePin>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c1e:	b002      	add	sp, #8
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40020400 	.word	0x40020400

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_MspInit+0x54>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	210f      	movs	r1, #15
 8001c6a:	f06f 0001 	mvn.w	r0, #1
 8001c6e:	f000 fda4 	bl	80027ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cba:	f000 f9fd 	bl	80020b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001cbe:	f004 fe9f 	bl	8006a00 <xTaskGetSchedulerState>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d001      	beq.n	8001ccc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001cc8:	f005 f966 	bl	8006f98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001cd4:	2010      	movs	r0, #16
 8001cd6:	f001 fb79 	bl	80033cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ce4:	4802      	ldr	r0, [pc, #8]	@ (8001cf0 <USART2_IRQHandler+0x10>)
 8001ce6:	f002 fc9f 	bl	8004628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000f48 	.word	0x20000f48

08001cf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA2_Stream0_IRQHandler+0x10>)
 8001cfa:	f000 ff2d 	bl	8002b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000584 	.word	0x20000584

08001d08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	@ (8001d18 <DMA2_Stream3_IRQHandler+0x10>)
 8001d0e:	f000 ff23 	bl	8002b58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000524 	.word	0x20000524

08001d1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return 1;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_kill>:

int _kill(int pid, int sig)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d36:	f006 f993 	bl	8008060 <__errno>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2216      	movs	r2, #22
 8001d3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_exit>:

void _exit (int status)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ffe7 	bl	8001d2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <_exit+0x12>

08001d62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e00a      	b.n	8001d8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d74:	f3af 8000 	nop.w
 8001d78:	4601      	mov	r1, r0
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	b2ca      	uxtb	r2, r1
 8001d82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dbf0      	blt.n	8001d74 <_read+0x12>
  }

  return len;
 8001d92:	687b      	ldr	r3, [r7, #4]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	e009      	b.n	8001dc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	60ba      	str	r2, [r7, #8]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf1      	blt.n	8001dae <_write+0x12>
  }
  return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_close>:

int _close(int file)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_isatty>:

int _isatty(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f006 f8f8 	bl	8008060 <__errno>
 8001e70:	4603      	mov	r3, r0
 8001e72:	220c      	movs	r2, #12
 8001e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	@ (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20020000 	.word	0x20020000
 8001e9c:	00004000 	.word	0x00004000
 8001ea0:	20000f44 	.word	0x20000f44
 8001ea4:	20004e38 	.word	0x20004e38

08001ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	@ (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <MX_USART2_UART_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_USART2_UART_Init+0x4c>)
 8001f04:	f002 fb1a 	bl	800453c <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f7ff fab9 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000f48 	.word	0x20000f48
 8001f1c:	40004400 	.word	0x40004400

08001f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb4 <HAL_UART_MspInit+0x94>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d133      	bne.n	8001faa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <HAL_UART_MspInit+0x98>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb8 <HAL_UART_MspInit+0x98>)
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f52:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_UART_MspInit+0x98>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_UART_MspInit+0x98>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a14      	ldr	r2, [pc, #80]	@ (8001fb8 <HAL_UART_MspInit+0x98>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_UART_MspInit+0x98>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4809      	ldr	r0, [pc, #36]	@ (8001fbc <HAL_UART_MspInit+0x9c>)
 8001f96:	f001 f849 	bl	800302c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	2026      	movs	r0, #38	@ 0x26
 8001fa0:	f000 fc0b 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fa4:	2026      	movs	r0, #38	@ 0x26
 8001fa6:	f000 fc24 	bl	80027f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	@ 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40004400 	.word	0x40004400
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ff8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fc4:	f7ff ff70 	bl	8001ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fca:	490d      	ldr	r1, [pc, #52]	@ (8002000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8002004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd0:	e002      	b.n	8001fd8 <LoopCopyDataInit>

08001fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd6:	3304      	adds	r3, #4

08001fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fdc:	d3f9      	bcc.n	8001fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fde:	4a0a      	ldr	r2, [pc, #40]	@ (8002008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800200c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe4:	e001      	b.n	8001fea <LoopFillZerobss>

08001fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe8:	3204      	adds	r2, #4

08001fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fec:	d3fb      	bcc.n	8001fe6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001fee:	f006 f83d 	bl	800806c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff2:	f7ff f9c5 	bl	8001380 <main>
  bx  lr    
 8001ff6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ff8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002000:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002004:	0800b9a8 	.word	0x0800b9a8
  ldr r2, =_sbss
 8002008:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800200c:	20004e34 	.word	0x20004e34

08002010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002010:	e7fe      	b.n	8002010 <ADC_IRQHandler>
	...

08002014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002018:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <HAL_Init+0x40>)
 800201e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <HAL_Init+0x40>)
 800202a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800202e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_Init+0x40>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <HAL_Init+0x40>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203c:	2003      	movs	r0, #3
 800203e:	f000 fbb1 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002042:	200f      	movs	r0, #15
 8002044:	f000 f808 	bl	8002058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002048:	f7ff fdee 	bl	8001c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023c00 	.word	0x40023c00

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002060:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <HAL_InitTick+0x54>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_InitTick+0x58>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fbc9 	bl	800280e <HAL_SYSTICK_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00e      	b.n	80020a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d80a      	bhi.n	80020a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 fb91 	bl	80027ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <HAL_InitTick+0x5c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	20000014 	.word	0x20000014
 80020b4:	20000010 	.word	0x20000010

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000014 	.word	0x20000014
 80020dc:	20000f90 	.word	0x20000f90

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000f90 	.word	0x20000f90

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000014 	.word	0x20000014

08002140 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e033      	b.n	80021be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d109      	bne.n	8002172 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fef8 	bl	8000f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d118      	bne.n	80021b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002186:	f023 0302 	bic.w	r3, r3, #2
 800218a:	f043 0202 	orr.w	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f93a 	bl	800240c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80021ae:	e001      	b.n	80021b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x1c>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e105      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x228>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d925      	bls.n	8002240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68d9      	ldr	r1, [r3, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	3b1e      	subs	r3, #30
 800220a:	2207      	movs	r2, #7
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43da      	mvns	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	400a      	ands	r2, r1
 8002218:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68d9      	ldr	r1, [r3, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	4603      	mov	r3, r0
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4403      	add	r3, r0
 8002232:	3b1e      	subs	r3, #30
 8002234:	409a      	lsls	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	e022      	b.n	8002286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	2207      	movs	r2, #7
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	400a      	ands	r2, r1
 8002262:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6919      	ldr	r1, [r3, #16]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	4618      	mov	r0, r3
 8002276:	4603      	mov	r3, r0
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4403      	add	r3, r0
 800227c:	409a      	lsls	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b06      	cmp	r3, #6
 800228c:	d824      	bhi.n	80022d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	3b05      	subs	r3, #5
 80022a0:	221f      	movs	r2, #31
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	43da      	mvns	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	400a      	ands	r2, r1
 80022ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b05      	subs	r3, #5
 80022ca:	fa00 f203 	lsl.w	r2, r0, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d6:	e04c      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b0c      	cmp	r3, #12
 80022de:	d824      	bhi.n	800232a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b23      	subs	r3, #35	@ 0x23
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43da      	mvns	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	400a      	ands	r2, r1
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	3b23      	subs	r3, #35	@ 0x23
 800231c:	fa00 f203 	lsl.w	r2, r0, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
 8002328:	e023      	b.n	8002372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b41      	subs	r3, #65	@ 0x41
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b41      	subs	r3, #65	@ 0x41
 8002366:	fa00 f203 	lsl.w	r2, r0, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002372:	4b22      	ldr	r3, [pc, #136]	@ (80023fc <HAL_ADC_ConfigChannel+0x234>)
 8002374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a21      	ldr	r2, [pc, #132]	@ (8002400 <HAL_ADC_ConfigChannel+0x238>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d109      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1cc>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b12      	cmp	r3, #18
 8002386:	d105      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	@ (8002400 <HAL_ADC_ConfigChannel+0x238>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d123      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x21e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d003      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x1e6>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b11      	cmp	r3, #17
 80023ac:	d11b      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b10      	cmp	r3, #16
 80023c0:	d111      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_ADC_ConfigChannel+0x23c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a10      	ldr	r2, [pc, #64]	@ (8002408 <HAL_ADC_ConfigChannel+0x240>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	0c9a      	lsrs	r2, r3, #18
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023d8:	e002      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40012300 	.word	0x40012300
 8002400:	40012000 	.word	0x40012000
 8002404:	2000000c 	.word	0x2000000c
 8002408:	431bde83 	.word	0x431bde83

0800240c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002414:	4b79      	ldr	r3, [pc, #484]	@ (80025fc <ADC_Init+0x1f0>)
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	431a      	orrs	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	021a      	lsls	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	4a58      	ldr	r2, [pc, #352]	@ (8002600 <ADC_Init+0x1f4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d022      	beq.n	80024ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6899      	ldr	r1, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	e00f      	b.n	800250a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002508:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0202 	bic.w	r2, r2, #2
 8002518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7e1b      	ldrb	r3, [r3, #24]
 8002524:	005a      	lsls	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01b      	beq.n	8002570 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002546:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002556:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	035a      	lsls	r2, r3, #13
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	e007      	b.n	8002580 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	3b01      	subs	r3, #1
 800259c:	051a      	lsls	r2, r3, #20
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025c2:	025a      	lsls	r2, r3, #9
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	029a      	lsls	r2, r3, #10
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40012300 	.word	0x40012300
 8002600:	0f000001 	.word	0x0f000001

08002604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <__NVIC_SetPriorityGrouping+0x44>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002620:	4013      	ands	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800262c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002636:	4a04      	ldr	r2, [pc, #16]	@ (8002648 <__NVIC_SetPriorityGrouping+0x44>)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	60d3      	str	r3, [r2, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <__NVIC_GetPriorityGrouping+0x18>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	f003 0307 	and.w	r3, r3, #7
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db0b      	blt.n	8002692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4907      	ldr	r1, [pc, #28]	@ (80026a0 <__NVIC_EnableIRQ+0x38>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	@ (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	@ 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff8e 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff29 	bl	8002604 <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027cc:	f7ff ff3e 	bl	800264c <__NVIC_GetPriorityGrouping>
 80027d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7ff ff8e 	bl	80026f8 <NVIC_EncodePriority>
 80027dc:	4602      	mov	r2, r0
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff5d 	bl	80026a4 <__NVIC_SetPriority>
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff31 	bl	8002668 <__NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffa2 	bl	8002760 <SysTick_Config>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fc54 	bl	80020e0 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e099      	b.n	8002978 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0201 	bic.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002864:	e00f      	b.n	8002886 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002866:	f7ff fc3b 	bl	80020e0 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b05      	cmp	r3, #5
 8002872:	d908      	bls.n	8002886 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2203      	movs	r2, #3
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e078      	b.n	8002978 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e8      	bne.n	8002866 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4b38      	ldr	r3, [pc, #224]	@ (8002980 <HAL_DMA_Init+0x158>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	4313      	orrs	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f023 0307 	bic.w	r3, r3, #7
 8002906:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	2b04      	cmp	r3, #4
 8002918:	d117      	bne.n	800294a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4313      	orrs	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fb01 	bl	8002f34 <DMA_CheckFifoParam>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2240      	movs	r2, #64	@ 0x40
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002946:	2301      	movs	r3, #1
 8002948:	e016      	b.n	8002978 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fab8 	bl	8002ec8 <DMA_CalcBaseAndBitshift>
 8002958:	4603      	mov	r3, r0
 800295a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002960:	223f      	movs	r2, #63	@ 0x3f
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	f010803f 	.word	0xf010803f

08002984 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Start_IT+0x26>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e040      	b.n	8002a2c <HAL_DMA_Start_IT+0xa8>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d12f      	bne.n	8002a1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fa4a 	bl	8002e6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	223f      	movs	r2, #63	@ 0x3f
 80029de:	409a      	lsls	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0216 	orr.w	r2, r2, #22
 80029f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0208 	orr.w	r2, r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e005      	b.n	8002a2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a42:	f7ff fb4d 	bl	80020e0 <HAL_GetTick>
 8002a46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d008      	beq.n	8002a66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2280      	movs	r2, #128	@ 0x80
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e052      	b.n	8002b0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0216 	bic.w	r2, r2, #22
 8002a74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d103      	bne.n	8002a96 <HAL_DMA_Abort+0x62>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0208 	bic.w	r2, r2, #8
 8002aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab6:	e013      	b.n	8002ae0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab8:	f7ff fb12 	bl	80020e0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d90c      	bls.n	8002ae0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e015      	b.n	8002b0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e4      	bne.n	8002ab8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af2:	223f      	movs	r2, #63	@ 0x3f
 8002af4:	409a      	lsls	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d004      	beq.n	8002b32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00c      	b.n	8002b4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2205      	movs	r2, #5
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b64:	4b8e      	ldr	r3, [pc, #568]	@ (8002da0 <HAL_DMA_IRQHandler+0x248>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a8e      	ldr	r2, [pc, #568]	@ (8002da4 <HAL_DMA_IRQHandler+0x24c>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	2208      	movs	r2, #8
 8002b84:	409a      	lsls	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01a      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	2208      	movs	r2, #8
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc8:	2201      	movs	r2, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be6:	2201      	movs	r2, #1
 8002be8:	409a      	lsls	r2, r3
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f043 0202 	orr.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfe:	2204      	movs	r2, #4
 8002c00:	409a      	lsls	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00b      	beq.n	8002c30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	f043 0204 	orr.w	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c34:	2210      	movs	r2, #16
 8002c36:	409a      	lsls	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d043      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03c      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	2210      	movs	r2, #16
 8002c54:	409a      	lsls	r2, r3
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d018      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d108      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d024      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
 8002c86:	e01f      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01b      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
 8002c98:	e016      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d107      	bne.n	8002cb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0208 	bic.w	r2, r2, #8
 8002cb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ccc:	2220      	movs	r2, #32
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 808f 	beq.w	8002df8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8087 	beq.w	8002df8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	2220      	movs	r2, #32
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b05      	cmp	r3, #5
 8002d00:	d136      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0216 	bic.w	r2, r2, #22
 8002d10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_DMA_IRQHandler+0x1da>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0208 	bic.w	r2, r2, #8
 8002d40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	223f      	movs	r2, #63	@ 0x3f
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d07e      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	4798      	blx	r3
        }
        return;
 8002d6e:	e079      	b.n	8002e64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01d      	beq.n	8002dba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d031      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
 8002d9c:	e02c      	b.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
 8002d9e:	bf00      	nop
 8002da0:	2000000c 	.word	0x2000000c
 8002da4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
 8002db8:	e01e      	b.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10f      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0210 	bic.w	r2, r2, #16
 8002dd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d032      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d022      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2205      	movs	r2, #5
 8002e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	3301      	adds	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d307      	bcc.n	8002e40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f2      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x2cc>
 8002e3e:	e000      	b.n	8002e42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
 8002e62:	e000      	b.n	8002e66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e64:	bf00      	nop
    }
  }
}
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b40      	cmp	r3, #64	@ 0x40
 8002e98:	d108      	bne.n	8002eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eaa:	e007      	b.n	8002ebc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	3b10      	subs	r3, #16
 8002ed8:	4a14      	ldr	r2, [pc, #80]	@ (8002f2c <DMA_CalcBaseAndBitshift+0x64>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ee2:	4a13      	ldr	r2, [pc, #76]	@ (8002f30 <DMA_CalcBaseAndBitshift+0x68>)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d909      	bls.n	8002f0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002efe:	f023 0303 	bic.w	r3, r3, #3
 8002f02:	1d1a      	adds	r2, r3, #4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f08:	e007      	b.n	8002f1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f12:	f023 0303 	bic.w	r3, r3, #3
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	aaaaaaab 	.word	0xaaaaaaab
 8002f30:	0800b61c 	.word	0x0800b61c

08002f34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11f      	bne.n	8002f8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d856      	bhi.n	8003002 <DMA_CheckFifoParam+0xce>
 8002f54:	a201      	add	r2, pc, #4	@ (adr r2, 8002f5c <DMA_CheckFifoParam+0x28>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002f6d 	.word	0x08002f6d
 8002f60:	08002f7f 	.word	0x08002f7f
 8002f64:	08002f6d 	.word	0x08002f6d
 8002f68:	08003003 	.word	0x08003003
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d046      	beq.n	8003006 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f7c:	e043      	b.n	8003006 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f86:	d140      	bne.n	800300a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f8c:	e03d      	b.n	800300a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f96:	d121      	bne.n	8002fdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d837      	bhi.n	800300e <DMA_CheckFifoParam+0xda>
 8002f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <DMA_CheckFifoParam+0x70>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fb5 	.word	0x08002fb5
 8002fa8:	08002fbb 	.word	0x08002fbb
 8002fac:	08002fb5 	.word	0x08002fb5
 8002fb0:	08002fcd 	.word	0x08002fcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	e030      	b.n	800301c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d025      	beq.n	8003012 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fca:	e022      	b.n	8003012 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fd4:	d11f      	bne.n	8003016 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fda:	e01c      	b.n	8003016 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d903      	bls.n	8002fea <DMA_CheckFifoParam+0xb6>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d003      	beq.n	8002ff0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fe8:	e018      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
      break;
 8002fee:	e015      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00e      	beq.n	800301a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8003000:	e00b      	b.n	800301a <DMA_CheckFifoParam+0xe6>
      break;
 8003002:	bf00      	nop
 8003004:	e00a      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
 8003008:	e008      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e006      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 800300e:	bf00      	nop
 8003010:	e004      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
 8003014:	e002      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;   
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <DMA_CheckFifoParam+0xe8>
      break;
 800301a:	bf00      	nop
    }
  } 
  
  return status; 
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	@ 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e16b      	b.n	8003320 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	f040 815a 	bne.w	800331a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d005      	beq.n	800307e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307a:	2b02      	cmp	r3, #2
 800307c:	d130      	bne.n	80030e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0201 	and.w	r2, r3, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d017      	beq.n	800311c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d123      	bne.n	8003170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	08da      	lsrs	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3208      	adds	r2, #8
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80b4 	beq.w	800331a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	4b60      	ldr	r3, [pc, #384]	@ (8003338 <HAL_GPIO_Init+0x30c>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003338 <HAL_GPIO_Init+0x30c>)
 80031bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003338 <HAL_GPIO_Init+0x30c>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ce:	4a5b      	ldr	r2, [pc, #364]	@ (800333c <HAL_GPIO_Init+0x310>)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	3302      	adds	r3, #2
 80031d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	220f      	movs	r2, #15
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	4013      	ands	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a52      	ldr	r2, [pc, #328]	@ (8003340 <HAL_GPIO_Init+0x314>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02b      	beq.n	8003252 <HAL_GPIO_Init+0x226>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a51      	ldr	r2, [pc, #324]	@ (8003344 <HAL_GPIO_Init+0x318>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d025      	beq.n	800324e <HAL_GPIO_Init+0x222>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a50      	ldr	r2, [pc, #320]	@ (8003348 <HAL_GPIO_Init+0x31c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d01f      	beq.n	800324a <HAL_GPIO_Init+0x21e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4f      	ldr	r2, [pc, #316]	@ (800334c <HAL_GPIO_Init+0x320>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d019      	beq.n	8003246 <HAL_GPIO_Init+0x21a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4e      	ldr	r2, [pc, #312]	@ (8003350 <HAL_GPIO_Init+0x324>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0x216>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4d      	ldr	r2, [pc, #308]	@ (8003354 <HAL_GPIO_Init+0x328>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d00d      	beq.n	800323e <HAL_GPIO_Init+0x212>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4c      	ldr	r2, [pc, #304]	@ (8003358 <HAL_GPIO_Init+0x32c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x20e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4b      	ldr	r2, [pc, #300]	@ (800335c <HAL_GPIO_Init+0x330>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d101      	bne.n	8003236 <HAL_GPIO_Init+0x20a>
 8003232:	2307      	movs	r3, #7
 8003234:	e00e      	b.n	8003254 <HAL_GPIO_Init+0x228>
 8003236:	2308      	movs	r3, #8
 8003238:	e00c      	b.n	8003254 <HAL_GPIO_Init+0x228>
 800323a:	2306      	movs	r3, #6
 800323c:	e00a      	b.n	8003254 <HAL_GPIO_Init+0x228>
 800323e:	2305      	movs	r3, #5
 8003240:	e008      	b.n	8003254 <HAL_GPIO_Init+0x228>
 8003242:	2304      	movs	r3, #4
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x228>
 8003246:	2303      	movs	r3, #3
 8003248:	e004      	b.n	8003254 <HAL_GPIO_Init+0x228>
 800324a:	2302      	movs	r3, #2
 800324c:	e002      	b.n	8003254 <HAL_GPIO_Init+0x228>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_GPIO_Init+0x228>
 8003252:	2300      	movs	r3, #0
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	f002 0203 	and.w	r2, r2, #3
 800325a:	0092      	lsls	r2, r2, #2
 800325c:	4093      	lsls	r3, r2
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003264:	4935      	ldr	r1, [pc, #212]	@ (800333c <HAL_GPIO_Init+0x310>)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003272:	4b3b      	ldr	r3, [pc, #236]	@ (8003360 <HAL_GPIO_Init+0x334>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003296:	4a32      	ldr	r2, [pc, #200]	@ (8003360 <HAL_GPIO_Init+0x334>)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800329c:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <HAL_GPIO_Init+0x334>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c0:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <HAL_GPIO_Init+0x334>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c6:	4b26      	ldr	r3, [pc, #152]	@ (8003360 <HAL_GPIO_Init+0x334>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003360 <HAL_GPIO_Init+0x334>)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <HAL_GPIO_Init+0x334>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003314:	4a12      	ldr	r2, [pc, #72]	@ (8003360 <HAL_GPIO_Init+0x334>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3301      	adds	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	f67f ae90 	bls.w	8003048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3724      	adds	r7, #36	@ 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	40013800 	.word	0x40013800
 8003340:	40020000 	.word	0x40020000
 8003344:	40020400 	.word	0x40020400
 8003348:	40020800 	.word	0x40020800
 800334c:	40020c00 	.word	0x40020c00
 8003350:	40021000 	.word	0x40021000
 8003354:	40021400 	.word	0x40021400
 8003358:	40021800 	.word	0x40021800
 800335c:	40021c00 	.word	0x40021c00
 8003360:	40013c00 	.word	0x40013c00

08003364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	807b      	strh	r3, [r7, #2]
 8003370:	4613      	mov	r3, r2
 8003372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003374:	787b      	ldrb	r3, [r7, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003380:	e003      	b.n	800338a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003382:	887b      	ldrh	r3, [r7, #2]
 8003384:	041a      	lsls	r2, r3, #16
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	619a      	str	r2, [r3, #24]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003396:	b480      	push	{r7}
 8003398:	b085      	sub	sp, #20
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	041a      	lsls	r2, r3, #16
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	400b      	ands	r3, r1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033e2:	4a05      	ldr	r2, [pc, #20]	@ (80033f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033e8:	88fb      	ldrh	r3, [r7, #6]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 f806 	bl	80033fc <HAL_GPIO_EXTI_Callback>
  }
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e267      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d075      	beq.n	800351e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003432:	4b88      	ldr	r3, [pc, #544]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b04      	cmp	r3, #4
 800343c:	d00c      	beq.n	8003458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343e:	4b85      	ldr	r3, [pc, #532]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003446:	2b08      	cmp	r3, #8
 8003448:	d112      	bne.n	8003470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344a:	4b82      	ldr	r3, [pc, #520]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003456:	d10b      	bne.n	8003470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003458:	4b7e      	ldr	r3, [pc, #504]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05b      	beq.n	800351c <HAL_RCC_OscConfig+0x108>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d157      	bne.n	800351c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e242      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003478:	d106      	bne.n	8003488 <HAL_RCC_OscConfig+0x74>
 800347a:	4b76      	ldr	r3, [pc, #472]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a75      	ldr	r2, [pc, #468]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e01d      	b.n	80034c4 <HAL_RCC_OscConfig+0xb0>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x98>
 8003492:	4b70      	ldr	r3, [pc, #448]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6f      	ldr	r2, [pc, #444]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	4b6d      	ldr	r3, [pc, #436]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e00b      	b.n	80034c4 <HAL_RCC_OscConfig+0xb0>
 80034ac:	4b69      	ldr	r3, [pc, #420]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a68      	ldr	r2, [pc, #416]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80034b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b66      	ldr	r3, [pc, #408]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a65      	ldr	r2, [pc, #404]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80034be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fe08 	bl	80020e0 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d4:	f7fe fe04 	bl	80020e0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e207      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0xc0>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fdf4 	bl	80020e0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034fc:	f7fe fdf0 	bl	80020e0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b64      	cmp	r3, #100	@ 0x64
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e1f3      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350e:	4b51      	ldr	r3, [pc, #324]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0xe8>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d063      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800352a:	4b4a      	ldr	r3, [pc, #296]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003536:	4b47      	ldr	r3, [pc, #284]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800353e:	2b08      	cmp	r3, #8
 8003540:	d11c      	bne.n	800357c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003542:	4b44      	ldr	r3, [pc, #272]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d116      	bne.n	800357c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	4b41      	ldr	r3, [pc, #260]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_RCC_OscConfig+0x152>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d001      	beq.n	8003566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e1c7      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003566:	4b3b      	ldr	r3, [pc, #236]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4937      	ldr	r1, [pc, #220]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357a:	e03a      	b.n	80035f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d020      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003584:	4b34      	ldr	r3, [pc, #208]	@ (8003658 <HAL_RCC_OscConfig+0x244>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fda9 	bl	80020e0 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003592:	f7fe fda5 	bl	80020e0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e1a8      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b28      	ldr	r3, [pc, #160]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	4925      	ldr	r1, [pc, #148]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]
 80035c4:	e015      	b.n	80035f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c6:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <HAL_RCC_OscConfig+0x244>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe fd88 	bl	80020e0 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d4:	f7fe fd84 	bl	80020e0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e187      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d036      	beq.n	800366c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d016      	beq.n	8003634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003606:	4b15      	ldr	r3, [pc, #84]	@ (800365c <HAL_RCC_OscConfig+0x248>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800360c:	f7fe fd68 	bl	80020e0 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003614:	f7fe fd64 	bl	80020e0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e167      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003626:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <HAL_RCC_OscConfig+0x240>)
 8003628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x200>
 8003632:	e01b      	b.n	800366c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003634:	4b09      	ldr	r3, [pc, #36]	@ (800365c <HAL_RCC_OscConfig+0x248>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363a:	f7fe fd51 	bl	80020e0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	e00e      	b.n	8003660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003642:	f7fe fd4d 	bl	80020e0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d907      	bls.n	8003660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e150      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
 8003654:	40023800 	.word	0x40023800
 8003658:	42470000 	.word	0x42470000
 800365c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003660:	4b88      	ldr	r3, [pc, #544]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1ea      	bne.n	8003642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8097 	beq.w	80037a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367e:	4b81      	ldr	r3, [pc, #516]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10f      	bne.n	80036aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	4b7d      	ldr	r3, [pc, #500]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a7c      	ldr	r2, [pc, #496]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b7a      	ldr	r3, [pc, #488]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036aa:	4b77      	ldr	r3, [pc, #476]	@ (8003888 <HAL_RCC_OscConfig+0x474>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d118      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b6:	4b74      	ldr	r3, [pc, #464]	@ (8003888 <HAL_RCC_OscConfig+0x474>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a73      	ldr	r2, [pc, #460]	@ (8003888 <HAL_RCC_OscConfig+0x474>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c2:	f7fe fd0d 	bl	80020e0 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ca:	f7fe fd09 	bl	80020e0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e10c      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <HAL_RCC_OscConfig+0x474>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <HAL_RCC_OscConfig+0x2ea>
 80036f0:	4b64      	ldr	r3, [pc, #400]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f4:	4a63      	ldr	r2, [pc, #396]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fc:	e01c      	b.n	8003738 <HAL_RCC_OscConfig+0x324>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b05      	cmp	r3, #5
 8003704:	d10c      	bne.n	8003720 <HAL_RCC_OscConfig+0x30c>
 8003706:	4b5f      	ldr	r3, [pc, #380]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	4a5e      	ldr	r2, [pc, #376]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6713      	str	r3, [r2, #112]	@ 0x70
 8003712:	4b5c      	ldr	r3, [pc, #368]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003716:	4a5b      	ldr	r2, [pc, #364]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	@ 0x70
 800371e:	e00b      	b.n	8003738 <HAL_RCC_OscConfig+0x324>
 8003720:	4b58      	ldr	r3, [pc, #352]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003724:	4a57      	ldr	r2, [pc, #348]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	6713      	str	r3, [r2, #112]	@ 0x70
 800372c:	4b55      	ldr	r3, [pc, #340]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003730:	4a54      	ldr	r2, [pc, #336]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003732:	f023 0304 	bic.w	r3, r3, #4
 8003736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d015      	beq.n	800376c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7fe fcce 	bl	80020e0 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fe fcca 	bl	80020e0 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0cb      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375e:	4b49      	ldr	r3, [pc, #292]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0ee      	beq.n	8003748 <HAL_RCC_OscConfig+0x334>
 800376a:	e014      	b.n	8003796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376c:	f7fe fcb8 	bl	80020e0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003772:	e00a      	b.n	800378a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003774:	f7fe fcb4 	bl	80020e0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e0b5      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378a:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ee      	bne.n	8003774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003796:	7dfb      	ldrb	r3, [r7, #23]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d105      	bne.n	80037a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379c:	4b39      	ldr	r3, [pc, #228]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	4a38      	ldr	r2, [pc, #224]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80a1 	beq.w	80038f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037b2:	4b34      	ldr	r3, [pc, #208]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d05c      	beq.n	8003878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d141      	bne.n	800384a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b31      	ldr	r3, [pc, #196]	@ (800388c <HAL_RCC_OscConfig+0x478>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fe fc88 	bl	80020e0 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fe fc84 	bl	80020e0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e087      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	4b27      	ldr	r3, [pc, #156]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	019b      	lsls	r3, r3, #6
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	3b01      	subs	r3, #1
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	491b      	ldr	r1, [pc, #108]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800381c:	4b1b      	ldr	r3, [pc, #108]	@ (800388c <HAL_RCC_OscConfig+0x478>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe fc5d 	bl	80020e0 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382a:	f7fe fc59 	bl	80020e0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e05c      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383c:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x416>
 8003848:	e054      	b.n	80038f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <HAL_RCC_OscConfig+0x478>)
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fe fc46 	bl	80020e0 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe fc42 	bl	80020e0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e045      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <HAL_RCC_OscConfig+0x470>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x444>
 8003876:	e03d      	b.n	80038f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e038      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
 8003884:	40023800 	.word	0x40023800
 8003888:	40007000 	.word	0x40007000
 800388c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003890:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <HAL_RCC_OscConfig+0x4ec>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d028      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d121      	bne.n	80038f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11a      	bne.n	80038f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d111      	bne.n	80038f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	3b01      	subs	r3, #1
 80038da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0cc      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b68      	ldr	r3, [pc, #416]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d90c      	bls.n	8003940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b65      	ldr	r3, [pc, #404]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b63      	ldr	r3, [pc, #396]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0b8      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003958:	4b59      	ldr	r3, [pc, #356]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a58      	ldr	r2, [pc, #352]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003970:	4b53      	ldr	r3, [pc, #332]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a52      	ldr	r2, [pc, #328]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800397a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b50      	ldr	r3, [pc, #320]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	494d      	ldr	r1, [pc, #308]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d044      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b47      	ldr	r3, [pc, #284]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d119      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e07f      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d003      	beq.n	80039c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e06f      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e067      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e2:	4b37      	ldr	r3, [pc, #220]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 0203 	bic.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4934      	ldr	r1, [pc, #208]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f4:	f7fe fb74 	bl	80020e0 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fc:	f7fe fb70 	bl	80020e0 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e04f      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 020c 	and.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1eb      	bne.n	80039fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d20c      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b22      	ldr	r3, [pc, #136]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e032      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4916      	ldr	r1, [pc, #88]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	490e      	ldr	r1, [pc, #56]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a8a:	f000 f821 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	490a      	ldr	r1, [pc, #40]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
 8003a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa2:	4a09      	ldr	r2, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fad4 	bl	8002058 <HAL_InitTick>

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023c00 	.word	0x40023c00
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	0800b604 	.word	0x0800b604
 8003ac8:	2000000c 	.word	0x2000000c
 8003acc:	20000010 	.word	0x20000010

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad4:	b094      	sub	sp, #80	@ 0x50
 8003ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae8:	4b79      	ldr	r3, [pc, #484]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d00d      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0x40>
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	f200 80e1 	bhi.w	8003cbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0x34>
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b02:	e0db      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b04:	4b73      	ldr	r3, [pc, #460]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b08:	e0db      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b0a:	4b73      	ldr	r3, [pc, #460]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b0e:	e0d8      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b10:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d063      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b26:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	099b      	lsrs	r3, r3, #6
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b42:	4622      	mov	r2, r4
 8003b44:	462b      	mov	r3, r5
 8003b46:	f04f 0000 	mov.w	r0, #0
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	0159      	lsls	r1, r3, #5
 8003b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b54:	0150      	lsls	r0, r2, #5
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	1a51      	subs	r1, r2, r1
 8003b5e:	6139      	str	r1, [r7, #16]
 8003b60:	4629      	mov	r1, r5
 8003b62:	eb63 0301 	sbc.w	r3, r3, r1
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b74:	4659      	mov	r1, fp
 8003b76:	018b      	lsls	r3, r1, #6
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7e:	4651      	mov	r1, sl
 8003b80:	018a      	lsls	r2, r1, #6
 8003b82:	4651      	mov	r1, sl
 8003b84:	ebb2 0801 	subs.w	r8, r2, r1
 8003b88:	4659      	mov	r1, fp
 8003b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ba2:	4690      	mov	r8, r2
 8003ba4:	4699      	mov	r9, r3
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	eb18 0303 	adds.w	r3, r8, r3
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	462b      	mov	r3, r5
 8003bb0:	eb49 0303 	adc.w	r3, r9, r3
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	024b      	lsls	r3, r1, #9
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bcc:	4621      	mov	r1, r4
 8003bce:	024a      	lsls	r2, r1, #9
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003be0:	f7fc ffe2 	bl	8000ba8 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bec:	e058      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bee:	4b38      	ldr	r3, [pc, #224]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	099b      	lsrs	r3, r3, #6
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bfe:	623b      	str	r3, [r7, #32]
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	f04f 0000 	mov.w	r0, #0
 8003c10:	f04f 0100 	mov.w	r1, #0
 8003c14:	0159      	lsls	r1, r3, #5
 8003c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c1a:	0150      	lsls	r0, r2, #5
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4641      	mov	r1, r8
 8003c22:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c26:	4649      	mov	r1, r9
 8003c28:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c40:	ebb2 040a 	subs.w	r4, r2, sl
 8003c44:	eb63 050b 	sbc.w	r5, r3, fp
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	00eb      	lsls	r3, r5, #3
 8003c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c56:	00e2      	lsls	r2, r4, #3
 8003c58:	4614      	mov	r4, r2
 8003c5a:	461d      	mov	r5, r3
 8003c5c:	4643      	mov	r3, r8
 8003c5e:	18e3      	adds	r3, r4, r3
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	464b      	mov	r3, r9
 8003c64:	eb45 0303 	adc.w	r3, r5, r3
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c76:	4629      	mov	r1, r5
 8003c78:	028b      	lsls	r3, r1, #10
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c80:	4621      	mov	r1, r4
 8003c82:	028a      	lsls	r2, r1, #10
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	61fa      	str	r2, [r7, #28]
 8003c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c94:	f7fc ff88 	bl	8000ba8 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	3301      	adds	r3, #1
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cba:	e002      	b.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3750      	adds	r7, #80	@ 0x50
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00f42400 	.word	0x00f42400
 8003cd8:	007a1200 	.word	0x007a1200

08003cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	@ (8003cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cf8:	f7ff fff0 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	0a9b      	lsrs	r3, r3, #10
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	4903      	ldr	r1, [pc, #12]	@ (8003d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0a:	5ccb      	ldrb	r3, [r1, r3]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	0800b614 	.word	0x0800b614

08003d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d20:	f7ff ffdc 	bl	8003cdc <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b05      	ldr	r3, [pc, #20]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	0b5b      	lsrs	r3, r3, #13
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4903      	ldr	r1, [pc, #12]	@ (8003d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	0800b614 	.word	0x0800b614

08003d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07b      	b.n	8003e4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d66:	d009      	beq.n	8003d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
 8003d6e:	e005      	b.n	8003d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd fbb0 	bl	80014fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e00:	ea42 0103 	orr.w	r1, r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0104 	and.w	r1, r3, #4
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	f003 0210 	and.w	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e66:	f7fe f93b 	bl	80020e0 <HAL_GetTick>
 8003e6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003e6c:	88fb      	ldrh	r3, [r7, #6]
 8003e6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e12a      	b.n	80040d6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_Transmit+0x36>
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e122      	b.n	80040d6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d101      	bne.n	8003e9e <HAL_SPI_Transmit+0x48>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e11b      	b.n	80040d6 <HAL_SPI_Transmit+0x280>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eec:	d10f      	bne.n	8003f0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003efc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b40      	cmp	r3, #64	@ 0x40
 8003f1a:	d007      	beq.n	8003f2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f34:	d152      	bne.n	8003fdc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_SPI_Transmit+0xee>
 8003f3e:	8b7b      	ldrh	r3, [r7, #26]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d145      	bne.n	8003fd0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f48:	881a      	ldrh	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f68:	e032      	b.n	8003fd0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d112      	bne.n	8003f9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f9c:	e018      	b.n	8003fd0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f9e:	f7fe f89f 	bl	80020e0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d803      	bhi.n	8003fb6 <HAL_SPI_Transmit+0x160>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb4:	d102      	bne.n	8003fbc <HAL_SPI_Transmit+0x166>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e082      	b.n	80040d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1c7      	bne.n	8003f6a <HAL_SPI_Transmit+0x114>
 8003fda:	e053      	b.n	8004084 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <HAL_SPI_Transmit+0x194>
 8003fe4:	8b7b      	ldrh	r3, [r7, #26]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d147      	bne.n	800407a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004010:	e033      	b.n	800407a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d113      	bne.n	8004048 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004046:	e018      	b.n	800407a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004048:	f7fe f84a 	bl	80020e0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d803      	bhi.n	8004060 <HAL_SPI_Transmit+0x20a>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405e:	d102      	bne.n	8004066 <HAL_SPI_Transmit+0x210>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e02d      	b.n	80040d6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1c6      	bne.n	8004012 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	6839      	ldr	r1, [r7, #0]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fa03 	bl	8004494 <SPI_EndRxTxTransaction>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
  }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d001      	beq.n	80040fe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
 80040fc:	e097      	b.n	800422e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_SPI_Transmit_DMA+0x2a>
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e08f      	b.n	800422e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_SPI_Transmit_DMA+0x3c>
 8004118:	2302      	movs	r3, #2
 800411a:	e088      	b.n	800422e <HAL_SPI_Transmit_DMA+0x14e>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2203      	movs	r2, #3
 8004128:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416a:	d10f      	bne.n	800418c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800417a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800418a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004190:	4a29      	ldr	r2, [pc, #164]	@ (8004238 <HAL_SPI_Transmit_DMA+0x158>)
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004198:	4a28      	ldr	r2, [pc, #160]	@ (800423c <HAL_SPI_Transmit_DMA+0x15c>)
 800419a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a0:	4a27      	ldr	r2, [pc, #156]	@ (8004240 <HAL_SPI_Transmit_DMA+0x160>)
 80041a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a8:	2200      	movs	r2, #0
 80041aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b4:	4619      	mov	r1, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80041c4:	f7fe fbde 	bl	8002984 <HAL_DMA_Start_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d2:	f043 0210 	orr.w	r2, r3, #16
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e023      	b.n	800422e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b40      	cmp	r3, #64	@ 0x40
 80041f2:	d007      	beq.n	8004204 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004202:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0220 	orr.w	r2, r2, #32
 800421a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0202 	orr.w	r2, r2, #2
 800422a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	08004329 	.word	0x08004329
 800423c:	08004281 	.word	0x08004281
 8004240:	08004345 	.word	0x08004345

08004244 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800428e:	f7fd ff27 	bl	80020e0 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a2:	d03b      	beq.n	800431c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0220 	bic.w	r2, r2, #32
 80042b2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0202 	bic.w	r2, r2, #2
 80042c2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	2164      	movs	r1, #100	@ 0x64
 80042c8:	6978      	ldr	r0, [r7, #20]
 80042ca:	f000 f8e3 	bl	8004494 <SPI_EndRxTxTransaction>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d8:	f043 0220 	orr.w	r2, r3, #32
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042e8:	2300      	movs	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff ffa9 	bl	800426c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800431a:	e002      	b.n	8004322 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800431c:	6978      	ldr	r0, [r7, #20]
 800431e:	f7ff ff91 	bl	8004244 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004334:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ff8e 	bl	8004258 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800433c:	bf00      	nop
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0203 	bic.w	r2, r2, #3
 8004360:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004366:	f043 0210 	orr.w	r2, r3, #16
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff ff78 	bl	800426c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004394:	f7fd fea4 	bl	80020e0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4413      	add	r3, r2
 80043a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043a4:	f7fd fe9c 	bl	80020e0 <HAL_GetTick>
 80043a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043aa:	4b39      	ldr	r3, [pc, #228]	@ (8004490 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	015b      	lsls	r3, r3, #5
 80043b0:	0d1b      	lsrs	r3, r3, #20
 80043b2:	69fa      	ldr	r2, [r7, #28]
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ba:	e054      	b.n	8004466 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d050      	beq.n	8004466 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043c4:	f7fd fe8c 	bl	80020e0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d902      	bls.n	80043da <SPI_WaitFlagStateUntilTimeout+0x56>
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d13d      	bne.n	8004456 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043f2:	d111      	bne.n	8004418 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fc:	d004      	beq.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004406:	d107      	bne.n	8004418 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004420:	d10f      	bne.n	8004442 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e017      	b.n	8004486 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	3b01      	subs	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4013      	ands	r3, r2
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	bf0c      	ite	eq
 8004476:	2301      	moveq	r3, #1
 8004478:	2300      	movne	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	429a      	cmp	r2, r3
 8004482:	d19b      	bne.n	80043bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3720      	adds	r7, #32
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c

08004494 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2201      	movs	r2, #1
 80044a8:	2102      	movs	r1, #2
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff ff6a 	bl	8004384 <SPI_WaitFlagStateUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e032      	b.n	800452c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <SPI_EndRxTxTransaction+0xa0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <SPI_EndRxTxTransaction+0xa4>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	0d5b      	lsrs	r3, r3, #21
 80044d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e4:	d112      	bne.n	800450c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2180      	movs	r1, #128	@ 0x80
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f7ff ff47 	bl	8004384 <SPI_WaitFlagStateUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d016      	beq.n	800452a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	f043 0220 	orr.w	r2, r3, #32
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00f      	b.n	800452c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	3b01      	subs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d0f2      	beq.n	800450c <SPI_EndRxTxTransaction+0x78>
 8004526:	e000      	b.n	800452a <SPI_EndRxTxTransaction+0x96>
        break;
 8004528:	bf00      	nop
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	2000000c 	.word	0x2000000c
 8004538:	165e9f81 	.word	0x165e9f81

0800453c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e042      	b.n	80045d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fd fcdc 	bl	8001f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	@ 0x24
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800457e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fcdb 	bl	8004f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b20      	cmp	r3, #32
 80045f4:	d112      	bne.n	800461c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <HAL_UART_Receive_IT+0x26>
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e00b      	b.n	800461e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	461a      	mov	r2, r3
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 faba 	bl	8004b8c <UART_Start_Receive_IT>
 8004618:	4603      	mov	r3, r0
 800461a:	e000      	b.n	800461e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b0ba      	sub	sp, #232	@ 0xe8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <HAL_UART_IRQHandler+0x66>
 800467a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fb99 	bl	8004dbe <UART_Receive_IT>
      return;
 800468c:	e25b      	b.n	8004b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800468e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80de 	beq.w	8004854 <HAL_UART_IRQHandler+0x22c>
 8004698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80d1 	beq.w	8004854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_UART_IRQHandler+0xae>
 80046be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	f043 0201 	orr.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <HAL_UART_IRQHandler+0xd2>
 80046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	f043 0202 	orr.w	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_UART_IRQHandler+0xf6>
 8004706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d011      	beq.n	800474e <HAL_UART_IRQHandler+0x126>
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b00      	cmp	r3, #0
 8004734:	d105      	bne.n	8004742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004746:	f043 0208 	orr.w	r2, r3, #8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 81f2 	beq.w	8004b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d008      	beq.n	8004776 <HAL_UART_IRQHandler+0x14e>
 8004764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fb24 	bl	8004dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004780:	2b40      	cmp	r3, #64	@ 0x40
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <HAL_UART_IRQHandler+0x17a>
 800479a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d04f      	beq.n	8004842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa2c 	bl	8004c00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b2:	2b40      	cmp	r3, #64	@ 0x40
 80047b4:	d141      	bne.n	800483a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3314      	adds	r3, #20
 80047de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1d9      	bne.n	80047b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d013      	beq.n	8004832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a08 <HAL_UART_IRQHandler+0x3e0>)
 8004810:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe f97c 	bl	8002b14 <HAL_DMA_Abort_IT>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d016      	beq.n	8004850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800482c:	4610      	mov	r0, r2
 800482e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	e00e      	b.n	8004850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f994 	bl	8004b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	e00a      	b.n	8004850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f990 	bl	8004b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e006      	b.n	8004850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f98c 	bl	8004b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800484e:	e175      	b.n	8004b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004850:	bf00      	nop
    return;
 8004852:	e173      	b.n	8004b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	2b01      	cmp	r3, #1
 800485a:	f040 814f 	bne.w	8004afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8148 	beq.w	8004afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800486c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8141 	beq.w	8004afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489a:	2b40      	cmp	r3, #64	@ 0x40
 800489c:	f040 80b6 	bne.w	8004a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8145 	beq.w	8004b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048be:	429a      	cmp	r2, r3
 80048c0:	f080 813e 	bcs.w	8004b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d6:	f000 8088 	beq.w	80049ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	330c      	adds	r3, #12
 80048e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004906:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800490a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800491e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1d9      	bne.n	80048da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3314      	adds	r3, #20
 800492c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800494a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800494e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800495c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e1      	bne.n	8004926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3314      	adds	r3, #20
 8004968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800498c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e3      	bne.n	8004962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b2:	e853 3f00 	ldrex	r3, [r3]
 80049b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ba:	f023 0310 	bic.w	r3, r3, #16
 80049be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049d4:	e841 2300 	strex	r3, r2, [r1]
 80049d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1e3      	bne.n	80049a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe f825 	bl	8002a34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4619      	mov	r1, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f8b7 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a06:	e09b      	b.n	8004b40 <HAL_UART_IRQHandler+0x518>
 8004a08:	08004cc7 	.word	0x08004cc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 808e 	beq.w	8004b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8089 	beq.w	8004b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e3      	bne.n	8004a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3314      	adds	r3, #20
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	623b      	str	r3, [r7, #32]
   return(result);
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3314      	adds	r3, #20
 8004a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e3      	bne.n	8004a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0310 	bic.w	r3, r3, #16
 8004ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ad4:	61fa      	str	r2, [r7, #28]
 8004ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	69b9      	ldr	r1, [r7, #24]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e3      	bne.n	8004ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f83d 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004afa:	e023      	b.n	8004b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <HAL_UART_IRQHandler+0x4f4>
 8004b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8ea 	bl	8004cee <UART_Transmit_IT>
    return;
 8004b1a:	e014      	b.n	8004b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00e      	beq.n	8004b46 <HAL_UART_IRQHandler+0x51e>
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f92a 	bl	8004d8e <UART_EndTransmit_IT>
    return;
 8004b3a:	e004      	b.n	8004b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b3c:	bf00      	nop
 8004b3e:	e002      	b.n	8004b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b44:	bf00      	nop
  }
}
 8004b46:	37e8      	adds	r7, #232	@ 0xe8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	88fa      	ldrh	r2, [r7, #6]
 8004ba4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2222      	movs	r2, #34	@ 0x22
 8004bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0220 	orr.w	r2, r2, #32
 8004bf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b095      	sub	sp, #84	@ 0x54
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c28:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3314      	adds	r3, #20
 8004c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	e853 3f00 	ldrex	r3, [r3]
 8004c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e5      	bne.n	8004c3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d119      	bne.n	8004cac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	e853 3f00 	ldrex	r3, [r3]
 8004c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0310 	bic.w	r3, r3, #16
 8004c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c98:	61ba      	str	r2, [r7, #24]
 8004c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	6979      	ldr	r1, [r7, #20]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e5      	bne.n	8004c78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cba:	bf00      	nop
 8004cbc:	3754      	adds	r7, #84	@ 0x54
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff ff3d 	bl	8004b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b21      	cmp	r3, #33	@ 0x21
 8004d00:	d13e      	bne.n	8004d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0a:	d114      	bne.n	8004d36 <UART_Transmit_IT+0x48>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d110      	bne.n	8004d36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]
 8004d34:	e008      	b.n	8004d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	1c59      	adds	r1, r3, #1
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6211      	str	r1, [r2, #32]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10f      	bne.n	8004d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fecc 	bl	8004b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b08c      	sub	sp, #48	@ 0x30
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b22      	cmp	r3, #34	@ 0x22
 8004dd0:	f040 80ae 	bne.w	8004f30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ddc:	d117      	bne.n	8004e0e <UART_Receive_IT+0x50>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d113      	bne.n	8004e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e0c:	e026      	b.n	8004e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e20:	d007      	beq.n	8004e32 <UART_Receive_IT+0x74>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <UART_Receive_IT+0x82>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e008      	b.n	8004e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d15d      	bne.n	8004f2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0220 	bic.w	r2, r2, #32
 8004e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d135      	bne.n	8004f22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f023 0310 	bic.w	r3, r3, #16
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004edc:	623a      	str	r2, [r7, #32]
 8004ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	6a3a      	ldr	r2, [r7, #32]
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d10a      	bne.n	8004f14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fe2a 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
 8004f20:	e002      	b.n	8004f28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc f8ee 	bl	8001104 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e002      	b.n	8004f32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3730      	adds	r7, #48	@ 0x30
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b0c0      	sub	sp, #256	@ 0x100
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	ea40 0301 	orr.w	r3, r0, r1
 8004f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f94:	f021 010c 	bic.w	r1, r1, #12
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	6999      	ldr	r1, [r3, #24]
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	ea40 0301 	orr.w	r3, r0, r1
 8004fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b8f      	ldr	r3, [pc, #572]	@ (8005208 <UART_SetConfig+0x2cc>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d005      	beq.n	8004fdc <UART_SetConfig+0xa0>
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800520c <UART_SetConfig+0x2d0>)
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d104      	bne.n	8004fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fe9e 	bl	8003d1c <HAL_RCC_GetPCLK2Freq>
 8004fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fe4:	e003      	b.n	8004fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fe fe85 	bl	8003cf4 <HAL_RCC_GetPCLK1Freq>
 8004fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff8:	f040 810c 	bne.w	8005214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800500a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800500e:	4622      	mov	r2, r4
 8005010:	462b      	mov	r3, r5
 8005012:	1891      	adds	r1, r2, r2
 8005014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005016:	415b      	adcs	r3, r3
 8005018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800501a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800501e:	4621      	mov	r1, r4
 8005020:	eb12 0801 	adds.w	r8, r2, r1
 8005024:	4629      	mov	r1, r5
 8005026:	eb43 0901 	adc.w	r9, r3, r1
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503e:	4690      	mov	r8, r2
 8005040:	4699      	mov	r9, r3
 8005042:	4623      	mov	r3, r4
 8005044:	eb18 0303 	adds.w	r3, r8, r3
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800504c:	462b      	mov	r3, r5
 800504e:	eb49 0303 	adc.w	r3, r9, r3
 8005052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800506a:	460b      	mov	r3, r1
 800506c:	18db      	adds	r3, r3, r3
 800506e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005070:	4613      	mov	r3, r2
 8005072:	eb42 0303 	adc.w	r3, r2, r3
 8005076:	657b      	str	r3, [r7, #84]	@ 0x54
 8005078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800507c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005080:	f7fb fd92 	bl	8000ba8 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b61      	ldr	r3, [pc, #388]	@ (8005210 <UART_SetConfig+0x2d4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011c      	lsls	r4, r3, #4
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800509c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050ac:	415b      	adcs	r3, r3
 80050ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050b4:	4641      	mov	r1, r8
 80050b6:	eb12 0a01 	adds.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb43 0b01 	adc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d4:	4692      	mov	sl, r2
 80050d6:	469b      	mov	fp, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	eb1a 0303 	adds.w	r3, sl, r3
 80050de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050e2:	464b      	mov	r3, r9
 80050e4:	eb4b 0303 	adc.w	r3, fp, r3
 80050e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005100:	460b      	mov	r3, r1
 8005102:	18db      	adds	r3, r3, r3
 8005104:	643b      	str	r3, [r7, #64]	@ 0x40
 8005106:	4613      	mov	r3, r2
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	647b      	str	r3, [r7, #68]	@ 0x44
 800510e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005116:	f7fb fd47 	bl	8000ba8 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4611      	mov	r1, r2
 8005120:	4b3b      	ldr	r3, [pc, #236]	@ (8005210 <UART_SetConfig+0x2d4>)
 8005122:	fba3 2301 	umull	r2, r3, r3, r1
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	2264      	movs	r2, #100	@ 0x64
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	1acb      	subs	r3, r1, r3
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005136:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <UART_SetConfig+0x2d4>)
 8005138:	fba3 2302 	umull	r2, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005144:	441c      	add	r4, r3
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005160:	415b      	adcs	r3, r3
 8005162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005168:	4641      	mov	r1, r8
 800516a:	1851      	adds	r1, r2, r1
 800516c:	6339      	str	r1, [r7, #48]	@ 0x30
 800516e:	4649      	mov	r1, r9
 8005170:	414b      	adcs	r3, r1
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005180:	4659      	mov	r1, fp
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4651      	mov	r1, sl
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4642      	mov	r2, r8
 8005196:	189b      	adds	r3, r3, r2
 8005198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800519c:	464b      	mov	r3, r9
 800519e:	460a      	mov	r2, r1
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051bc:	460b      	mov	r3, r1
 80051be:	18db      	adds	r3, r3, r3
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c2:	4613      	mov	r3, r2
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051d2:	f7fb fce9 	bl	8000ba8 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <UART_SetConfig+0x2d4>)
 80051dc:	fba3 1302 	umull	r1, r3, r3, r2
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	2164      	movs	r1, #100	@ 0x64
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	3332      	adds	r3, #50	@ 0x32
 80051ee:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <UART_SetConfig+0x2d4>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f003 0207 	and.w	r2, r3, #7
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4422      	add	r2, r4
 8005202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005204:	e106      	b.n	8005414 <UART_SetConfig+0x4d8>
 8005206:	bf00      	nop
 8005208:	40011000 	.word	0x40011000
 800520c:	40011400 	.word	0x40011400
 8005210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005218:	2200      	movs	r2, #0
 800521a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800521e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005226:	4642      	mov	r2, r8
 8005228:	464b      	mov	r3, r9
 800522a:	1891      	adds	r1, r2, r2
 800522c:	6239      	str	r1, [r7, #32]
 800522e:	415b      	adcs	r3, r3
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
 8005232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005236:	4641      	mov	r1, r8
 8005238:	1854      	adds	r4, r2, r1
 800523a:	4649      	mov	r1, r9
 800523c:	eb43 0501 	adc.w	r5, r3, r1
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	00eb      	lsls	r3, r5, #3
 800524a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800524e:	00e2      	lsls	r2, r4, #3
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	4643      	mov	r3, r8
 8005256:	18e3      	adds	r3, r4, r3
 8005258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800525c:	464b      	mov	r3, r9
 800525e:	eb45 0303 	adc.w	r3, r5, r3
 8005262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005282:	4629      	mov	r1, r5
 8005284:	008b      	lsls	r3, r1, #2
 8005286:	4621      	mov	r1, r4
 8005288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528c:	4621      	mov	r1, r4
 800528e:	008a      	lsls	r2, r1, #2
 8005290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005294:	f7fb fc88 	bl	8000ba8 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b60      	ldr	r3, [pc, #384]	@ (8005420 <UART_SetConfig+0x4e4>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011c      	lsls	r4, r3, #4
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	61b9      	str	r1, [r7, #24]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	6139      	str	r1, [r7, #16]
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052fc:	464b      	mov	r3, r9
 80052fe:	460a      	mov	r2, r1
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005320:	4649      	mov	r1, r9
 8005322:	008b      	lsls	r3, r1, #2
 8005324:	4641      	mov	r1, r8
 8005326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532a:	4641      	mov	r1, r8
 800532c:	008a      	lsls	r2, r1, #2
 800532e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005332:	f7fb fc39 	bl	8000ba8 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4611      	mov	r1, r2
 800533c:	4b38      	ldr	r3, [pc, #224]	@ (8005420 <UART_SetConfig+0x4e4>)
 800533e:	fba3 2301 	umull	r2, r3, r3, r1
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2264      	movs	r2, #100	@ 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	@ 0x32
 8005350:	4a33      	ldr	r2, [pc, #204]	@ (8005420 <UART_SetConfig+0x4e4>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800535c:	441c      	add	r4, r3
 800535e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005362:	2200      	movs	r2, #0
 8005364:	673b      	str	r3, [r7, #112]	@ 0x70
 8005366:	677a      	str	r2, [r7, #116]	@ 0x74
 8005368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	415b      	adcs	r3, r3
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6039      	str	r1, [r7, #0]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053ae:	464b      	mov	r3, r9
 80053b0:	460a      	mov	r2, r1
 80053b2:	eb42 0303 	adc.w	r3, r2, r3
 80053b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053d0:	4649      	mov	r1, r9
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	4641      	mov	r1, r8
 80053d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053da:	4641      	mov	r1, r8
 80053dc:	008a      	lsls	r2, r1, #2
 80053de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053e2:	f7fb fbe1 	bl	8000ba8 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <UART_SetConfig+0x4e4>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	@ 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	@ 0x32
 80053fe:	4a08      	ldr	r2, [pc, #32]	@ (8005420 <UART_SetConfig+0x4e4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4422      	add	r2, r4
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800541a:	46bd      	mov	sp, r7
 800541c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005420:	51eb851f 	.word	0x51eb851f

08005424 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005436:	2b84      	cmp	r3, #132	@ 0x84
 8005438:	d005      	beq.n	8005446 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800543a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4413      	add	r3, r2
 8005442:	3303      	adds	r3, #3
 8005444:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005446:	68fb      	ldr	r3, [r7, #12]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005458:	f000 fec8 	bl	80061ec <vTaskStartScheduler>
  
  return osOK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	bd80      	pop	{r7, pc}

08005462 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005464:	b089      	sub	sp, #36	@ 0x24
 8005466:	af04      	add	r7, sp, #16
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d020      	beq.n	80054b6 <osThreadCreate+0x54>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01c      	beq.n	80054b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685c      	ldr	r4, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691e      	ldr	r6, [r3, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ffc8 	bl	8005424 <makeFreeRtosPriority>
 8005494:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800549e:	9202      	str	r2, [sp, #8]
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	9100      	str	r1, [sp, #0]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	4632      	mov	r2, r6
 80054a8:	4629      	mov	r1, r5
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 fcd0 	bl	8005e50 <xTaskCreateStatic>
 80054b0:	4603      	mov	r3, r0
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e01c      	b.n	80054f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685c      	ldr	r4, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054c2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff ffaa 	bl	8005424 <makeFreeRtosPriority>
 80054d0:	4602      	mov	r2, r0
 80054d2:	f107 030c 	add.w	r3, r7, #12
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	9200      	str	r2, [sp, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	4632      	mov	r2, r6
 80054de:	4629      	mov	r1, r5
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 fd15 	bl	8005f10 <xTaskCreate>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d001      	beq.n	80054f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e000      	b.n	80054f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054f0:	68fb      	ldr	r3, [r7, #12]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <osDelay+0x16>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	e000      	b.n	8005512 <osDelay+0x18>
 8005510:	2301      	movs	r3, #1
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fe34 	bl	8006180 <vTaskDelay>
  
  return osOK;
 8005518:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005522:	b590      	push	{r4, r7, lr}
 8005524:	b085      	sub	sp, #20
 8005526:	af02      	add	r7, sp, #8
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d011      	beq.n	8005558 <osMessageCreate+0x36>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2400      	movs	r4, #0
 800554e:	9400      	str	r4, [sp, #0]
 8005550:	f000 f92e 	bl	80057b0 <xQueueGenericCreateStatic>
 8005554:	4603      	mov	r3, r0
 8005556:	e008      	b.n	800556a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	4619      	mov	r1, r3
 8005564:	f000 f9a1 	bl	80058aa <xQueueGenericCreate>
 8005568:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	bd90      	pop	{r4, r7, pc}

08005572 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 0208 	add.w	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f04f 32ff 	mov.w	r2, #4294967295
 800558a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f103 0208 	add.w	r2, r3, #8
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0208 	add.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d103      	bne.n	8005634 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e00c      	b.n	800564e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3308      	adds	r3, #8
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e002      	b.n	8005642 <vListInsert+0x2e>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d2f6      	bcs.n	800563c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6892      	ldr	r2, [r2, #8]
 800569c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6852      	ldr	r2, [r2, #4]
 80056a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d103      	bne.n	80056ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	1e5a      	subs	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10b      	bne.n	8005708 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005708:	f001 fbb6 	bl	8006e78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005714:	68f9      	ldr	r1, [r7, #12]
 8005716:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	441a      	add	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	3b01      	subs	r3, #1
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	441a      	add	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	22ff      	movs	r2, #255	@ 0xff
 800574c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	22ff      	movs	r2, #255	@ 0xff
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d114      	bne.n	8005788 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01a      	beq.n	800579c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3310      	adds	r3, #16
 800576a:	4618      	mov	r0, r3
 800576c:	f000 ff88 	bl	8006680 <xTaskRemoveFromEventList>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d012      	beq.n	800579c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005776:	4b0d      	ldr	r3, [pc, #52]	@ (80057ac <xQueueGenericReset+0xd0>)
 8005778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	e009      	b.n	800579c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3310      	adds	r3, #16
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fef0 	bl	8005572 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3324      	adds	r3, #36	@ 0x24
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff feeb 	bl	8005572 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800579c:	f001 fb9e 	bl	8006edc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057a0:	2301      	movs	r3, #1
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b08e      	sub	sp, #56	@ 0x38
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	e7fd      	b.n	80057f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <xQueueGenericCreateStatic+0x56>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <xQueueGenericCreateStatic+0x5a>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <xQueueGenericCreateStatic+0x5c>
 800580a:	2300      	movs	r3, #0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	623b      	str	r3, [r7, #32]
}
 8005822:	bf00      	nop
 8005824:	bf00      	nop
 8005826:	e7fd      	b.n	8005824 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <xQueueGenericCreateStatic+0x84>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <xQueueGenericCreateStatic+0x88>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <xQueueGenericCreateStatic+0x8a>
 8005838:	2300      	movs	r3, #0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	61fb      	str	r3, [r7, #28]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005856:	2348      	movs	r3, #72	@ 0x48
 8005858:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b48      	cmp	r3, #72	@ 0x48
 800585e:	d00b      	beq.n	8005878 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	61bb      	str	r3, [r7, #24]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005878:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800587e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800588c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	4613      	mov	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 f840 	bl	8005920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3730      	adds	r7, #48	@ 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b08a      	sub	sp, #40	@ 0x28
 80058ae:	af02      	add	r7, sp, #8
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	60b9      	str	r1, [r7, #8]
 80058b4:	4613      	mov	r3, r2
 80058b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10b      	bne.n	80058d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	613b      	str	r3, [r7, #16]
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop
 80058d4:	e7fd      	b.n	80058d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	fb02 f303 	mul.w	r3, r2, r3
 80058de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3348      	adds	r3, #72	@ 0x48
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fbe9 	bl	80070bc <pvPortMalloc>
 80058ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d011      	beq.n	8005916 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	3348      	adds	r3, #72	@ 0x48
 80058fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005904:	79fa      	ldrb	r2, [r7, #7]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f805 	bl	8005920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005916:	69bb      	ldr	r3, [r7, #24]
	}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e002      	b.n	8005942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800594e:	2101      	movs	r1, #1
 8005950:	69b8      	ldr	r0, [r7, #24]
 8005952:	f7ff fec3 	bl	80056dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b090      	sub	sp, #64	@ 0x40
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <xQueueGenericSendFromISR+0x3e>
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <xQueueGenericSendFromISR+0x42>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <xQueueGenericSendFromISR+0x44>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d103      	bne.n	80059cc <xQueueGenericSendFromISR+0x6e>
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <xQueueGenericSendFromISR+0x72>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <xQueueGenericSendFromISR+0x74>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	623b      	str	r3, [r7, #32]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ee:	f001 fb23 	bl	8007038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059f2:	f3ef 8211 	mrs	r2, BASEPRI
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	61fa      	str	r2, [r7, #28]
 8005a08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a0c:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <xQueueGenericSendFromISR+0xc2>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d12f      	bne.n	8005a80 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a36:	f000 f913 	bl	8005c60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d112      	bne.n	8005a6a <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d016      	beq.n	8005a7a <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	3324      	adds	r3, #36	@ 0x24
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fe15 	bl	8006680 <xTaskRemoveFromEventList>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00e      	beq.n	8005a7a <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e007      	b.n	8005a7a <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a6a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a6e:	3301      	adds	r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	b25a      	sxtb	r2, r3
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005a7e:	e001      	b.n	8005a84 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3740      	adds	r7, #64	@ 0x40
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08c      	sub	sp, #48	@ 0x30
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10b      	bne.n	8005ace <xQueueReceive+0x32>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	623b      	str	r3, [r7, #32]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d103      	bne.n	8005adc <xQueueReceive+0x40>
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <xQueueReceive+0x44>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <xQueueReceive+0x46>
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <xQueueReceive+0x62>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61fb      	str	r3, [r7, #28]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005afe:	f000 ff7f 	bl	8006a00 <xTaskGetSchedulerState>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <xQueueReceive+0x72>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <xQueueReceive+0x76>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <xQueueReceive+0x78>
 8005b12:	2300      	movs	r3, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10b      	bne.n	8005b30 <xQueueReceive+0x94>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	61bb      	str	r3, [r7, #24]
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	e7fd      	b.n	8005b2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b30:	f001 f9a2 	bl	8006e78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01f      	beq.n	8005b80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b44:	f000 f8f6 	bl	8005d34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	1e5a      	subs	r2, r3, #1
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00f      	beq.n	8005b78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	3310      	adds	r3, #16
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fd8f 	bl	8006680 <xTaskRemoveFromEventList>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b68:	4b3c      	ldr	r3, [pc, #240]	@ (8005c5c <xQueueReceive+0x1c0>)
 8005b6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b78:	f001 f9b0 	bl	8006edc <vPortExitCritical>
				return pdPASS;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e069      	b.n	8005c54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d103      	bne.n	8005b8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b86:	f001 f9a9 	bl	8006edc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e062      	b.n	8005c54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b94:	f107 0310 	add.w	r3, r7, #16
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fdd5 	bl	8006748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba2:	f001 f99b 	bl	8006edc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ba6:	f000 fb83 	bl	80062b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005baa:	f001 f965 	bl	8006e78 <vPortEnterCritical>
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bb4:	b25b      	sxtb	r3, r3
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d103      	bne.n	8005bc4 <xQueueReceive+0x128>
 8005bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bca:	b25b      	sxtb	r3, r3
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d103      	bne.n	8005bda <xQueueReceive+0x13e>
 8005bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bda:	f001 f97f 	bl	8006edc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bde:	1d3a      	adds	r2, r7, #4
 8005be0:	f107 0310 	add.w	r3, r7, #16
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fdc4 	bl	8006774 <xTaskCheckForTimeOut>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d123      	bne.n	8005c3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bf4:	f000 f916 	bl	8005e24 <prvIsQueueEmpty>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c00:	3324      	adds	r3, #36	@ 0x24
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fd14 	bl	8006634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c0e:	f000 f8b7 	bl	8005d80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c12:	f000 fb5b 	bl	80062cc <xTaskResumeAll>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d189      	bne.n	8005b30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c5c <xQueueReceive+0x1c0>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	e780      	b.n	8005b30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c30:	f000 f8a6 	bl	8005d80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c34:	f000 fb4a 	bl	80062cc <xTaskResumeAll>
 8005c38:	e77a      	b.n	8005b30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c3c:	f000 f8a0 	bl	8005d80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c40:	f000 fb44 	bl	80062cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c46:	f000 f8ed 	bl	8005e24 <prvIsQueueEmpty>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f43f af6f 	beq.w	8005b30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3730      	adds	r7, #48	@ 0x30
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	e000ed04 	.word	0xe000ed04

08005c60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d14d      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fed6 	bl	8006a3c <xTaskPriorityDisinherit>
 8005c90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
 8005c98:	e043      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d119      	bne.n	8005cd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6858      	ldr	r0, [r3, #4]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	f002 fa05 	bl	80080ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb8:	441a      	add	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d32b      	bcc.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e026      	b.n	8005d22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68d8      	ldr	r0, [r3, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	f002 f9eb 	bl	80080ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cec:	425b      	negs	r3, r3
 8005cee:	441a      	add	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d207      	bcs.n	8005d10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	425b      	negs	r3, r3
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d105      	bne.n	8005d22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d2a:	697b      	ldr	r3, [r7, #20]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4e:	441a      	add	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d303      	bcc.n	8005d68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68d9      	ldr	r1, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	461a      	mov	r2, r3
 8005d72:	6838      	ldr	r0, [r7, #0]
 8005d74:	f002 f9a1 	bl	80080ba <memcpy>
	}
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d88:	f001 f876 	bl	8006e78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d94:	e011      	b.n	8005dba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d012      	beq.n	8005dc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	3324      	adds	r3, #36	@ 0x24
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc6c 	bl	8006680 <xTaskRemoveFromEventList>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dae:	f000 fd45 	bl	800683c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	dce9      	bgt.n	8005d96 <prvUnlockQueue+0x16>
 8005dc2:	e000      	b.n	8005dc6 <prvUnlockQueue+0x46>
					break;
 8005dc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	22ff      	movs	r2, #255	@ 0xff
 8005dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005dce:	f001 f885 	bl	8006edc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005dd2:	f001 f851 	bl	8006e78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ddc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dde:	e011      	b.n	8005e04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3310      	adds	r3, #16
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fc47 	bl	8006680 <xTaskRemoveFromEventList>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005df8:	f000 fd20 	bl	800683c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dce9      	bgt.n	8005de0 <prvUnlockQueue+0x60>
 8005e0c:	e000      	b.n	8005e10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	22ff      	movs	r2, #255	@ 0xff
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e18:	f001 f860 	bl	8006edc <vPortExitCritical>
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e2c:	f001 f824 	bl	8006e78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d102      	bne.n	8005e3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e001      	b.n	8005e42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e42:	f001 f84b 	bl	8006edc <vPortExitCritical>

	return xReturn;
 8005e46:	68fb      	ldr	r3, [r7, #12]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08e      	sub	sp, #56	@ 0x38
 8005e54:	af04      	add	r7, sp, #16
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	623b      	str	r3, [r7, #32]
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	61fb      	str	r3, [r7, #28]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e9a:	2354      	movs	r3, #84	@ 0x54
 8005e9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b54      	cmp	r3, #84	@ 0x54
 8005ea2:	d00b      	beq.n	8005ebc <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	61bb      	str	r3, [r7, #24]
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ebc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01e      	beq.n	8005f02 <xTaskCreateStatic+0xb2>
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d01b      	beq.n	8005f02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ed2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005edc:	2300      	movs	r3, #0
 8005ede:	9303      	str	r3, [sp, #12]
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	9302      	str	r3, [sp, #8]
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f850 	bl	8005f9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005efc:	f000 f8d6 	bl	80060ac <prvAddNewTaskToReadyList>
 8005f00:	e001      	b.n	8005f06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f06:	697b      	ldr	r3, [r7, #20]
	}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3728      	adds	r7, #40	@ 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	@ 0x30
 8005f14:	af04      	add	r7, sp, #16
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 f8c9 	bl	80070bc <pvPortMalloc>
 8005f2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f32:	2054      	movs	r0, #84	@ 0x54
 8005f34:	f001 f8c2 	bl	80070bc <pvPortMalloc>
 8005f38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f46:	e005      	b.n	8005f54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f48:	6978      	ldr	r0, [r7, #20]
 8005f4a:	f001 f985 	bl	8007258 <vPortFree>
 8005f4e:	e001      	b.n	8005f54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d017      	beq.n	8005f8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f62:	88fa      	ldrh	r2, [r7, #6]
 8005f64:	2300      	movs	r3, #0
 8005f66:	9303      	str	r3, [sp, #12]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	9302      	str	r3, [sp, #8]
 8005f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68b9      	ldr	r1, [r7, #8]
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f80e 	bl	8005f9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f7e:	69f8      	ldr	r0, [r7, #28]
 8005f80:	f000 f894 	bl	80060ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f84:	2301      	movs	r3, #1
 8005f86:	61bb      	str	r3, [r7, #24]
 8005f88:	e002      	b.n	8005f90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f90:	69bb      	ldr	r3, [r7, #24]
	}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b088      	sub	sp, #32
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	607a      	str	r2, [r7, #4]
 8005fa6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f023 0307 	bic.w	r3, r3, #7
 8005fc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	617b      	str	r3, [r7, #20]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01f      	beq.n	800602a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	e012      	b.n	8006016 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	7819      	ldrb	r1, [r3, #0]
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3334      	adds	r3, #52	@ 0x34
 8006000:	460a      	mov	r2, r1
 8006002:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d006      	beq.n	800601e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	3301      	adds	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b0f      	cmp	r3, #15
 800601a:	d9e9      	bls.n	8005ff0 <prvInitialiseNewTask+0x56>
 800601c:	e000      	b.n	8006020 <prvInitialiseNewTask+0x86>
			{
				break;
 800601e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006028:	e003      	b.n	8006032 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	2b06      	cmp	r3, #6
 8006036:	d901      	bls.n	800603c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006038:	2306      	movs	r3, #6
 800603a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006040:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006046:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	2200      	movs	r2, #0
 800604c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006050:	3304      	adds	r3, #4
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff faad 	bl	80055b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	3318      	adds	r3, #24
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff faa8 	bl	80055b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006066:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	f1c3 0207 	rsb	r2, r3, #7
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006076:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607a:	2200      	movs	r2, #0
 800607c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	69b8      	ldr	r0, [r7, #24]
 800608c:	f000 fdc4 	bl	8006c18 <pxPortInitialiseStack>
 8006090:	4602      	mov	r2, r0
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800609c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a2:	bf00      	nop
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060b4:	f000 fee0 	bl	8006e78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006164 <prvAddNewTaskToReadyList+0xb8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3301      	adds	r3, #1
 80060be:	4a29      	ldr	r2, [pc, #164]	@ (8006164 <prvAddNewTaskToReadyList+0xb8>)
 80060c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060c2:	4b29      	ldr	r3, [pc, #164]	@ (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ca:	4a27      	ldr	r2, [pc, #156]	@ (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060d0:	4b24      	ldr	r3, [pc, #144]	@ (8006164 <prvAddNewTaskToReadyList+0xb8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d110      	bne.n	80060fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060d8:	f000 fbd4 	bl	8006884 <prvInitialiseTaskLists>
 80060dc:	e00d      	b.n	80060fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060de:	4b23      	ldr	r3, [pc, #140]	@ (800616c <prvAddNewTaskToReadyList+0xc0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060e6:	4b20      	ldr	r3, [pc, #128]	@ (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d802      	bhi.n	80060fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006168 <prvAddNewTaskToReadyList+0xbc>)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <prvAddNewTaskToReadyList+0xc4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3301      	adds	r3, #1
 8006100:	4a1b      	ldr	r2, [pc, #108]	@ (8006170 <prvAddNewTaskToReadyList+0xc4>)
 8006102:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	2201      	movs	r2, #1
 800610a:	409a      	lsls	r2, r3
 800610c:	4b19      	ldr	r3, [pc, #100]	@ (8006174 <prvAddNewTaskToReadyList+0xc8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4313      	orrs	r3, r2
 8006112:	4a18      	ldr	r2, [pc, #96]	@ (8006174 <prvAddNewTaskToReadyList+0xc8>)
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4a15      	ldr	r2, [pc, #84]	@ (8006178 <prvAddNewTaskToReadyList+0xcc>)
 8006124:	441a      	add	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3304      	adds	r3, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f7ff fa4d 	bl	80055cc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006132:	f000 fed3 	bl	8006edc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006136:	4b0d      	ldr	r3, [pc, #52]	@ (800616c <prvAddNewTaskToReadyList+0xc0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00e      	beq.n	800615c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800613e:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <prvAddNewTaskToReadyList+0xbc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	429a      	cmp	r2, r3
 800614a:	d207      	bcs.n	800615c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800614c:	4b0b      	ldr	r3, [pc, #44]	@ (800617c <prvAddNewTaskToReadyList+0xd0>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20001094 	.word	0x20001094
 8006168:	20000f94 	.word	0x20000f94
 800616c:	200010a0 	.word	0x200010a0
 8006170:	200010b0 	.word	0x200010b0
 8006174:	2000109c 	.word	0x2000109c
 8006178:	20000f98 	.word	0x20000f98
 800617c:	e000ed04 	.word	0xe000ed04

08006180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d018      	beq.n	80061c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006192:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <vTaskDelay+0x64>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <vTaskDelay+0x32>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60bb      	str	r3, [r7, #8]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061b2:	f000 f87d 	bl	80062b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061b6:	2100      	movs	r1, #0
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fcc7 	bl	8006b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061be:	f000 f885 	bl	80062cc <xTaskResumeAll>
 80061c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80061ca:	4b07      	ldr	r3, [pc, #28]	@ (80061e8 <vTaskDelay+0x68>)
 80061cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d0:	601a      	str	r2, [r3, #0]
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200010bc 	.word	0x200010bc
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	@ 0x28
 80061f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061fa:	463a      	mov	r2, r7
 80061fc:	1d39      	adds	r1, r7, #4
 80061fe:	f107 0308 	add.w	r3, r7, #8
 8006202:	4618      	mov	r0, r3
 8006204:	f7fa fef0 	bl	8000fe8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	2300      	movs	r3, #0
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	460a      	mov	r2, r1
 800621a:	491f      	ldr	r1, [pc, #124]	@ (8006298 <vTaskStartScheduler+0xac>)
 800621c:	481f      	ldr	r0, [pc, #124]	@ (800629c <vTaskStartScheduler+0xb0>)
 800621e:	f7ff fe17 	bl	8005e50 <xTaskCreateStatic>
 8006222:	4603      	mov	r3, r0
 8006224:	4a1e      	ldr	r2, [pc, #120]	@ (80062a0 <vTaskStartScheduler+0xb4>)
 8006226:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006228:	4b1d      	ldr	r3, [pc, #116]	@ (80062a0 <vTaskStartScheduler+0xb4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006230:	2301      	movs	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e001      	b.n	800623a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006236:	2300      	movs	r3, #0
 8006238:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d116      	bne.n	800626e <vTaskStartScheduler+0x82>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	613b      	str	r3, [r7, #16]
}
 8006252:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006254:	4b13      	ldr	r3, [pc, #76]	@ (80062a4 <vTaskStartScheduler+0xb8>)
 8006256:	f04f 32ff 	mov.w	r2, #4294967295
 800625a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <vTaskStartScheduler+0xbc>)
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006262:	4b12      	ldr	r3, [pc, #72]	@ (80062ac <vTaskStartScheduler+0xc0>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006268:	f000 fd62 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800626c:	e00f      	b.n	800628e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d10b      	bne.n	800628e <vTaskStartScheduler+0xa2>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	60fb      	str	r3, [r7, #12]
}
 8006288:	bf00      	nop
 800628a:	bf00      	nop
 800628c:	e7fd      	b.n	800628a <vTaskStartScheduler+0x9e>
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	0800a2b0 	.word	0x0800a2b0
 800629c:	08006855 	.word	0x08006855
 80062a0:	200010b8 	.word	0x200010b8
 80062a4:	200010b4 	.word	0x200010b4
 80062a8:	200010a0 	.word	0x200010a0
 80062ac:	20001098 	.word	0x20001098

080062b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062b4:	4b04      	ldr	r3, [pc, #16]	@ (80062c8 <vTaskSuspendAll+0x18>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3301      	adds	r3, #1
 80062ba:	4a03      	ldr	r2, [pc, #12]	@ (80062c8 <vTaskSuspendAll+0x18>)
 80062bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062be:	bf00      	nop
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	200010bc 	.word	0x200010bc

080062cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062da:	4b42      	ldr	r3, [pc, #264]	@ (80063e4 <xTaskResumeAll+0x118>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <xTaskResumeAll+0x2e>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	603b      	str	r3, [r7, #0]
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	e7fd      	b.n	80062f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062fa:	f000 fdbd 	bl	8006e78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062fe:	4b39      	ldr	r3, [pc, #228]	@ (80063e4 <xTaskResumeAll+0x118>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3b01      	subs	r3, #1
 8006304:	4a37      	ldr	r2, [pc, #220]	@ (80063e4 <xTaskResumeAll+0x118>)
 8006306:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006308:	4b36      	ldr	r3, [pc, #216]	@ (80063e4 <xTaskResumeAll+0x118>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d161      	bne.n	80063d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006310:	4b35      	ldr	r3, [pc, #212]	@ (80063e8 <xTaskResumeAll+0x11c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d05d      	beq.n	80063d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006318:	e02e      	b.n	8006378 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631a:	4b34      	ldr	r3, [pc, #208]	@ (80063ec <xTaskResumeAll+0x120>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3318      	adds	r3, #24
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f9ad 	bl	8005686 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff f9a8 	bl	8005686 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	2201      	movs	r2, #1
 800633c:	409a      	lsls	r2, r3
 800633e:	4b2c      	ldr	r3, [pc, #176]	@ (80063f0 <xTaskResumeAll+0x124>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4313      	orrs	r3, r2
 8006344:	4a2a      	ldr	r2, [pc, #168]	@ (80063f0 <xTaskResumeAll+0x124>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4a27      	ldr	r2, [pc, #156]	@ (80063f4 <xTaskResumeAll+0x128>)
 8006356:	441a      	add	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7ff f934 	bl	80055cc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006368:	4b23      	ldr	r3, [pc, #140]	@ (80063f8 <xTaskResumeAll+0x12c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636e:	429a      	cmp	r2, r3
 8006370:	d302      	bcc.n	8006378 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006372:	4b22      	ldr	r3, [pc, #136]	@ (80063fc <xTaskResumeAll+0x130>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006378:	4b1c      	ldr	r3, [pc, #112]	@ (80063ec <xTaskResumeAll+0x120>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1cc      	bne.n	800631a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006386:	f000 fb1b 	bl	80069c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800638a:	4b1d      	ldr	r3, [pc, #116]	@ (8006400 <xTaskResumeAll+0x134>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006396:	f000 f837 	bl	8006408 <xTaskIncrementTick>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063a0:	4b16      	ldr	r3, [pc, #88]	@ (80063fc <xTaskResumeAll+0x130>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f1      	bne.n	8006396 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063b2:	4b13      	ldr	r3, [pc, #76]	@ (8006400 <xTaskResumeAll+0x134>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063b8:	4b10      	ldr	r3, [pc, #64]	@ (80063fc <xTaskResumeAll+0x130>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006404 <xTaskResumeAll+0x138>)
 80063c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ca:	601a      	str	r2, [r3, #0]
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063d4:	f000 fd82 	bl	8006edc <vPortExitCritical>

	return xAlreadyYielded;
 80063d8:	68bb      	ldr	r3, [r7, #8]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	200010bc 	.word	0x200010bc
 80063e8:	20001094 	.word	0x20001094
 80063ec:	20001054 	.word	0x20001054
 80063f0:	2000109c 	.word	0x2000109c
 80063f4:	20000f98 	.word	0x20000f98
 80063f8:	20000f94 	.word	0x20000f94
 80063fc:	200010a8 	.word	0x200010a8
 8006400:	200010a4 	.word	0x200010a4
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006412:	4b4f      	ldr	r3, [pc, #316]	@ (8006550 <xTaskIncrementTick+0x148>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f040 808f 	bne.w	800653a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800641c:	4b4d      	ldr	r3, [pc, #308]	@ (8006554 <xTaskIncrementTick+0x14c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3301      	adds	r3, #1
 8006422:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006424:	4a4b      	ldr	r2, [pc, #300]	@ (8006554 <xTaskIncrementTick+0x14c>)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d121      	bne.n	8006474 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006430:	4b49      	ldr	r3, [pc, #292]	@ (8006558 <xTaskIncrementTick+0x150>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <xTaskIncrementTick+0x4a>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	603b      	str	r3, [r7, #0]
}
 800644c:	bf00      	nop
 800644e:	bf00      	nop
 8006450:	e7fd      	b.n	800644e <xTaskIncrementTick+0x46>
 8006452:	4b41      	ldr	r3, [pc, #260]	@ (8006558 <xTaskIncrementTick+0x150>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	4b40      	ldr	r3, [pc, #256]	@ (800655c <xTaskIncrementTick+0x154>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a3e      	ldr	r2, [pc, #248]	@ (8006558 <xTaskIncrementTick+0x150>)
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	4a3e      	ldr	r2, [pc, #248]	@ (800655c <xTaskIncrementTick+0x154>)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b3e      	ldr	r3, [pc, #248]	@ (8006560 <xTaskIncrementTick+0x158>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	4a3c      	ldr	r2, [pc, #240]	@ (8006560 <xTaskIncrementTick+0x158>)
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	f000 faa6 	bl	80069c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006474:	4b3b      	ldr	r3, [pc, #236]	@ (8006564 <xTaskIncrementTick+0x15c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	d348      	bcc.n	8006510 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800647e:	4b36      	ldr	r3, [pc, #216]	@ (8006558 <xTaskIncrementTick+0x150>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006488:	4b36      	ldr	r3, [pc, #216]	@ (8006564 <xTaskIncrementTick+0x15c>)
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	601a      	str	r2, [r3, #0]
					break;
 8006490:	e03e      	b.n	8006510 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006492:	4b31      	ldr	r3, [pc, #196]	@ (8006558 <xTaskIncrementTick+0x150>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d203      	bcs.n	80064b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064aa:	4a2e      	ldr	r2, [pc, #184]	@ (8006564 <xTaskIncrementTick+0x15c>)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064b0:	e02e      	b.n	8006510 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff f8e5 	bl	8005686 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d004      	beq.n	80064ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	3318      	adds	r3, #24
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff f8dc 	bl	8005686 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	2201      	movs	r2, #1
 80064d4:	409a      	lsls	r2, r3
 80064d6:	4b24      	ldr	r3, [pc, #144]	@ (8006568 <xTaskIncrementTick+0x160>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4313      	orrs	r3, r2
 80064dc:	4a22      	ldr	r2, [pc, #136]	@ (8006568 <xTaskIncrementTick+0x160>)
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4a1f      	ldr	r2, [pc, #124]	@ (800656c <xTaskIncrementTick+0x164>)
 80064ee:	441a      	add	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7ff f868 	bl	80055cc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006500:	4b1b      	ldr	r3, [pc, #108]	@ (8006570 <xTaskIncrementTick+0x168>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006506:	429a      	cmp	r2, r3
 8006508:	d3b9      	bcc.n	800647e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800650a:	2301      	movs	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800650e:	e7b6      	b.n	800647e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006510:	4b17      	ldr	r3, [pc, #92]	@ (8006570 <xTaskIncrementTick+0x168>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006516:	4915      	ldr	r1, [pc, #84]	@ (800656c <xTaskIncrementTick+0x164>)
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d901      	bls.n	800652c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800652c:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <xTaskIncrementTick+0x16c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006534:	2301      	movs	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e004      	b.n	8006544 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800653a:	4b0f      	ldr	r3, [pc, #60]	@ (8006578 <xTaskIncrementTick+0x170>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3301      	adds	r3, #1
 8006540:	4a0d      	ldr	r2, [pc, #52]	@ (8006578 <xTaskIncrementTick+0x170>)
 8006542:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006544:	697b      	ldr	r3, [r7, #20]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	200010bc 	.word	0x200010bc
 8006554:	20001098 	.word	0x20001098
 8006558:	2000104c 	.word	0x2000104c
 800655c:	20001050 	.word	0x20001050
 8006560:	200010ac 	.word	0x200010ac
 8006564:	200010b4 	.word	0x200010b4
 8006568:	2000109c 	.word	0x2000109c
 800656c:	20000f98 	.word	0x20000f98
 8006570:	20000f94 	.word	0x20000f94
 8006574:	200010a8 	.word	0x200010a8
 8006578:	200010a4 	.word	0x200010a4

0800657c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006582:	4b27      	ldr	r3, [pc, #156]	@ (8006620 <vTaskSwitchContext+0xa4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800658a:	4b26      	ldr	r3, [pc, #152]	@ (8006624 <vTaskSwitchContext+0xa8>)
 800658c:	2201      	movs	r2, #1
 800658e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006590:	e040      	b.n	8006614 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006592:	4b24      	ldr	r3, [pc, #144]	@ (8006624 <vTaskSwitchContext+0xa8>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006598:	4b23      	ldr	r3, [pc, #140]	@ (8006628 <vTaskSwitchContext+0xac>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	fab3 f383 	clz	r3, r3
 80065a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	f1c3 031f 	rsb	r3, r3, #31
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	491f      	ldr	r1, [pc, #124]	@ (800662c <vTaskSwitchContext+0xb0>)
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <vTaskSwitchContext+0x5e>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	607b      	str	r3, [r7, #4]
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	e7fd      	b.n	80065d6 <vTaskSwitchContext+0x5a>
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4a11      	ldr	r2, [pc, #68]	@ (800662c <vTaskSwitchContext+0xb0>)
 80065e6:	4413      	add	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3308      	adds	r3, #8
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d104      	bne.n	800660a <vTaskSwitchContext+0x8e>
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	4a07      	ldr	r2, [pc, #28]	@ (8006630 <vTaskSwitchContext+0xb4>)
 8006612:	6013      	str	r3, [r2, #0]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	200010bc 	.word	0x200010bc
 8006624:	200010a8 	.word	0x200010a8
 8006628:	2000109c 	.word	0x2000109c
 800662c:	20000f98 	.word	0x20000f98
 8006630:	20000f94 	.word	0x20000f94

08006634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800665c:	4b07      	ldr	r3, [pc, #28]	@ (800667c <vTaskPlaceOnEventList+0x48>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3318      	adds	r3, #24
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f7fe ffd5 	bl	8005614 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800666a:	2101      	movs	r1, #1
 800666c:	6838      	ldr	r0, [r7, #0]
 800666e:	f000 fa6d 	bl	8006b4c <prvAddCurrentTaskToDelayedList>
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000f94 	.word	0x20000f94

08006680 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10b      	bne.n	80066ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	f383 8811 	msr	BASEPRI, r3
 800669e:	f3bf 8f6f 	isb	sy
 80066a2:	f3bf 8f4f 	dsb	sy
 80066a6:	60fb      	str	r3, [r7, #12]
}
 80066a8:	bf00      	nop
 80066aa:	bf00      	nop
 80066ac:	e7fd      	b.n	80066aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	3318      	adds	r3, #24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe ffe7 	bl	8005686 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006730 <xTaskRemoveFromEventList+0xb0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11c      	bne.n	80066fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe ffde 	bl	8005686 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ce:	2201      	movs	r2, #1
 80066d0:	409a      	lsls	r2, r3
 80066d2:	4b18      	ldr	r3, [pc, #96]	@ (8006734 <xTaskRemoveFromEventList+0xb4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <xTaskRemoveFromEventList+0xb4>)
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066e0:	4613      	mov	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4a13      	ldr	r2, [pc, #76]	@ (8006738 <xTaskRemoveFromEventList+0xb8>)
 80066ea:	441a      	add	r2, r3
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f7fe ff6a 	bl	80055cc <vListInsertEnd>
 80066f8:	e005      	b.n	8006706 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	3318      	adds	r3, #24
 80066fe:	4619      	mov	r1, r3
 8006700:	480e      	ldr	r0, [pc, #56]	@ (800673c <xTaskRemoveFromEventList+0xbc>)
 8006702:	f7fe ff63 	bl	80055cc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670a:	4b0d      	ldr	r3, [pc, #52]	@ (8006740 <xTaskRemoveFromEventList+0xc0>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006710:	429a      	cmp	r2, r3
 8006712:	d905      	bls.n	8006720 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006714:	2301      	movs	r3, #1
 8006716:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006718:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <xTaskRemoveFromEventList+0xc4>)
 800671a:	2201      	movs	r2, #1
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	e001      	b.n	8006724 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006720:	2300      	movs	r3, #0
 8006722:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006724:	697b      	ldr	r3, [r7, #20]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200010bc 	.word	0x200010bc
 8006734:	2000109c 	.word	0x2000109c
 8006738:	20000f98 	.word	0x20000f98
 800673c:	20001054 	.word	0x20001054
 8006740:	20000f94 	.word	0x20000f94
 8006744:	200010a8 	.word	0x200010a8

08006748 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <vTaskInternalSetTimeOutState+0x24>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006758:	4b05      	ldr	r3, [pc, #20]	@ (8006770 <vTaskInternalSetTimeOutState+0x28>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	605a      	str	r2, [r3, #4]
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	200010ac 	.word	0x200010ac
 8006770:	20001098 	.word	0x20001098

08006774 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10b      	bne.n	800679c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	613b      	str	r3, [r7, #16]
}
 8006796:	bf00      	nop
 8006798:	bf00      	nop
 800679a:	e7fd      	b.n	8006798 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	60fb      	str	r3, [r7, #12]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80067ba:	f000 fb5d 	bl	8006e78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067be:	4b1d      	ldr	r3, [pc, #116]	@ (8006834 <xTaskCheckForTimeOut+0xc0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d102      	bne.n	80067de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067d8:	2300      	movs	r3, #0
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e023      	b.n	8006826 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4b15      	ldr	r3, [pc, #84]	@ (8006838 <xTaskCheckForTimeOut+0xc4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d007      	beq.n	80067fa <xTaskCheckForTimeOut+0x86>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e015      	b.n	8006826 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	d20b      	bcs.n	800681c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ff99 	bl	8006748 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	e004      	b.n	8006826 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2200      	movs	r2, #0
 8006820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006826:	f000 fb59 	bl	8006edc <vPortExitCritical>

	return xReturn;
 800682a:	69fb      	ldr	r3, [r7, #28]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	20001098 	.word	0x20001098
 8006838:	200010ac 	.word	0x200010ac

0800683c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006840:	4b03      	ldr	r3, [pc, #12]	@ (8006850 <vTaskMissedYield+0x14>)
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]
}
 8006846:	bf00      	nop
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	200010a8 	.word	0x200010a8

08006854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800685c:	f000 f852 	bl	8006904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006860:	4b06      	ldr	r3, [pc, #24]	@ (800687c <prvIdleTask+0x28>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d9f9      	bls.n	800685c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <prvIdleTask+0x2c>)
 800686a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006878:	e7f0      	b.n	800685c <prvIdleTask+0x8>
 800687a:	bf00      	nop
 800687c:	20000f98 	.word	0x20000f98
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800688a:	2300      	movs	r3, #0
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	e00c      	b.n	80068aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4a12      	ldr	r2, [pc, #72]	@ (80068e4 <prvInitialiseTaskLists+0x60>)
 800689c:	4413      	add	r3, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fe67 	bl	8005572 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3301      	adds	r3, #1
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	d9ef      	bls.n	8006890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068b0:	480d      	ldr	r0, [pc, #52]	@ (80068e8 <prvInitialiseTaskLists+0x64>)
 80068b2:	f7fe fe5e 	bl	8005572 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068b6:	480d      	ldr	r0, [pc, #52]	@ (80068ec <prvInitialiseTaskLists+0x68>)
 80068b8:	f7fe fe5b 	bl	8005572 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068bc:	480c      	ldr	r0, [pc, #48]	@ (80068f0 <prvInitialiseTaskLists+0x6c>)
 80068be:	f7fe fe58 	bl	8005572 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068c2:	480c      	ldr	r0, [pc, #48]	@ (80068f4 <prvInitialiseTaskLists+0x70>)
 80068c4:	f7fe fe55 	bl	8005572 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068c8:	480b      	ldr	r0, [pc, #44]	@ (80068f8 <prvInitialiseTaskLists+0x74>)
 80068ca:	f7fe fe52 	bl	8005572 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ce:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <prvInitialiseTaskLists+0x78>)
 80068d0:	4a05      	ldr	r2, [pc, #20]	@ (80068e8 <prvInitialiseTaskLists+0x64>)
 80068d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006900 <prvInitialiseTaskLists+0x7c>)
 80068d6:	4a05      	ldr	r2, [pc, #20]	@ (80068ec <prvInitialiseTaskLists+0x68>)
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000f98 	.word	0x20000f98
 80068e8:	20001024 	.word	0x20001024
 80068ec:	20001038 	.word	0x20001038
 80068f0:	20001054 	.word	0x20001054
 80068f4:	20001068 	.word	0x20001068
 80068f8:	20001080 	.word	0x20001080
 80068fc:	2000104c 	.word	0x2000104c
 8006900:	20001050 	.word	0x20001050

08006904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800690a:	e019      	b.n	8006940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800690c:	f000 fab4 	bl	8006e78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <prvCheckTasksWaitingTermination+0x50>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe feb2 	bl	8005686 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006922:	4b0d      	ldr	r3, [pc, #52]	@ (8006958 <prvCheckTasksWaitingTermination+0x54>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3b01      	subs	r3, #1
 8006928:	4a0b      	ldr	r2, [pc, #44]	@ (8006958 <prvCheckTasksWaitingTermination+0x54>)
 800692a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800692c:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <prvCheckTasksWaitingTermination+0x58>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3b01      	subs	r3, #1
 8006932:	4a0a      	ldr	r2, [pc, #40]	@ (800695c <prvCheckTasksWaitingTermination+0x58>)
 8006934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006936:	f000 fad1 	bl	8006edc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f810 	bl	8006960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006940:	4b06      	ldr	r3, [pc, #24]	@ (800695c <prvCheckTasksWaitingTermination+0x58>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e1      	bne.n	800690c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006948:	bf00      	nop
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20001068 	.word	0x20001068
 8006958:	20001094 	.word	0x20001094
 800695c:	2000107c 	.word	0x2000107c

08006960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fc6e 	bl	8007258 <vPortFree>
				vPortFree( pxTCB );
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fc6b 	bl	8007258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006982:	e019      	b.n	80069b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800698a:	2b01      	cmp	r3, #1
 800698c:	d103      	bne.n	8006996 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fc62 	bl	8007258 <vPortFree>
	}
 8006994:	e010      	b.n	80069b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800699c:	2b02      	cmp	r3, #2
 800699e:	d00b      	beq.n	80069b8 <prvDeleteTCB+0x58>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	60fb      	str	r3, [r7, #12]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <prvDeleteTCB+0x54>
	}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069c6:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <prvResetNextTaskUnblockTime+0x38>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d104      	bne.n	80069da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069d0:	4b0a      	ldr	r3, [pc, #40]	@ (80069fc <prvResetNextTaskUnblockTime+0x3c>)
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295
 80069d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069d8:	e008      	b.n	80069ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069da:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <prvResetNextTaskUnblockTime+0x38>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4a04      	ldr	r2, [pc, #16]	@ (80069fc <prvResetNextTaskUnblockTime+0x3c>)
 80069ea:	6013      	str	r3, [r2, #0]
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	2000104c 	.word	0x2000104c
 80069fc:	200010b4 	.word	0x200010b4

08006a00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a06:	4b0b      	ldr	r3, [pc, #44]	@ (8006a34 <xTaskGetSchedulerState+0x34>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d102      	bne.n	8006a14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	e008      	b.n	8006a26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a14:	4b08      	ldr	r3, [pc, #32]	@ (8006a38 <xTaskGetSchedulerState+0x38>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	e001      	b.n	8006a26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a26:	687b      	ldr	r3, [r7, #4]
	}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	200010a0 	.word	0x200010a0
 8006a38:	200010bc 	.word	0x200010bc

08006a3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d070      	beq.n	8006b34 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a52:	4b3b      	ldr	r3, [pc, #236]	@ (8006b40 <xTaskPriorityDisinherit+0x104>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d00b      	beq.n	8006a74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	60fb      	str	r3, [r7, #12]
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	60bb      	str	r3, [r7, #8]
}
 8006a8e:	bf00      	nop
 8006a90:	bf00      	nop
 8006a92:	e7fd      	b.n	8006a90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d044      	beq.n	8006b34 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d140      	bne.n	8006b34 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fde5 	bl	8005686 <uxListRemove>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d115      	bne.n	8006aee <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac6:	491f      	ldr	r1, [pc, #124]	@ (8006b44 <xTaskPriorityDisinherit+0x108>)
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xTaskPriorityDisinherit+0xb2>
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	2201      	movs	r2, #1
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	43da      	mvns	r2, r3
 8006ae4:	4b18      	ldr	r3, [pc, #96]	@ (8006b48 <xTaskPriorityDisinherit+0x10c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	4a17      	ldr	r2, [pc, #92]	@ (8006b48 <xTaskPriorityDisinherit+0x10c>)
 8006aec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006afa:	f1c3 0207 	rsb	r2, r3, #7
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b06:	2201      	movs	r2, #1
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b48 <xTaskPriorityDisinherit+0x10c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	4a0d      	ldr	r2, [pc, #52]	@ (8006b48 <xTaskPriorityDisinherit+0x10c>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4a08      	ldr	r2, [pc, #32]	@ (8006b44 <xTaskPriorityDisinherit+0x108>)
 8006b22:	441a      	add	r2, r3
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f7fe fd4e 	bl	80055cc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b34:	697b      	ldr	r3, [r7, #20]
	}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000f94 	.word	0x20000f94
 8006b44:	20000f98 	.word	0x20000f98
 8006b48:	2000109c 	.word	0x2000109c

08006b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b56:	4b29      	ldr	r3, [pc, #164]	@ (8006bfc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b5c:	4b28      	ldr	r3, [pc, #160]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fd8f 	bl	8005686 <uxListRemove>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10b      	bne.n	8006b86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006b6e:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43da      	mvns	r2, r3
 8006b7c:	4b21      	ldr	r3, [pc, #132]	@ (8006c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4013      	ands	r3, r2
 8006b82:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d10a      	bne.n	8006ba4 <prvAddCurrentTaskToDelayedList+0x58>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d007      	beq.n	8006ba4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b94:	4b1a      	ldr	r3, [pc, #104]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	481a      	ldr	r0, [pc, #104]	@ (8006c08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b9e:	f7fe fd15 	bl	80055cc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ba2:	e026      	b.n	8006bf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4413      	add	r3, r2
 8006baa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006bac:	4b14      	ldr	r3, [pc, #80]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d209      	bcs.n	8006bd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bbc:	4b13      	ldr	r3, [pc, #76]	@ (8006c0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fe fd23 	bl	8005614 <vListInsert>
}
 8006bce:	e010      	b.n	8006bf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8006c10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006c00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4610      	mov	r0, r2
 8006bde:	f7fe fd19 	bl	8005614 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006be2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d202      	bcs.n	8006bf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006bec:	4a09      	ldr	r2, [pc, #36]	@ (8006c14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6013      	str	r3, [r2, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20001098 	.word	0x20001098
 8006c00:	20000f94 	.word	0x20000f94
 8006c04:	2000109c 	.word	0x2000109c
 8006c08:	20001080 	.word	0x20001080
 8006c0c:	20001050 	.word	0x20001050
 8006c10:	2000104c 	.word	0x2000104c
 8006c14:	200010b4 	.word	0x200010b4

08006c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3b04      	subs	r3, #4
 8006c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3b04      	subs	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3b04      	subs	r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c48:	4a0c      	ldr	r2, [pc, #48]	@ (8006c7c <pxPortInitialiseStack+0x64>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b14      	subs	r3, #20
 8006c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f06f 0202 	mvn.w	r2, #2
 8006c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3b20      	subs	r3, #32
 8006c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	08006c81 	.word	0x08006c81

08006c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c8a:	4b13      	ldr	r3, [pc, #76]	@ (8006cd8 <prvTaskExitError+0x58>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c92:	d00b      	beq.n	8006cac <prvTaskExitError+0x2c>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	60fb      	str	r3, [r7, #12]
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	e7fd      	b.n	8006ca8 <prvTaskExitError+0x28>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	60bb      	str	r3, [r7, #8]
}
 8006cbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cc0:	bf00      	nop
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0fc      	beq.n	8006cc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	3714      	adds	r7, #20
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	20000018 	.word	0x20000018
 8006cdc:	00000000 	.word	0x00000000

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	20000f94 	.word	0x20000f94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	@ (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d36:	4b47      	ldr	r3, [pc, #284]	@ (8006e54 <xPortStartScheduler+0x124>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a47      	ldr	r2, [pc, #284]	@ (8006e58 <xPortStartScheduler+0x128>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10b      	bne.n	8006d58 <xPortStartScheduler+0x28>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d58:	4b3e      	ldr	r3, [pc, #248]	@ (8006e54 <xPortStartScheduler+0x124>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e5c <xPortStartScheduler+0x12c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d10b      	bne.n	8006d7a <xPortStartScheduler+0x4a>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60fb      	str	r3, [r7, #12]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d7a:	4b39      	ldr	r3, [pc, #228]	@ (8006e60 <xPortStartScheduler+0x130>)
 8006d7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	22ff      	movs	r2, #255	@ 0xff
 8006d8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	4b31      	ldr	r3, [pc, #196]	@ (8006e64 <xPortStartScheduler+0x134>)
 8006da0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006da2:	4b31      	ldr	r3, [pc, #196]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006da4:	2207      	movs	r2, #7
 8006da6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006da8:	e009      	b.n	8006dbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006daa:	4b2f      	ldr	r3, [pc, #188]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006db2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc6:	2b80      	cmp	r3, #128	@ 0x80
 8006dc8:	d0ef      	beq.n	8006daa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dca:	4b27      	ldr	r3, [pc, #156]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f1c3 0307 	rsb	r3, r3, #7
 8006dd2:	2b04      	cmp	r3, #4
 8006dd4:	d00b      	beq.n	8006dee <xPortStartScheduler+0xbe>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60bb      	str	r3, [r7, #8]
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	e7fd      	b.n	8006dea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dee:	4b1e      	ldr	r3, [pc, #120]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006df6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006df8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e00:	4a19      	ldr	r2, [pc, #100]	@ (8006e68 <xPortStartScheduler+0x138>)
 8006e02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e0c:	4b17      	ldr	r3, [pc, #92]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e18:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a13      	ldr	r2, [pc, #76]	@ (8006e6c <xPortStartScheduler+0x13c>)
 8006e1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006e22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e24:	f000 f8da 	bl	8006fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e28:	4b11      	ldr	r3, [pc, #68]	@ (8006e70 <xPortStartScheduler+0x140>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e2e:	f000 f8f9 	bl	8007024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e32:	4b10      	ldr	r3, [pc, #64]	@ (8006e74 <xPortStartScheduler+0x144>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a0f      	ldr	r2, [pc, #60]	@ (8006e74 <xPortStartScheduler+0x144>)
 8006e38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e3e:	f7ff ff63 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e42:	f7ff fb9b 	bl	800657c <vTaskSwitchContext>
	prvTaskExitError();
 8006e46:	f7ff ff1b 	bl	8006c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	e000ed00 	.word	0xe000ed00
 8006e58:	410fc271 	.word	0x410fc271
 8006e5c:	410fc270 	.word	0x410fc270
 8006e60:	e000e400 	.word	0xe000e400
 8006e64:	200010c0 	.word	0x200010c0
 8006e68:	200010c4 	.word	0x200010c4
 8006e6c:	e000ed20 	.word	0xe000ed20
 8006e70:	20000018 	.word	0x20000018
 8006e74:	e000ef34 	.word	0xe000ef34

08006e78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	607b      	str	r3, [r7, #4]
}
 8006e90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e92:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <vPortEnterCritical+0x5c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3301      	adds	r3, #1
 8006e98:	4a0e      	ldr	r2, [pc, #56]	@ (8006ed4 <vPortEnterCritical+0x5c>)
 8006e9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed4 <vPortEnterCritical+0x5c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d110      	bne.n	8006ec6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed8 <vPortEnterCritical+0x60>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00b      	beq.n	8006ec6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	603b      	str	r3, [r7, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <vPortEnterCritical+0x4a>
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000018 	.word	0x20000018
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ee2:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <vPortExitCritical+0x50>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <vPortExitCritical+0x26>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	607b      	str	r3, [r7, #4]
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	e7fd      	b.n	8006efe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f02:	4b0a      	ldr	r3, [pc, #40]	@ (8006f2c <vPortExitCritical+0x50>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4a08      	ldr	r2, [pc, #32]	@ (8006f2c <vPortExitCritical+0x50>)
 8006f0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <vPortExitCritical+0x50>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d105      	bne.n	8006f20 <vPortExitCritical+0x44>
 8006f14:	2300      	movs	r3, #0
 8006f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
}
 8006f1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	20000018 	.word	0x20000018

08006f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f30:	f3ef 8009 	mrs	r0, PSP
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4b15      	ldr	r3, [pc, #84]	@ (8006f90 <pxCurrentTCBConst>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f01e 0f10 	tst.w	lr, #16
 8006f40:	bf08      	it	eq
 8006f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006f54:	f380 8811 	msr	BASEPRI, r0
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f7ff fb0c 	bl	800657c <vTaskSwitchContext>
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f380 8811 	msr	BASEPRI, r0
 8006f6c:	bc09      	pop	{r0, r3}
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	6808      	ldr	r0, [r1, #0]
 8006f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f76:	f01e 0f10 	tst.w	lr, #16
 8006f7a:	bf08      	it	eq
 8006f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f80:	f380 8809 	msr	PSP, r0
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst>:
 8006f90:	20000f94 	.word	0x20000f94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fb2:	f7ff fa29 	bl	8006408 <xTaskIncrementTick>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fbc:	4b06      	ldr	r3, [pc, #24]	@ (8006fd8 <xPortSysTickHandler+0x40>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <vPortSetupTimerInterrupt+0x34>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <vPortSetupTimerInterrupt+0x38>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <vPortSetupTimerInterrupt+0x3c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800701c <vPortSetupTimerInterrupt+0x40>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	4a09      	ldr	r2, [pc, #36]	@ (8007020 <vPortSetupTimerInterrupt+0x44>)
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ffe:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <vPortSetupTimerInterrupt+0x34>)
 8007000:	2207      	movs	r2, #7
 8007002:	601a      	str	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e010 	.word	0xe000e010
 8007014:	e000e018 	.word	0xe000e018
 8007018:	2000000c 	.word	0x2000000c
 800701c:	10624dd3 	.word	0x10624dd3
 8007020:	e000e014 	.word	0xe000e014

08007024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007034 <vPortEnableVFP+0x10>
 8007028:	6801      	ldr	r1, [r0, #0]
 800702a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800702e:	6001      	str	r1, [r0, #0]
 8007030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007032:	bf00      	nop
 8007034:	e000ed88 	.word	0xe000ed88

08007038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800703e:	f3ef 8305 	mrs	r3, IPSR
 8007042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d915      	bls.n	8007076 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704a:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <vPortValidateInterruptPriority+0x74>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007054:	4b16      	ldr	r3, [pc, #88]	@ (80070b0 <vPortValidateInterruptPriority+0x78>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	7afa      	ldrb	r2, [r7, #11]
 800705a:	429a      	cmp	r2, r3
 800705c:	d20b      	bcs.n	8007076 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007076:	4b0f      	ldr	r3, [pc, #60]	@ (80070b4 <vPortValidateInterruptPriority+0x7c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800707e:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <vPortValidateInterruptPriority+0x80>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d90b      	bls.n	800709e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	603b      	str	r3, [r7, #0]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <vPortValidateInterruptPriority+0x62>
	}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	e000e3f0 	.word	0xe000e3f0
 80070b0:	200010c0 	.word	0x200010c0
 80070b4:	e000ed0c 	.word	0xe000ed0c
 80070b8:	200010c4 	.word	0x200010c4

080070bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	@ 0x28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070c8:	f7ff f8f2 	bl	80062b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007240 <pvPortMalloc+0x184>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070d4:	f000 f924 	bl	8007320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007244 <pvPortMalloc+0x188>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4013      	ands	r3, r2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f040 8095 	bne.w	8007210 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01e      	beq.n	800712a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80070ec:	2208      	movs	r2, #8
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d015      	beq.n	800712a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f023 0307 	bic.w	r3, r3, #7
 8007104:	3308      	adds	r3, #8
 8007106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <pvPortMalloc+0x6e>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	617b      	str	r3, [r7, #20]
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d06f      	beq.n	8007210 <pvPortMalloc+0x154>
 8007130:	4b45      	ldr	r3, [pc, #276]	@ (8007248 <pvPortMalloc+0x18c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d86a      	bhi.n	8007210 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800713a:	4b44      	ldr	r3, [pc, #272]	@ (800724c <pvPortMalloc+0x190>)
 800713c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800713e:	4b43      	ldr	r3, [pc, #268]	@ (800724c <pvPortMalloc+0x190>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007144:	e004      	b.n	8007150 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	429a      	cmp	r2, r3
 8007158:	d903      	bls.n	8007162 <pvPortMalloc+0xa6>
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f1      	bne.n	8007146 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007162:	4b37      	ldr	r3, [pc, #220]	@ (8007240 <pvPortMalloc+0x184>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007168:	429a      	cmp	r2, r3
 800716a:	d051      	beq.n	8007210 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2208      	movs	r2, #8
 8007172:	4413      	add	r3, r2
 8007174:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	1ad2      	subs	r2, r2, r3
 8007186:	2308      	movs	r3, #8
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	429a      	cmp	r2, r3
 800718c:	d920      	bls.n	80071d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800718e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4413      	add	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <pvPortMalloc+0xfc>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	613b      	str	r3, [r7, #16]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ca:	69b8      	ldr	r0, [r7, #24]
 80071cc:	f000 f90a 	bl	80073e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007248 <pvPortMalloc+0x18c>)
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	4a1b      	ldr	r2, [pc, #108]	@ (8007248 <pvPortMalloc+0x18c>)
 80071dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071de:	4b1a      	ldr	r3, [pc, #104]	@ (8007248 <pvPortMalloc+0x18c>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <pvPortMalloc+0x194>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d203      	bcs.n	80071f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071ea:	4b17      	ldr	r3, [pc, #92]	@ (8007248 <pvPortMalloc+0x18c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a18      	ldr	r2, [pc, #96]	@ (8007250 <pvPortMalloc+0x194>)
 80071f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <pvPortMalloc+0x188>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	431a      	orrs	r2, r3
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <pvPortMalloc+0x198>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3301      	adds	r3, #1
 800720c:	4a11      	ldr	r2, [pc, #68]	@ (8007254 <pvPortMalloc+0x198>)
 800720e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007210:	f7ff f85c 	bl	80062cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <pvPortMalloc+0x17a>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	60fb      	str	r3, [r7, #12]
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	e7fd      	b.n	8007232 <pvPortMalloc+0x176>
	return pvReturn;
 8007236:	69fb      	ldr	r3, [r7, #28]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3728      	adds	r7, #40	@ 0x28
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20004cd0 	.word	0x20004cd0
 8007244:	20004ce4 	.word	0x20004ce4
 8007248:	20004cd4 	.word	0x20004cd4
 800724c:	20004cc8 	.word	0x20004cc8
 8007250:	20004cd8 	.word	0x20004cd8
 8007254:	20004cdc 	.word	0x20004cdc

08007258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d04f      	beq.n	800730a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800726a:	2308      	movs	r3, #8
 800726c:	425b      	negs	r3, r3
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <vPortFree+0xbc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4013      	ands	r3, r2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10b      	bne.n	800729e <vPortFree+0x46>
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	60fb      	str	r3, [r7, #12]
}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	e7fd      	b.n	800729a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <vPortFree+0x66>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <vPortFree+0xbc>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01e      	beq.n	800730a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11a      	bne.n	800730a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007314 <vPortFree+0xbc>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072e4:	f7fe ffe4 	bl	80062b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007318 <vPortFree+0xc0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4413      	add	r3, r2
 80072f2:	4a09      	ldr	r2, [pc, #36]	@ (8007318 <vPortFree+0xc0>)
 80072f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072f6:	6938      	ldr	r0, [r7, #16]
 80072f8:	f000 f874 	bl	80073e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072fc:	4b07      	ldr	r3, [pc, #28]	@ (800731c <vPortFree+0xc4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	4a06      	ldr	r2, [pc, #24]	@ (800731c <vPortFree+0xc4>)
 8007304:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007306:	f7fe ffe1 	bl	80062cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800730a:	bf00      	nop
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20004ce4 	.word	0x20004ce4
 8007318:	20004cd4 	.word	0x20004cd4
 800731c:	20004ce0 	.word	0x20004ce0

08007320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007326:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800732a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800732c:	4b27      	ldr	r3, [pc, #156]	@ (80073cc <prvHeapInit+0xac>)
 800732e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00c      	beq.n	8007354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3307      	adds	r3, #7
 800733e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0307 	bic.w	r3, r3, #7
 8007346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	4a1f      	ldr	r2, [pc, #124]	@ (80073cc <prvHeapInit+0xac>)
 8007350:	4413      	add	r3, r2
 8007352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <prvHeapInit+0xb0>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800735e:	4b1c      	ldr	r3, [pc, #112]	@ (80073d0 <prvHeapInit+0xb0>)
 8007360:	2200      	movs	r2, #0
 8007362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4413      	add	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800736c:	2208      	movs	r2, #8
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1a9b      	subs	r3, r3, r2
 8007372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4a15      	ldr	r2, [pc, #84]	@ (80073d4 <prvHeapInit+0xb4>)
 8007380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007382:	4b14      	ldr	r3, [pc, #80]	@ (80073d4 <prvHeapInit+0xb4>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800738a:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <prvHeapInit+0xb4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073a0:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <prvHeapInit+0xb4>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4a0a      	ldr	r2, [pc, #40]	@ (80073d8 <prvHeapInit+0xb8>)
 80073ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	4a09      	ldr	r2, [pc, #36]	@ (80073dc <prvHeapInit+0xbc>)
 80073b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073b8:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <prvHeapInit+0xc0>)
 80073ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80073be:	601a      	str	r2, [r3, #0]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	200010c8 	.word	0x200010c8
 80073d0:	20004cc8 	.word	0x20004cc8
 80073d4:	20004cd0 	.word	0x20004cd0
 80073d8:	20004cd8 	.word	0x20004cd8
 80073dc:	20004cd4 	.word	0x20004cd4
 80073e0:	20004ce4 	.word	0x20004ce4

080073e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073ec:	4b28      	ldr	r3, [pc, #160]	@ (8007490 <prvInsertBlockIntoFreeList+0xac>)
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e002      	b.n	80073f8 <prvInsertBlockIntoFreeList+0x14>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d8f7      	bhi.n	80073f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	4413      	add	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d108      	bne.n	8007426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	441a      	add	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d118      	bne.n	800746c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b15      	ldr	r3, [pc, #84]	@ (8007494 <prvInsertBlockIntoFreeList+0xb0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d00d      	beq.n	8007462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	441a      	add	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e008      	b.n	8007474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007462:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <prvInsertBlockIntoFreeList+0xb0>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e003      	b.n	8007474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	d002      	beq.n	8007482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20004cc8 	.word	0x20004cc8
 8007494:	20004cd0 	.word	0x20004cd0

08007498 <__cvt>:
 8007498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	ec57 6b10 	vmov	r6, r7, d0
 80074a0:	2f00      	cmp	r7, #0
 80074a2:	460c      	mov	r4, r1
 80074a4:	4619      	mov	r1, r3
 80074a6:	463b      	mov	r3, r7
 80074a8:	bfbb      	ittet	lt
 80074aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074ae:	461f      	movlt	r7, r3
 80074b0:	2300      	movge	r3, #0
 80074b2:	232d      	movlt	r3, #45	@ 0x2d
 80074b4:	700b      	strb	r3, [r1, #0]
 80074b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074bc:	4691      	mov	r9, r2
 80074be:	f023 0820 	bic.w	r8, r3, #32
 80074c2:	bfbc      	itt	lt
 80074c4:	4632      	movlt	r2, r6
 80074c6:	4616      	movlt	r6, r2
 80074c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074cc:	d005      	beq.n	80074da <__cvt+0x42>
 80074ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074d2:	d100      	bne.n	80074d6 <__cvt+0x3e>
 80074d4:	3401      	adds	r4, #1
 80074d6:	2102      	movs	r1, #2
 80074d8:	e000      	b.n	80074dc <__cvt+0x44>
 80074da:	2103      	movs	r1, #3
 80074dc:	ab03      	add	r3, sp, #12
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	ab02      	add	r3, sp, #8
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	ec47 6b10 	vmov	d0, r6, r7
 80074e8:	4653      	mov	r3, sl
 80074ea:	4622      	mov	r2, r4
 80074ec:	f000 fe7c 	bl	80081e8 <_dtoa_r>
 80074f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074f4:	4605      	mov	r5, r0
 80074f6:	d119      	bne.n	800752c <__cvt+0x94>
 80074f8:	f019 0f01 	tst.w	r9, #1
 80074fc:	d00e      	beq.n	800751c <__cvt+0x84>
 80074fe:	eb00 0904 	add.w	r9, r0, r4
 8007502:	2200      	movs	r2, #0
 8007504:	2300      	movs	r3, #0
 8007506:	4630      	mov	r0, r6
 8007508:	4639      	mov	r1, r7
 800750a:	f7f9 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800750e:	b108      	cbz	r0, 8007514 <__cvt+0x7c>
 8007510:	f8cd 900c 	str.w	r9, [sp, #12]
 8007514:	2230      	movs	r2, #48	@ 0x30
 8007516:	9b03      	ldr	r3, [sp, #12]
 8007518:	454b      	cmp	r3, r9
 800751a:	d31e      	bcc.n	800755a <__cvt+0xc2>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007520:	1b5b      	subs	r3, r3, r5
 8007522:	4628      	mov	r0, r5
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	b004      	add	sp, #16
 8007528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007530:	eb00 0904 	add.w	r9, r0, r4
 8007534:	d1e5      	bne.n	8007502 <__cvt+0x6a>
 8007536:	7803      	ldrb	r3, [r0, #0]
 8007538:	2b30      	cmp	r3, #48	@ 0x30
 800753a:	d10a      	bne.n	8007552 <__cvt+0xba>
 800753c:	2200      	movs	r2, #0
 800753e:	2300      	movs	r3, #0
 8007540:	4630      	mov	r0, r6
 8007542:	4639      	mov	r1, r7
 8007544:	f7f9 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007548:	b918      	cbnz	r0, 8007552 <__cvt+0xba>
 800754a:	f1c4 0401 	rsb	r4, r4, #1
 800754e:	f8ca 4000 	str.w	r4, [sl]
 8007552:	f8da 3000 	ldr.w	r3, [sl]
 8007556:	4499      	add	r9, r3
 8007558:	e7d3      	b.n	8007502 <__cvt+0x6a>
 800755a:	1c59      	adds	r1, r3, #1
 800755c:	9103      	str	r1, [sp, #12]
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e7d9      	b.n	8007516 <__cvt+0x7e>

08007562 <__exponent>:
 8007562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007564:	2900      	cmp	r1, #0
 8007566:	bfba      	itte	lt
 8007568:	4249      	neglt	r1, r1
 800756a:	232d      	movlt	r3, #45	@ 0x2d
 800756c:	232b      	movge	r3, #43	@ 0x2b
 800756e:	2909      	cmp	r1, #9
 8007570:	7002      	strb	r2, [r0, #0]
 8007572:	7043      	strb	r3, [r0, #1]
 8007574:	dd29      	ble.n	80075ca <__exponent+0x68>
 8007576:	f10d 0307 	add.w	r3, sp, #7
 800757a:	461d      	mov	r5, r3
 800757c:	270a      	movs	r7, #10
 800757e:	461a      	mov	r2, r3
 8007580:	fbb1 f6f7 	udiv	r6, r1, r7
 8007584:	fb07 1416 	mls	r4, r7, r6, r1
 8007588:	3430      	adds	r4, #48	@ 0x30
 800758a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800758e:	460c      	mov	r4, r1
 8007590:	2c63      	cmp	r4, #99	@ 0x63
 8007592:	f103 33ff 	add.w	r3, r3, #4294967295
 8007596:	4631      	mov	r1, r6
 8007598:	dcf1      	bgt.n	800757e <__exponent+0x1c>
 800759a:	3130      	adds	r1, #48	@ 0x30
 800759c:	1e94      	subs	r4, r2, #2
 800759e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075a2:	1c41      	adds	r1, r0, #1
 80075a4:	4623      	mov	r3, r4
 80075a6:	42ab      	cmp	r3, r5
 80075a8:	d30a      	bcc.n	80075c0 <__exponent+0x5e>
 80075aa:	f10d 0309 	add.w	r3, sp, #9
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	42ac      	cmp	r4, r5
 80075b2:	bf88      	it	hi
 80075b4:	2300      	movhi	r3, #0
 80075b6:	3302      	adds	r3, #2
 80075b8:	4403      	add	r3, r0
 80075ba:	1a18      	subs	r0, r3, r0
 80075bc:	b003      	add	sp, #12
 80075be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075c8:	e7ed      	b.n	80075a6 <__exponent+0x44>
 80075ca:	2330      	movs	r3, #48	@ 0x30
 80075cc:	3130      	adds	r1, #48	@ 0x30
 80075ce:	7083      	strb	r3, [r0, #2]
 80075d0:	70c1      	strb	r1, [r0, #3]
 80075d2:	1d03      	adds	r3, r0, #4
 80075d4:	e7f1      	b.n	80075ba <__exponent+0x58>
	...

080075d8 <_printf_float>:
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	b08d      	sub	sp, #52	@ 0x34
 80075de:	460c      	mov	r4, r1
 80075e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075e4:	4616      	mov	r6, r2
 80075e6:	461f      	mov	r7, r3
 80075e8:	4605      	mov	r5, r0
 80075ea:	f000 fcef 	bl	8007fcc <_localeconv_r>
 80075ee:	6803      	ldr	r3, [r0, #0]
 80075f0:	9304      	str	r3, [sp, #16]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7f8 fe3c 	bl	8000270 <strlen>
 80075f8:	2300      	movs	r3, #0
 80075fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80075fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007600:	9005      	str	r0, [sp, #20]
 8007602:	3307      	adds	r3, #7
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	f103 0208 	add.w	r2, r3, #8
 800760c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007610:	f8d4 b000 	ldr.w	fp, [r4]
 8007614:	f8c8 2000 	str.w	r2, [r8]
 8007618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800761c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007620:	9307      	str	r3, [sp, #28]
 8007622:	f8cd 8018 	str.w	r8, [sp, #24]
 8007626:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800762a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800762e:	4b9c      	ldr	r3, [pc, #624]	@ (80078a0 <_printf_float+0x2c8>)
 8007630:	f04f 32ff 	mov.w	r2, #4294967295
 8007634:	f7f9 fa7a 	bl	8000b2c <__aeabi_dcmpun>
 8007638:	bb70      	cbnz	r0, 8007698 <_printf_float+0xc0>
 800763a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800763e:	4b98      	ldr	r3, [pc, #608]	@ (80078a0 <_printf_float+0x2c8>)
 8007640:	f04f 32ff 	mov.w	r2, #4294967295
 8007644:	f7f9 fa54 	bl	8000af0 <__aeabi_dcmple>
 8007648:	bb30      	cbnz	r0, 8007698 <_printf_float+0xc0>
 800764a:	2200      	movs	r2, #0
 800764c:	2300      	movs	r3, #0
 800764e:	4640      	mov	r0, r8
 8007650:	4649      	mov	r1, r9
 8007652:	f7f9 fa43 	bl	8000adc <__aeabi_dcmplt>
 8007656:	b110      	cbz	r0, 800765e <_printf_float+0x86>
 8007658:	232d      	movs	r3, #45	@ 0x2d
 800765a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800765e:	4a91      	ldr	r2, [pc, #580]	@ (80078a4 <_printf_float+0x2cc>)
 8007660:	4b91      	ldr	r3, [pc, #580]	@ (80078a8 <_printf_float+0x2d0>)
 8007662:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007666:	bf94      	ite	ls
 8007668:	4690      	movls	r8, r2
 800766a:	4698      	movhi	r8, r3
 800766c:	2303      	movs	r3, #3
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	f02b 0304 	bic.w	r3, fp, #4
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	f04f 0900 	mov.w	r9, #0
 800767a:	9700      	str	r7, [sp, #0]
 800767c:	4633      	mov	r3, r6
 800767e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007680:	4621      	mov	r1, r4
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f9d2 	bl	8007a2c <_printf_common>
 8007688:	3001      	adds	r0, #1
 800768a:	f040 808d 	bne.w	80077a8 <_printf_float+0x1d0>
 800768e:	f04f 30ff 	mov.w	r0, #4294967295
 8007692:	b00d      	add	sp, #52	@ 0x34
 8007694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	4640      	mov	r0, r8
 800769e:	4649      	mov	r1, r9
 80076a0:	f7f9 fa44 	bl	8000b2c <__aeabi_dcmpun>
 80076a4:	b140      	cbz	r0, 80076b8 <_printf_float+0xe0>
 80076a6:	464b      	mov	r3, r9
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bfbc      	itt	lt
 80076ac:	232d      	movlt	r3, #45	@ 0x2d
 80076ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076b2:	4a7e      	ldr	r2, [pc, #504]	@ (80078ac <_printf_float+0x2d4>)
 80076b4:	4b7e      	ldr	r3, [pc, #504]	@ (80078b0 <_printf_float+0x2d8>)
 80076b6:	e7d4      	b.n	8007662 <_printf_float+0x8a>
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076be:	9206      	str	r2, [sp, #24]
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	d13b      	bne.n	800773c <_printf_float+0x164>
 80076c4:	2306      	movs	r3, #6
 80076c6:	6063      	str	r3, [r4, #4]
 80076c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076cc:	2300      	movs	r3, #0
 80076ce:	6022      	str	r2, [r4, #0]
 80076d0:	9303      	str	r3, [sp, #12]
 80076d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80076d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076d8:	ab09      	add	r3, sp, #36	@ 0x24
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	6861      	ldr	r1, [r4, #4]
 80076de:	ec49 8b10 	vmov	d0, r8, r9
 80076e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076e6:	4628      	mov	r0, r5
 80076e8:	f7ff fed6 	bl	8007498 <__cvt>
 80076ec:	9b06      	ldr	r3, [sp, #24]
 80076ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076f0:	2b47      	cmp	r3, #71	@ 0x47
 80076f2:	4680      	mov	r8, r0
 80076f4:	d129      	bne.n	800774a <_printf_float+0x172>
 80076f6:	1cc8      	adds	r0, r1, #3
 80076f8:	db02      	blt.n	8007700 <_printf_float+0x128>
 80076fa:	6863      	ldr	r3, [r4, #4]
 80076fc:	4299      	cmp	r1, r3
 80076fe:	dd41      	ble.n	8007784 <_printf_float+0x1ac>
 8007700:	f1aa 0a02 	sub.w	sl, sl, #2
 8007704:	fa5f fa8a 	uxtb.w	sl, sl
 8007708:	3901      	subs	r1, #1
 800770a:	4652      	mov	r2, sl
 800770c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007710:	9109      	str	r1, [sp, #36]	@ 0x24
 8007712:	f7ff ff26 	bl	8007562 <__exponent>
 8007716:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007718:	1813      	adds	r3, r2, r0
 800771a:	2a01      	cmp	r2, #1
 800771c:	4681      	mov	r9, r0
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	dc02      	bgt.n	8007728 <_printf_float+0x150>
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	07d2      	lsls	r2, r2, #31
 8007726:	d501      	bpl.n	800772c <_printf_float+0x154>
 8007728:	3301      	adds	r3, #1
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0a2      	beq.n	800767a <_printf_float+0xa2>
 8007734:	232d      	movs	r3, #45	@ 0x2d
 8007736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773a:	e79e      	b.n	800767a <_printf_float+0xa2>
 800773c:	9a06      	ldr	r2, [sp, #24]
 800773e:	2a47      	cmp	r2, #71	@ 0x47
 8007740:	d1c2      	bne.n	80076c8 <_printf_float+0xf0>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1c0      	bne.n	80076c8 <_printf_float+0xf0>
 8007746:	2301      	movs	r3, #1
 8007748:	e7bd      	b.n	80076c6 <_printf_float+0xee>
 800774a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800774e:	d9db      	bls.n	8007708 <_printf_float+0x130>
 8007750:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007754:	d118      	bne.n	8007788 <_printf_float+0x1b0>
 8007756:	2900      	cmp	r1, #0
 8007758:	6863      	ldr	r3, [r4, #4]
 800775a:	dd0b      	ble.n	8007774 <_printf_float+0x19c>
 800775c:	6121      	str	r1, [r4, #16]
 800775e:	b913      	cbnz	r3, 8007766 <_printf_float+0x18e>
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	07d0      	lsls	r0, r2, #31
 8007764:	d502      	bpl.n	800776c <_printf_float+0x194>
 8007766:	3301      	adds	r3, #1
 8007768:	440b      	add	r3, r1
 800776a:	6123      	str	r3, [r4, #16]
 800776c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800776e:	f04f 0900 	mov.w	r9, #0
 8007772:	e7db      	b.n	800772c <_printf_float+0x154>
 8007774:	b913      	cbnz	r3, 800777c <_printf_float+0x1a4>
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	07d2      	lsls	r2, r2, #31
 800777a:	d501      	bpl.n	8007780 <_printf_float+0x1a8>
 800777c:	3302      	adds	r3, #2
 800777e:	e7f4      	b.n	800776a <_printf_float+0x192>
 8007780:	2301      	movs	r3, #1
 8007782:	e7f2      	b.n	800776a <_printf_float+0x192>
 8007784:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800778a:	4299      	cmp	r1, r3
 800778c:	db05      	blt.n	800779a <_printf_float+0x1c2>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	6121      	str	r1, [r4, #16]
 8007792:	07d8      	lsls	r0, r3, #31
 8007794:	d5ea      	bpl.n	800776c <_printf_float+0x194>
 8007796:	1c4b      	adds	r3, r1, #1
 8007798:	e7e7      	b.n	800776a <_printf_float+0x192>
 800779a:	2900      	cmp	r1, #0
 800779c:	bfd4      	ite	le
 800779e:	f1c1 0202 	rsble	r2, r1, #2
 80077a2:	2201      	movgt	r2, #1
 80077a4:	4413      	add	r3, r2
 80077a6:	e7e0      	b.n	800776a <_printf_float+0x192>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	055a      	lsls	r2, r3, #21
 80077ac:	d407      	bmi.n	80077be <_printf_float+0x1e6>
 80077ae:	6923      	ldr	r3, [r4, #16]
 80077b0:	4642      	mov	r2, r8
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	d12b      	bne.n	8007814 <_printf_float+0x23c>
 80077bc:	e767      	b.n	800768e <_printf_float+0xb6>
 80077be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077c2:	f240 80dd 	bls.w	8007980 <_printf_float+0x3a8>
 80077c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077ca:	2200      	movs	r2, #0
 80077cc:	2300      	movs	r3, #0
 80077ce:	f7f9 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d033      	beq.n	800783e <_printf_float+0x266>
 80077d6:	4a37      	ldr	r2, [pc, #220]	@ (80078b4 <_printf_float+0x2dc>)
 80077d8:	2301      	movs	r3, #1
 80077da:	4631      	mov	r1, r6
 80077dc:	4628      	mov	r0, r5
 80077de:	47b8      	blx	r7
 80077e0:	3001      	adds	r0, #1
 80077e2:	f43f af54 	beq.w	800768e <_printf_float+0xb6>
 80077e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077ea:	4543      	cmp	r3, r8
 80077ec:	db02      	blt.n	80077f4 <_printf_float+0x21c>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	07d8      	lsls	r0, r3, #31
 80077f2:	d50f      	bpl.n	8007814 <_printf_float+0x23c>
 80077f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077f8:	4631      	mov	r1, r6
 80077fa:	4628      	mov	r0, r5
 80077fc:	47b8      	blx	r7
 80077fe:	3001      	adds	r0, #1
 8007800:	f43f af45 	beq.w	800768e <_printf_float+0xb6>
 8007804:	f04f 0900 	mov.w	r9, #0
 8007808:	f108 38ff 	add.w	r8, r8, #4294967295
 800780c:	f104 0a1a 	add.w	sl, r4, #26
 8007810:	45c8      	cmp	r8, r9
 8007812:	dc09      	bgt.n	8007828 <_printf_float+0x250>
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	079b      	lsls	r3, r3, #30
 8007818:	f100 8103 	bmi.w	8007a22 <_printf_float+0x44a>
 800781c:	68e0      	ldr	r0, [r4, #12]
 800781e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007820:	4298      	cmp	r0, r3
 8007822:	bfb8      	it	lt
 8007824:	4618      	movlt	r0, r3
 8007826:	e734      	b.n	8007692 <_printf_float+0xba>
 8007828:	2301      	movs	r3, #1
 800782a:	4652      	mov	r2, sl
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	f43f af2b 	beq.w	800768e <_printf_float+0xb6>
 8007838:	f109 0901 	add.w	r9, r9, #1
 800783c:	e7e8      	b.n	8007810 <_printf_float+0x238>
 800783e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007840:	2b00      	cmp	r3, #0
 8007842:	dc39      	bgt.n	80078b8 <_printf_float+0x2e0>
 8007844:	4a1b      	ldr	r2, [pc, #108]	@ (80078b4 <_printf_float+0x2dc>)
 8007846:	2301      	movs	r3, #1
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f af1d 	beq.w	800768e <_printf_float+0xb6>
 8007854:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007858:	ea59 0303 	orrs.w	r3, r9, r3
 800785c:	d102      	bne.n	8007864 <_printf_float+0x28c>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	07d9      	lsls	r1, r3, #31
 8007862:	d5d7      	bpl.n	8007814 <_printf_float+0x23c>
 8007864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007868:	4631      	mov	r1, r6
 800786a:	4628      	mov	r0, r5
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f af0d 	beq.w	800768e <_printf_float+0xb6>
 8007874:	f04f 0a00 	mov.w	sl, #0
 8007878:	f104 0b1a 	add.w	fp, r4, #26
 800787c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787e:	425b      	negs	r3, r3
 8007880:	4553      	cmp	r3, sl
 8007882:	dc01      	bgt.n	8007888 <_printf_float+0x2b0>
 8007884:	464b      	mov	r3, r9
 8007886:	e793      	b.n	80077b0 <_printf_float+0x1d8>
 8007888:	2301      	movs	r3, #1
 800788a:	465a      	mov	r2, fp
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f aefb 	beq.w	800768e <_printf_float+0xb6>
 8007898:	f10a 0a01 	add.w	sl, sl, #1
 800789c:	e7ee      	b.n	800787c <_printf_float+0x2a4>
 800789e:	bf00      	nop
 80078a0:	7fefffff 	.word	0x7fefffff
 80078a4:	0800b624 	.word	0x0800b624
 80078a8:	0800b628 	.word	0x0800b628
 80078ac:	0800b62c 	.word	0x0800b62c
 80078b0:	0800b630 	.word	0x0800b630
 80078b4:	0800b634 	.word	0x0800b634
 80078b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078be:	4553      	cmp	r3, sl
 80078c0:	bfa8      	it	ge
 80078c2:	4653      	movge	r3, sl
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	4699      	mov	r9, r3
 80078c8:	dc36      	bgt.n	8007938 <_printf_float+0x360>
 80078ca:	f04f 0b00 	mov.w	fp, #0
 80078ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078d2:	f104 021a 	add.w	r2, r4, #26
 80078d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078d8:	9306      	str	r3, [sp, #24]
 80078da:	eba3 0309 	sub.w	r3, r3, r9
 80078de:	455b      	cmp	r3, fp
 80078e0:	dc31      	bgt.n	8007946 <_printf_float+0x36e>
 80078e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e4:	459a      	cmp	sl, r3
 80078e6:	dc3a      	bgt.n	800795e <_printf_float+0x386>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	07da      	lsls	r2, r3, #31
 80078ec:	d437      	bmi.n	800795e <_printf_float+0x386>
 80078ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f0:	ebaa 0903 	sub.w	r9, sl, r3
 80078f4:	9b06      	ldr	r3, [sp, #24]
 80078f6:	ebaa 0303 	sub.w	r3, sl, r3
 80078fa:	4599      	cmp	r9, r3
 80078fc:	bfa8      	it	ge
 80078fe:	4699      	movge	r9, r3
 8007900:	f1b9 0f00 	cmp.w	r9, #0
 8007904:	dc33      	bgt.n	800796e <_printf_float+0x396>
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800790e:	f104 0b1a 	add.w	fp, r4, #26
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	ebaa 0303 	sub.w	r3, sl, r3
 8007918:	eba3 0309 	sub.w	r3, r3, r9
 800791c:	4543      	cmp	r3, r8
 800791e:	f77f af79 	ble.w	8007814 <_printf_float+0x23c>
 8007922:	2301      	movs	r3, #1
 8007924:	465a      	mov	r2, fp
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f aeae 	beq.w	800768e <_printf_float+0xb6>
 8007932:	f108 0801 	add.w	r8, r8, #1
 8007936:	e7ec      	b.n	8007912 <_printf_float+0x33a>
 8007938:	4642      	mov	r2, r8
 800793a:	4631      	mov	r1, r6
 800793c:	4628      	mov	r0, r5
 800793e:	47b8      	blx	r7
 8007940:	3001      	adds	r0, #1
 8007942:	d1c2      	bne.n	80078ca <_printf_float+0x2f2>
 8007944:	e6a3      	b.n	800768e <_printf_float+0xb6>
 8007946:	2301      	movs	r3, #1
 8007948:	4631      	mov	r1, r6
 800794a:	4628      	mov	r0, r5
 800794c:	9206      	str	r2, [sp, #24]
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	f43f ae9c 	beq.w	800768e <_printf_float+0xb6>
 8007956:	9a06      	ldr	r2, [sp, #24]
 8007958:	f10b 0b01 	add.w	fp, fp, #1
 800795c:	e7bb      	b.n	80078d6 <_printf_float+0x2fe>
 800795e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	d1c0      	bne.n	80078ee <_printf_float+0x316>
 800796c:	e68f      	b.n	800768e <_printf_float+0xb6>
 800796e:	9a06      	ldr	r2, [sp, #24]
 8007970:	464b      	mov	r3, r9
 8007972:	4442      	add	r2, r8
 8007974:	4631      	mov	r1, r6
 8007976:	4628      	mov	r0, r5
 8007978:	47b8      	blx	r7
 800797a:	3001      	adds	r0, #1
 800797c:	d1c3      	bne.n	8007906 <_printf_float+0x32e>
 800797e:	e686      	b.n	800768e <_printf_float+0xb6>
 8007980:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007984:	f1ba 0f01 	cmp.w	sl, #1
 8007988:	dc01      	bgt.n	800798e <_printf_float+0x3b6>
 800798a:	07db      	lsls	r3, r3, #31
 800798c:	d536      	bpl.n	80079fc <_printf_float+0x424>
 800798e:	2301      	movs	r3, #1
 8007990:	4642      	mov	r2, r8
 8007992:	4631      	mov	r1, r6
 8007994:	4628      	mov	r0, r5
 8007996:	47b8      	blx	r7
 8007998:	3001      	adds	r0, #1
 800799a:	f43f ae78 	beq.w	800768e <_printf_float+0xb6>
 800799e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f ae70 	beq.w	800768e <_printf_float+0xb6>
 80079ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ba:	f7f9 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 80079be:	b9c0      	cbnz	r0, 80079f2 <_printf_float+0x41a>
 80079c0:	4653      	mov	r3, sl
 80079c2:	f108 0201 	add.w	r2, r8, #1
 80079c6:	4631      	mov	r1, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	d10c      	bne.n	80079ea <_printf_float+0x412>
 80079d0:	e65d      	b.n	800768e <_printf_float+0xb6>
 80079d2:	2301      	movs	r3, #1
 80079d4:	465a      	mov	r2, fp
 80079d6:	4631      	mov	r1, r6
 80079d8:	4628      	mov	r0, r5
 80079da:	47b8      	blx	r7
 80079dc:	3001      	adds	r0, #1
 80079de:	f43f ae56 	beq.w	800768e <_printf_float+0xb6>
 80079e2:	f108 0801 	add.w	r8, r8, #1
 80079e6:	45d0      	cmp	r8, sl
 80079e8:	dbf3      	blt.n	80079d2 <_printf_float+0x3fa>
 80079ea:	464b      	mov	r3, r9
 80079ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079f0:	e6df      	b.n	80077b2 <_printf_float+0x1da>
 80079f2:	f04f 0800 	mov.w	r8, #0
 80079f6:	f104 0b1a 	add.w	fp, r4, #26
 80079fa:	e7f4      	b.n	80079e6 <_printf_float+0x40e>
 80079fc:	2301      	movs	r3, #1
 80079fe:	4642      	mov	r2, r8
 8007a00:	e7e1      	b.n	80079c6 <_printf_float+0x3ee>
 8007a02:	2301      	movs	r3, #1
 8007a04:	464a      	mov	r2, r9
 8007a06:	4631      	mov	r1, r6
 8007a08:	4628      	mov	r0, r5
 8007a0a:	47b8      	blx	r7
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f43f ae3e 	beq.w	800768e <_printf_float+0xb6>
 8007a12:	f108 0801 	add.w	r8, r8, #1
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a1a:	1a5b      	subs	r3, r3, r1
 8007a1c:	4543      	cmp	r3, r8
 8007a1e:	dcf0      	bgt.n	8007a02 <_printf_float+0x42a>
 8007a20:	e6fc      	b.n	800781c <_printf_float+0x244>
 8007a22:	f04f 0800 	mov.w	r8, #0
 8007a26:	f104 0919 	add.w	r9, r4, #25
 8007a2a:	e7f4      	b.n	8007a16 <_printf_float+0x43e>

08007a2c <_printf_common>:
 8007a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a30:	4616      	mov	r6, r2
 8007a32:	4698      	mov	r8, r3
 8007a34:	688a      	ldr	r2, [r1, #8]
 8007a36:	690b      	ldr	r3, [r1, #16]
 8007a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	bfb8      	it	lt
 8007a40:	4613      	movlt	r3, r2
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a48:	4607      	mov	r7, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	b10a      	cbz	r2, 8007a52 <_printf_common+0x26>
 8007a4e:	3301      	adds	r3, #1
 8007a50:	6033      	str	r3, [r6, #0]
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	0699      	lsls	r1, r3, #26
 8007a56:	bf42      	ittt	mi
 8007a58:	6833      	ldrmi	r3, [r6, #0]
 8007a5a:	3302      	addmi	r3, #2
 8007a5c:	6033      	strmi	r3, [r6, #0]
 8007a5e:	6825      	ldr	r5, [r4, #0]
 8007a60:	f015 0506 	ands.w	r5, r5, #6
 8007a64:	d106      	bne.n	8007a74 <_printf_common+0x48>
 8007a66:	f104 0a19 	add.w	sl, r4, #25
 8007a6a:	68e3      	ldr	r3, [r4, #12]
 8007a6c:	6832      	ldr	r2, [r6, #0]
 8007a6e:	1a9b      	subs	r3, r3, r2
 8007a70:	42ab      	cmp	r3, r5
 8007a72:	dc26      	bgt.n	8007ac2 <_printf_common+0x96>
 8007a74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a78:	6822      	ldr	r2, [r4, #0]
 8007a7a:	3b00      	subs	r3, #0
 8007a7c:	bf18      	it	ne
 8007a7e:	2301      	movne	r3, #1
 8007a80:	0692      	lsls	r2, r2, #26
 8007a82:	d42b      	bmi.n	8007adc <_printf_common+0xb0>
 8007a84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a88:	4641      	mov	r1, r8
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	47c8      	blx	r9
 8007a8e:	3001      	adds	r0, #1
 8007a90:	d01e      	beq.n	8007ad0 <_printf_common+0xa4>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	6922      	ldr	r2, [r4, #16]
 8007a96:	f003 0306 	and.w	r3, r3, #6
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	bf02      	ittt	eq
 8007a9e:	68e5      	ldreq	r5, [r4, #12]
 8007aa0:	6833      	ldreq	r3, [r6, #0]
 8007aa2:	1aed      	subeq	r5, r5, r3
 8007aa4:	68a3      	ldr	r3, [r4, #8]
 8007aa6:	bf0c      	ite	eq
 8007aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aac:	2500      	movne	r5, #0
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	bfc4      	itt	gt
 8007ab2:	1a9b      	subgt	r3, r3, r2
 8007ab4:	18ed      	addgt	r5, r5, r3
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	341a      	adds	r4, #26
 8007aba:	42b5      	cmp	r5, r6
 8007abc:	d11a      	bne.n	8007af4 <_printf_common+0xc8>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	e008      	b.n	8007ad4 <_printf_common+0xa8>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	4641      	mov	r1, r8
 8007ac8:	4638      	mov	r0, r7
 8007aca:	47c8      	blx	r9
 8007acc:	3001      	adds	r0, #1
 8007ace:	d103      	bne.n	8007ad8 <_printf_common+0xac>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad8:	3501      	adds	r5, #1
 8007ada:	e7c6      	b.n	8007a6a <_printf_common+0x3e>
 8007adc:	18e1      	adds	r1, r4, r3
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	2030      	movs	r0, #48	@ 0x30
 8007ae2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ae6:	4422      	add	r2, r4
 8007ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007aec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007af0:	3302      	adds	r3, #2
 8007af2:	e7c7      	b.n	8007a84 <_printf_common+0x58>
 8007af4:	2301      	movs	r3, #1
 8007af6:	4622      	mov	r2, r4
 8007af8:	4641      	mov	r1, r8
 8007afa:	4638      	mov	r0, r7
 8007afc:	47c8      	blx	r9
 8007afe:	3001      	adds	r0, #1
 8007b00:	d0e6      	beq.n	8007ad0 <_printf_common+0xa4>
 8007b02:	3601      	adds	r6, #1
 8007b04:	e7d9      	b.n	8007aba <_printf_common+0x8e>
	...

08007b08 <_printf_i>:
 8007b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0c:	7e0f      	ldrb	r7, [r1, #24]
 8007b0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b10:	2f78      	cmp	r7, #120	@ 0x78
 8007b12:	4691      	mov	r9, r2
 8007b14:	4680      	mov	r8, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	469a      	mov	sl, r3
 8007b1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b1e:	d807      	bhi.n	8007b30 <_printf_i+0x28>
 8007b20:	2f62      	cmp	r7, #98	@ 0x62
 8007b22:	d80a      	bhi.n	8007b3a <_printf_i+0x32>
 8007b24:	2f00      	cmp	r7, #0
 8007b26:	f000 80d2 	beq.w	8007cce <_printf_i+0x1c6>
 8007b2a:	2f58      	cmp	r7, #88	@ 0x58
 8007b2c:	f000 80b9 	beq.w	8007ca2 <_printf_i+0x19a>
 8007b30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b38:	e03a      	b.n	8007bb0 <_printf_i+0xa8>
 8007b3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b3e:	2b15      	cmp	r3, #21
 8007b40:	d8f6      	bhi.n	8007b30 <_printf_i+0x28>
 8007b42:	a101      	add	r1, pc, #4	@ (adr r1, 8007b48 <_printf_i+0x40>)
 8007b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b48:	08007ba1 	.word	0x08007ba1
 8007b4c:	08007bb5 	.word	0x08007bb5
 8007b50:	08007b31 	.word	0x08007b31
 8007b54:	08007b31 	.word	0x08007b31
 8007b58:	08007b31 	.word	0x08007b31
 8007b5c:	08007b31 	.word	0x08007b31
 8007b60:	08007bb5 	.word	0x08007bb5
 8007b64:	08007b31 	.word	0x08007b31
 8007b68:	08007b31 	.word	0x08007b31
 8007b6c:	08007b31 	.word	0x08007b31
 8007b70:	08007b31 	.word	0x08007b31
 8007b74:	08007cb5 	.word	0x08007cb5
 8007b78:	08007bdf 	.word	0x08007bdf
 8007b7c:	08007c6f 	.word	0x08007c6f
 8007b80:	08007b31 	.word	0x08007b31
 8007b84:	08007b31 	.word	0x08007b31
 8007b88:	08007cd7 	.word	0x08007cd7
 8007b8c:	08007b31 	.word	0x08007b31
 8007b90:	08007bdf 	.word	0x08007bdf
 8007b94:	08007b31 	.word	0x08007b31
 8007b98:	08007b31 	.word	0x08007b31
 8007b9c:	08007c77 	.word	0x08007c77
 8007ba0:	6833      	ldr	r3, [r6, #0]
 8007ba2:	1d1a      	adds	r2, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6032      	str	r2, [r6, #0]
 8007ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e09d      	b.n	8007cf0 <_printf_i+0x1e8>
 8007bb4:	6833      	ldr	r3, [r6, #0]
 8007bb6:	6820      	ldr	r0, [r4, #0]
 8007bb8:	1d19      	adds	r1, r3, #4
 8007bba:	6031      	str	r1, [r6, #0]
 8007bbc:	0606      	lsls	r6, r0, #24
 8007bbe:	d501      	bpl.n	8007bc4 <_printf_i+0xbc>
 8007bc0:	681d      	ldr	r5, [r3, #0]
 8007bc2:	e003      	b.n	8007bcc <_printf_i+0xc4>
 8007bc4:	0645      	lsls	r5, r0, #25
 8007bc6:	d5fb      	bpl.n	8007bc0 <_printf_i+0xb8>
 8007bc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bcc:	2d00      	cmp	r5, #0
 8007bce:	da03      	bge.n	8007bd8 <_printf_i+0xd0>
 8007bd0:	232d      	movs	r3, #45	@ 0x2d
 8007bd2:	426d      	negs	r5, r5
 8007bd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bd8:	4859      	ldr	r0, [pc, #356]	@ (8007d40 <_printf_i+0x238>)
 8007bda:	230a      	movs	r3, #10
 8007bdc:	e011      	b.n	8007c02 <_printf_i+0xfa>
 8007bde:	6821      	ldr	r1, [r4, #0]
 8007be0:	6833      	ldr	r3, [r6, #0]
 8007be2:	0608      	lsls	r0, r1, #24
 8007be4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007be8:	d402      	bmi.n	8007bf0 <_printf_i+0xe8>
 8007bea:	0649      	lsls	r1, r1, #25
 8007bec:	bf48      	it	mi
 8007bee:	b2ad      	uxthmi	r5, r5
 8007bf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bf2:	4853      	ldr	r0, [pc, #332]	@ (8007d40 <_printf_i+0x238>)
 8007bf4:	6033      	str	r3, [r6, #0]
 8007bf6:	bf14      	ite	ne
 8007bf8:	230a      	movne	r3, #10
 8007bfa:	2308      	moveq	r3, #8
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c02:	6866      	ldr	r6, [r4, #4]
 8007c04:	60a6      	str	r6, [r4, #8]
 8007c06:	2e00      	cmp	r6, #0
 8007c08:	bfa2      	ittt	ge
 8007c0a:	6821      	ldrge	r1, [r4, #0]
 8007c0c:	f021 0104 	bicge.w	r1, r1, #4
 8007c10:	6021      	strge	r1, [r4, #0]
 8007c12:	b90d      	cbnz	r5, 8007c18 <_printf_i+0x110>
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	d04b      	beq.n	8007cb0 <_printf_i+0x1a8>
 8007c18:	4616      	mov	r6, r2
 8007c1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c1e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c22:	5dc7      	ldrb	r7, [r0, r7]
 8007c24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c28:	462f      	mov	r7, r5
 8007c2a:	42bb      	cmp	r3, r7
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	d9f4      	bls.n	8007c1a <_printf_i+0x112>
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d10b      	bne.n	8007c4c <_printf_i+0x144>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	07df      	lsls	r7, r3, #31
 8007c38:	d508      	bpl.n	8007c4c <_printf_i+0x144>
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	6861      	ldr	r1, [r4, #4]
 8007c3e:	4299      	cmp	r1, r3
 8007c40:	bfde      	ittt	le
 8007c42:	2330      	movle	r3, #48	@ 0x30
 8007c44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c4c:	1b92      	subs	r2, r2, r6
 8007c4e:	6122      	str	r2, [r4, #16]
 8007c50:	f8cd a000 	str.w	sl, [sp]
 8007c54:	464b      	mov	r3, r9
 8007c56:	aa03      	add	r2, sp, #12
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7ff fee6 	bl	8007a2c <_printf_common>
 8007c60:	3001      	adds	r0, #1
 8007c62:	d14a      	bne.n	8007cfa <_printf_i+0x1f2>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	b004      	add	sp, #16
 8007c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6e:	6823      	ldr	r3, [r4, #0]
 8007c70:	f043 0320 	orr.w	r3, r3, #32
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	4833      	ldr	r0, [pc, #204]	@ (8007d44 <_printf_i+0x23c>)
 8007c78:	2778      	movs	r7, #120	@ 0x78
 8007c7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	6831      	ldr	r1, [r6, #0]
 8007c82:	061f      	lsls	r7, r3, #24
 8007c84:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c88:	d402      	bmi.n	8007c90 <_printf_i+0x188>
 8007c8a:	065f      	lsls	r7, r3, #25
 8007c8c:	bf48      	it	mi
 8007c8e:	b2ad      	uxthmi	r5, r5
 8007c90:	6031      	str	r1, [r6, #0]
 8007c92:	07d9      	lsls	r1, r3, #31
 8007c94:	bf44      	itt	mi
 8007c96:	f043 0320 	orrmi.w	r3, r3, #32
 8007c9a:	6023      	strmi	r3, [r4, #0]
 8007c9c:	b11d      	cbz	r5, 8007ca6 <_printf_i+0x19e>
 8007c9e:	2310      	movs	r3, #16
 8007ca0:	e7ac      	b.n	8007bfc <_printf_i+0xf4>
 8007ca2:	4827      	ldr	r0, [pc, #156]	@ (8007d40 <_printf_i+0x238>)
 8007ca4:	e7e9      	b.n	8007c7a <_printf_i+0x172>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	f023 0320 	bic.w	r3, r3, #32
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	e7f6      	b.n	8007c9e <_printf_i+0x196>
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	e7bd      	b.n	8007c30 <_printf_i+0x128>
 8007cb4:	6833      	ldr	r3, [r6, #0]
 8007cb6:	6825      	ldr	r5, [r4, #0]
 8007cb8:	6961      	ldr	r1, [r4, #20]
 8007cba:	1d18      	adds	r0, r3, #4
 8007cbc:	6030      	str	r0, [r6, #0]
 8007cbe:	062e      	lsls	r6, r5, #24
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	d501      	bpl.n	8007cc8 <_printf_i+0x1c0>
 8007cc4:	6019      	str	r1, [r3, #0]
 8007cc6:	e002      	b.n	8007cce <_printf_i+0x1c6>
 8007cc8:	0668      	lsls	r0, r5, #25
 8007cca:	d5fb      	bpl.n	8007cc4 <_printf_i+0x1bc>
 8007ccc:	8019      	strh	r1, [r3, #0]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	6123      	str	r3, [r4, #16]
 8007cd2:	4616      	mov	r6, r2
 8007cd4:	e7bc      	b.n	8007c50 <_printf_i+0x148>
 8007cd6:	6833      	ldr	r3, [r6, #0]
 8007cd8:	1d1a      	adds	r2, r3, #4
 8007cda:	6032      	str	r2, [r6, #0]
 8007cdc:	681e      	ldr	r6, [r3, #0]
 8007cde:	6862      	ldr	r2, [r4, #4]
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7f8 fa74 	bl	80001d0 <memchr>
 8007ce8:	b108      	cbz	r0, 8007cee <_printf_i+0x1e6>
 8007cea:	1b80      	subs	r0, r0, r6
 8007cec:	6060      	str	r0, [r4, #4]
 8007cee:	6863      	ldr	r3, [r4, #4]
 8007cf0:	6123      	str	r3, [r4, #16]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cf8:	e7aa      	b.n	8007c50 <_printf_i+0x148>
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	4649      	mov	r1, r9
 8007d00:	4640      	mov	r0, r8
 8007d02:	47d0      	blx	sl
 8007d04:	3001      	adds	r0, #1
 8007d06:	d0ad      	beq.n	8007c64 <_printf_i+0x15c>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	079b      	lsls	r3, r3, #30
 8007d0c:	d413      	bmi.n	8007d36 <_printf_i+0x22e>
 8007d0e:	68e0      	ldr	r0, [r4, #12]
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	4298      	cmp	r0, r3
 8007d14:	bfb8      	it	lt
 8007d16:	4618      	movlt	r0, r3
 8007d18:	e7a6      	b.n	8007c68 <_printf_i+0x160>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	4649      	mov	r1, r9
 8007d20:	4640      	mov	r0, r8
 8007d22:	47d0      	blx	sl
 8007d24:	3001      	adds	r0, #1
 8007d26:	d09d      	beq.n	8007c64 <_printf_i+0x15c>
 8007d28:	3501      	adds	r5, #1
 8007d2a:	68e3      	ldr	r3, [r4, #12]
 8007d2c:	9903      	ldr	r1, [sp, #12]
 8007d2e:	1a5b      	subs	r3, r3, r1
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	dcf2      	bgt.n	8007d1a <_printf_i+0x212>
 8007d34:	e7eb      	b.n	8007d0e <_printf_i+0x206>
 8007d36:	2500      	movs	r5, #0
 8007d38:	f104 0619 	add.w	r6, r4, #25
 8007d3c:	e7f5      	b.n	8007d2a <_printf_i+0x222>
 8007d3e:	bf00      	nop
 8007d40:	0800b636 	.word	0x0800b636
 8007d44:	0800b647 	.word	0x0800b647

08007d48 <std>:
 8007d48:	2300      	movs	r3, #0
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d56:	6083      	str	r3, [r0, #8]
 8007d58:	8181      	strh	r1, [r0, #12]
 8007d5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d5c:	81c2      	strh	r2, [r0, #14]
 8007d5e:	6183      	str	r3, [r0, #24]
 8007d60:	4619      	mov	r1, r3
 8007d62:	2208      	movs	r2, #8
 8007d64:	305c      	adds	r0, #92	@ 0x5c
 8007d66:	f000 f928 	bl	8007fba <memset>
 8007d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007da0 <std+0x58>)
 8007d6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007da4 <std+0x5c>)
 8007d70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d72:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <std+0x60>)
 8007d74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <std+0x64>)
 8007d78:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <std+0x68>)
 8007d7c:	6224      	str	r4, [r4, #32]
 8007d7e:	429c      	cmp	r4, r3
 8007d80:	d006      	beq.n	8007d90 <std+0x48>
 8007d82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d86:	4294      	cmp	r4, r2
 8007d88:	d002      	beq.n	8007d90 <std+0x48>
 8007d8a:	33d0      	adds	r3, #208	@ 0xd0
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	d105      	bne.n	8007d9c <std+0x54>
 8007d90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d98:	f000 b98c 	b.w	80080b4 <__retarget_lock_init_recursive>
 8007d9c:	bd10      	pop	{r4, pc}
 8007d9e:	bf00      	nop
 8007da0:	08007f35 	.word	0x08007f35
 8007da4:	08007f57 	.word	0x08007f57
 8007da8:	08007f8f 	.word	0x08007f8f
 8007dac:	08007fb3 	.word	0x08007fb3
 8007db0:	20004ce8 	.word	0x20004ce8

08007db4 <stdio_exit_handler>:
 8007db4:	4a02      	ldr	r2, [pc, #8]	@ (8007dc0 <stdio_exit_handler+0xc>)
 8007db6:	4903      	ldr	r1, [pc, #12]	@ (8007dc4 <stdio_exit_handler+0x10>)
 8007db8:	4803      	ldr	r0, [pc, #12]	@ (8007dc8 <stdio_exit_handler+0x14>)
 8007dba:	f000 b869 	b.w	8007e90 <_fwalk_sglue>
 8007dbe:	bf00      	nop
 8007dc0:	2000001c 	.word	0x2000001c
 8007dc4:	08009a2d 	.word	0x08009a2d
 8007dc8:	2000002c 	.word	0x2000002c

08007dcc <cleanup_stdio>:
 8007dcc:	6841      	ldr	r1, [r0, #4]
 8007dce:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <cleanup_stdio+0x34>)
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	b510      	push	{r4, lr}
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	d001      	beq.n	8007ddc <cleanup_stdio+0x10>
 8007dd8:	f001 fe28 	bl	8009a2c <_fflush_r>
 8007ddc:	68a1      	ldr	r1, [r4, #8]
 8007dde:	4b09      	ldr	r3, [pc, #36]	@ (8007e04 <cleanup_stdio+0x38>)
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d002      	beq.n	8007dea <cleanup_stdio+0x1e>
 8007de4:	4620      	mov	r0, r4
 8007de6:	f001 fe21 	bl	8009a2c <_fflush_r>
 8007dea:	68e1      	ldr	r1, [r4, #12]
 8007dec:	4b06      	ldr	r3, [pc, #24]	@ (8007e08 <cleanup_stdio+0x3c>)
 8007dee:	4299      	cmp	r1, r3
 8007df0:	d004      	beq.n	8007dfc <cleanup_stdio+0x30>
 8007df2:	4620      	mov	r0, r4
 8007df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df8:	f001 be18 	b.w	8009a2c <_fflush_r>
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	bf00      	nop
 8007e00:	20004ce8 	.word	0x20004ce8
 8007e04:	20004d50 	.word	0x20004d50
 8007e08:	20004db8 	.word	0x20004db8

08007e0c <global_stdio_init.part.0>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e3c <global_stdio_init.part.0+0x30>)
 8007e10:	4c0b      	ldr	r4, [pc, #44]	@ (8007e40 <global_stdio_init.part.0+0x34>)
 8007e12:	4a0c      	ldr	r2, [pc, #48]	@ (8007e44 <global_stdio_init.part.0+0x38>)
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	4620      	mov	r0, r4
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2104      	movs	r1, #4
 8007e1c:	f7ff ff94 	bl	8007d48 <std>
 8007e20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e24:	2201      	movs	r2, #1
 8007e26:	2109      	movs	r1, #9
 8007e28:	f7ff ff8e 	bl	8007d48 <std>
 8007e2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e30:	2202      	movs	r2, #2
 8007e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e36:	2112      	movs	r1, #18
 8007e38:	f7ff bf86 	b.w	8007d48 <std>
 8007e3c:	20004e20 	.word	0x20004e20
 8007e40:	20004ce8 	.word	0x20004ce8
 8007e44:	08007db5 	.word	0x08007db5

08007e48 <__sfp_lock_acquire>:
 8007e48:	4801      	ldr	r0, [pc, #4]	@ (8007e50 <__sfp_lock_acquire+0x8>)
 8007e4a:	f000 b934 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8007e4e:	bf00      	nop
 8007e50:	20004e29 	.word	0x20004e29

08007e54 <__sfp_lock_release>:
 8007e54:	4801      	ldr	r0, [pc, #4]	@ (8007e5c <__sfp_lock_release+0x8>)
 8007e56:	f000 b92f 	b.w	80080b8 <__retarget_lock_release_recursive>
 8007e5a:	bf00      	nop
 8007e5c:	20004e29 	.word	0x20004e29

08007e60 <__sinit>:
 8007e60:	b510      	push	{r4, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	f7ff fff0 	bl	8007e48 <__sfp_lock_acquire>
 8007e68:	6a23      	ldr	r3, [r4, #32]
 8007e6a:	b11b      	cbz	r3, 8007e74 <__sinit+0x14>
 8007e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e70:	f7ff bff0 	b.w	8007e54 <__sfp_lock_release>
 8007e74:	4b04      	ldr	r3, [pc, #16]	@ (8007e88 <__sinit+0x28>)
 8007e76:	6223      	str	r3, [r4, #32]
 8007e78:	4b04      	ldr	r3, [pc, #16]	@ (8007e8c <__sinit+0x2c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1f5      	bne.n	8007e6c <__sinit+0xc>
 8007e80:	f7ff ffc4 	bl	8007e0c <global_stdio_init.part.0>
 8007e84:	e7f2      	b.n	8007e6c <__sinit+0xc>
 8007e86:	bf00      	nop
 8007e88:	08007dcd 	.word	0x08007dcd
 8007e8c:	20004e20 	.word	0x20004e20

08007e90 <_fwalk_sglue>:
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e94:	4607      	mov	r7, r0
 8007e96:	4688      	mov	r8, r1
 8007e98:	4614      	mov	r4, r2
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ea0:	f1b9 0901 	subs.w	r9, r9, #1
 8007ea4:	d505      	bpl.n	8007eb2 <_fwalk_sglue+0x22>
 8007ea6:	6824      	ldr	r4, [r4, #0]
 8007ea8:	2c00      	cmp	r4, #0
 8007eaa:	d1f7      	bne.n	8007e9c <_fwalk_sglue+0xc>
 8007eac:	4630      	mov	r0, r6
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d907      	bls.n	8007ec8 <_fwalk_sglue+0x38>
 8007eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	d003      	beq.n	8007ec8 <_fwalk_sglue+0x38>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	47c0      	blx	r8
 8007ec6:	4306      	orrs	r6, r0
 8007ec8:	3568      	adds	r5, #104	@ 0x68
 8007eca:	e7e9      	b.n	8007ea0 <_fwalk_sglue+0x10>

08007ecc <sniprintf>:
 8007ecc:	b40c      	push	{r2, r3}
 8007ece:	b530      	push	{r4, r5, lr}
 8007ed0:	4b17      	ldr	r3, [pc, #92]	@ (8007f30 <sniprintf+0x64>)
 8007ed2:	1e0c      	subs	r4, r1, #0
 8007ed4:	681d      	ldr	r5, [r3, #0]
 8007ed6:	b09d      	sub	sp, #116	@ 0x74
 8007ed8:	da08      	bge.n	8007eec <sniprintf+0x20>
 8007eda:	238b      	movs	r3, #139	@ 0x8b
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	b01d      	add	sp, #116	@ 0x74
 8007ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ee8:	b002      	add	sp, #8
 8007eea:	4770      	bx	lr
 8007eec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ef0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ef4:	bf14      	ite	ne
 8007ef6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007efa:	4623      	moveq	r3, r4
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f04:	9002      	str	r0, [sp, #8]
 8007f06:	9006      	str	r0, [sp, #24]
 8007f08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f0c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f0e:	ab21      	add	r3, sp, #132	@ 0x84
 8007f10:	a902      	add	r1, sp, #8
 8007f12:	4628      	mov	r0, r5
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	f001 fc09 	bl	800972c <_svfiprintf_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	bfbc      	itt	lt
 8007f1e:	238b      	movlt	r3, #139	@ 0x8b
 8007f20:	602b      	strlt	r3, [r5, #0]
 8007f22:	2c00      	cmp	r4, #0
 8007f24:	d0dd      	beq.n	8007ee2 <sniprintf+0x16>
 8007f26:	9b02      	ldr	r3, [sp, #8]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	e7d9      	b.n	8007ee2 <sniprintf+0x16>
 8007f2e:	bf00      	nop
 8007f30:	20000028 	.word	0x20000028

08007f34 <__sread>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	460c      	mov	r4, r1
 8007f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3c:	f000 f86c 	bl	8008018 <_read_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	bfab      	itete	ge
 8007f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f46:	89a3      	ldrhlt	r3, [r4, #12]
 8007f48:	181b      	addge	r3, r3, r0
 8007f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f4e:	bfac      	ite	ge
 8007f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f52:	81a3      	strhlt	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__swrite>:
 8007f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	461f      	mov	r7, r3
 8007f5c:	898b      	ldrh	r3, [r1, #12]
 8007f5e:	05db      	lsls	r3, r3, #23
 8007f60:	4605      	mov	r5, r0
 8007f62:	460c      	mov	r4, r1
 8007f64:	4616      	mov	r6, r2
 8007f66:	d505      	bpl.n	8007f74 <__swrite+0x1e>
 8007f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f000 f840 	bl	8007ff4 <_lseek_r>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f7e:	81a3      	strh	r3, [r4, #12]
 8007f80:	4632      	mov	r2, r6
 8007f82:	463b      	mov	r3, r7
 8007f84:	4628      	mov	r0, r5
 8007f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8a:	f000 b857 	b.w	800803c <_write_r>

08007f8e <__sseek>:
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	460c      	mov	r4, r1
 8007f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f96:	f000 f82d 	bl	8007ff4 <_lseek_r>
 8007f9a:	1c43      	adds	r3, r0, #1
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	bf15      	itete	ne
 8007fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007faa:	81a3      	strheq	r3, [r4, #12]
 8007fac:	bf18      	it	ne
 8007fae:	81a3      	strhne	r3, [r4, #12]
 8007fb0:	bd10      	pop	{r4, pc}

08007fb2 <__sclose>:
 8007fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb6:	f000 b80d 	b.w	8007fd4 <_close_r>

08007fba <memset>:
 8007fba:	4402      	add	r2, r0
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d100      	bne.n	8007fc4 <memset+0xa>
 8007fc2:	4770      	bx	lr
 8007fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc8:	e7f9      	b.n	8007fbe <memset+0x4>
	...

08007fcc <_localeconv_r>:
 8007fcc:	4800      	ldr	r0, [pc, #0]	@ (8007fd0 <_localeconv_r+0x4>)
 8007fce:	4770      	bx	lr
 8007fd0:	20000168 	.word	0x20000168

08007fd4 <_close_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d06      	ldr	r5, [pc, #24]	@ (8007ff0 <_close_r+0x1c>)
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4604      	mov	r4, r0
 8007fdc:	4608      	mov	r0, r1
 8007fde:	602b      	str	r3, [r5, #0]
 8007fe0:	f7f9 fef8 	bl	8001dd4 <_close>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_close_r+0x1a>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_close_r+0x1a>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	20004e24 	.word	0x20004e24

08007ff4 <_lseek_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	@ (8008014 <_lseek_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7f9 ff0d 	bl	8001e22 <_lseek>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_lseek_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_lseek_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	20004e24 	.word	0x20004e24

08008018 <_read_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	@ (8008038 <_read_r+0x20>)
 800801c:	4604      	mov	r4, r0
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7f9 fe9b 	bl	8001d62 <_read>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_read_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_read_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	20004e24 	.word	0x20004e24

0800803c <_write_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4d07      	ldr	r5, [pc, #28]	@ (800805c <_write_r+0x20>)
 8008040:	4604      	mov	r4, r0
 8008042:	4608      	mov	r0, r1
 8008044:	4611      	mov	r1, r2
 8008046:	2200      	movs	r2, #0
 8008048:	602a      	str	r2, [r5, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f7f9 fea6 	bl	8001d9c <_write>
 8008050:	1c43      	adds	r3, r0, #1
 8008052:	d102      	bne.n	800805a <_write_r+0x1e>
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	b103      	cbz	r3, 800805a <_write_r+0x1e>
 8008058:	6023      	str	r3, [r4, #0]
 800805a:	bd38      	pop	{r3, r4, r5, pc}
 800805c:	20004e24 	.word	0x20004e24

08008060 <__errno>:
 8008060:	4b01      	ldr	r3, [pc, #4]	@ (8008068 <__errno+0x8>)
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000028 	.word	0x20000028

0800806c <__libc_init_array>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	4d0d      	ldr	r5, [pc, #52]	@ (80080a4 <__libc_init_array+0x38>)
 8008070:	4c0d      	ldr	r4, [pc, #52]	@ (80080a8 <__libc_init_array+0x3c>)
 8008072:	1b64      	subs	r4, r4, r5
 8008074:	10a4      	asrs	r4, r4, #2
 8008076:	2600      	movs	r6, #0
 8008078:	42a6      	cmp	r6, r4
 800807a:	d109      	bne.n	8008090 <__libc_init_array+0x24>
 800807c:	4d0b      	ldr	r5, [pc, #44]	@ (80080ac <__libc_init_array+0x40>)
 800807e:	4c0c      	ldr	r4, [pc, #48]	@ (80080b0 <__libc_init_array+0x44>)
 8008080:	f002 f864 	bl	800a14c <_init>
 8008084:	1b64      	subs	r4, r4, r5
 8008086:	10a4      	asrs	r4, r4, #2
 8008088:	2600      	movs	r6, #0
 800808a:	42a6      	cmp	r6, r4
 800808c:	d105      	bne.n	800809a <__libc_init_array+0x2e>
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	f855 3b04 	ldr.w	r3, [r5], #4
 8008094:	4798      	blx	r3
 8008096:	3601      	adds	r6, #1
 8008098:	e7ee      	b.n	8008078 <__libc_init_array+0xc>
 800809a:	f855 3b04 	ldr.w	r3, [r5], #4
 800809e:	4798      	blx	r3
 80080a0:	3601      	adds	r6, #1
 80080a2:	e7f2      	b.n	800808a <__libc_init_array+0x1e>
 80080a4:	0800b9a0 	.word	0x0800b9a0
 80080a8:	0800b9a0 	.word	0x0800b9a0
 80080ac:	0800b9a0 	.word	0x0800b9a0
 80080b0:	0800b9a4 	.word	0x0800b9a4

080080b4 <__retarget_lock_init_recursive>:
 80080b4:	4770      	bx	lr

080080b6 <__retarget_lock_acquire_recursive>:
 80080b6:	4770      	bx	lr

080080b8 <__retarget_lock_release_recursive>:
 80080b8:	4770      	bx	lr

080080ba <memcpy>:
 80080ba:	440a      	add	r2, r1
 80080bc:	4291      	cmp	r1, r2
 80080be:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c2:	d100      	bne.n	80080c6 <memcpy+0xc>
 80080c4:	4770      	bx	lr
 80080c6:	b510      	push	{r4, lr}
 80080c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d0:	4291      	cmp	r1, r2
 80080d2:	d1f9      	bne.n	80080c8 <memcpy+0xe>
 80080d4:	bd10      	pop	{r4, pc}

080080d6 <quorem>:
 80080d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080da:	6903      	ldr	r3, [r0, #16]
 80080dc:	690c      	ldr	r4, [r1, #16]
 80080de:	42a3      	cmp	r3, r4
 80080e0:	4607      	mov	r7, r0
 80080e2:	db7e      	blt.n	80081e2 <quorem+0x10c>
 80080e4:	3c01      	subs	r4, #1
 80080e6:	f101 0814 	add.w	r8, r1, #20
 80080ea:	00a3      	lsls	r3, r4, #2
 80080ec:	f100 0514 	add.w	r5, r0, #20
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008100:	3301      	adds	r3, #1
 8008102:	429a      	cmp	r2, r3
 8008104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008108:	fbb2 f6f3 	udiv	r6, r2, r3
 800810c:	d32e      	bcc.n	800816c <quorem+0x96>
 800810e:	f04f 0a00 	mov.w	sl, #0
 8008112:	46c4      	mov	ip, r8
 8008114:	46ae      	mov	lr, r5
 8008116:	46d3      	mov	fp, sl
 8008118:	f85c 3b04 	ldr.w	r3, [ip], #4
 800811c:	b298      	uxth	r0, r3
 800811e:	fb06 a000 	mla	r0, r6, r0, sl
 8008122:	0c02      	lsrs	r2, r0, #16
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	fb06 2303 	mla	r3, r6, r3, r2
 800812a:	f8de 2000 	ldr.w	r2, [lr]
 800812e:	b280      	uxth	r0, r0
 8008130:	b292      	uxth	r2, r2
 8008132:	1a12      	subs	r2, r2, r0
 8008134:	445a      	add	r2, fp
 8008136:	f8de 0000 	ldr.w	r0, [lr]
 800813a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800813e:	b29b      	uxth	r3, r3
 8008140:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008144:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008148:	b292      	uxth	r2, r2
 800814a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800814e:	45e1      	cmp	r9, ip
 8008150:	f84e 2b04 	str.w	r2, [lr], #4
 8008154:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008158:	d2de      	bcs.n	8008118 <quorem+0x42>
 800815a:	9b00      	ldr	r3, [sp, #0]
 800815c:	58eb      	ldr	r3, [r5, r3]
 800815e:	b92b      	cbnz	r3, 800816c <quorem+0x96>
 8008160:	9b01      	ldr	r3, [sp, #4]
 8008162:	3b04      	subs	r3, #4
 8008164:	429d      	cmp	r5, r3
 8008166:	461a      	mov	r2, r3
 8008168:	d32f      	bcc.n	80081ca <quorem+0xf4>
 800816a:	613c      	str	r4, [r7, #16]
 800816c:	4638      	mov	r0, r7
 800816e:	f001 f979 	bl	8009464 <__mcmp>
 8008172:	2800      	cmp	r0, #0
 8008174:	db25      	blt.n	80081c2 <quorem+0xec>
 8008176:	4629      	mov	r1, r5
 8008178:	2000      	movs	r0, #0
 800817a:	f858 2b04 	ldr.w	r2, [r8], #4
 800817e:	f8d1 c000 	ldr.w	ip, [r1]
 8008182:	fa1f fe82 	uxth.w	lr, r2
 8008186:	fa1f f38c 	uxth.w	r3, ip
 800818a:	eba3 030e 	sub.w	r3, r3, lr
 800818e:	4403      	add	r3, r0
 8008190:	0c12      	lsrs	r2, r2, #16
 8008192:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008196:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800819a:	b29b      	uxth	r3, r3
 800819c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a0:	45c1      	cmp	r9, r8
 80081a2:	f841 3b04 	str.w	r3, [r1], #4
 80081a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081aa:	d2e6      	bcs.n	800817a <quorem+0xa4>
 80081ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081b4:	b922      	cbnz	r2, 80081c0 <quorem+0xea>
 80081b6:	3b04      	subs	r3, #4
 80081b8:	429d      	cmp	r5, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	d30b      	bcc.n	80081d6 <quorem+0x100>
 80081be:	613c      	str	r4, [r7, #16]
 80081c0:	3601      	adds	r6, #1
 80081c2:	4630      	mov	r0, r6
 80081c4:	b003      	add	sp, #12
 80081c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	d1cb      	bne.n	800816a <quorem+0x94>
 80081d2:	3c01      	subs	r4, #1
 80081d4:	e7c6      	b.n	8008164 <quorem+0x8e>
 80081d6:	6812      	ldr	r2, [r2, #0]
 80081d8:	3b04      	subs	r3, #4
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d1ef      	bne.n	80081be <quorem+0xe8>
 80081de:	3c01      	subs	r4, #1
 80081e0:	e7ea      	b.n	80081b8 <quorem+0xe2>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e7ee      	b.n	80081c4 <quorem+0xee>
	...

080081e8 <_dtoa_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	69c7      	ldr	r7, [r0, #28]
 80081ee:	b099      	sub	sp, #100	@ 0x64
 80081f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081f4:	ec55 4b10 	vmov	r4, r5, d0
 80081f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80081fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80081fc:	4683      	mov	fp, r0
 80081fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008200:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008202:	b97f      	cbnz	r7, 8008224 <_dtoa_r+0x3c>
 8008204:	2010      	movs	r0, #16
 8008206:	f000 fdfd 	bl	8008e04 <malloc>
 800820a:	4602      	mov	r2, r0
 800820c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008210:	b920      	cbnz	r0, 800821c <_dtoa_r+0x34>
 8008212:	4ba7      	ldr	r3, [pc, #668]	@ (80084b0 <_dtoa_r+0x2c8>)
 8008214:	21ef      	movs	r1, #239	@ 0xef
 8008216:	48a7      	ldr	r0, [pc, #668]	@ (80084b4 <_dtoa_r+0x2cc>)
 8008218:	f001 fc5a 	bl	8009ad0 <__assert_func>
 800821c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008220:	6007      	str	r7, [r0, #0]
 8008222:	60c7      	str	r7, [r0, #12]
 8008224:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008228:	6819      	ldr	r1, [r3, #0]
 800822a:	b159      	cbz	r1, 8008244 <_dtoa_r+0x5c>
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	604a      	str	r2, [r1, #4]
 8008230:	2301      	movs	r3, #1
 8008232:	4093      	lsls	r3, r2
 8008234:	608b      	str	r3, [r1, #8]
 8008236:	4658      	mov	r0, fp
 8008238:	f000 feda 	bl	8008ff0 <_Bfree>
 800823c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	1e2b      	subs	r3, r5, #0
 8008246:	bfb9      	ittee	lt
 8008248:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800824c:	9303      	strlt	r3, [sp, #12]
 800824e:	2300      	movge	r3, #0
 8008250:	6033      	strge	r3, [r6, #0]
 8008252:	9f03      	ldr	r7, [sp, #12]
 8008254:	4b98      	ldr	r3, [pc, #608]	@ (80084b8 <_dtoa_r+0x2d0>)
 8008256:	bfbc      	itt	lt
 8008258:	2201      	movlt	r2, #1
 800825a:	6032      	strlt	r2, [r6, #0]
 800825c:	43bb      	bics	r3, r7
 800825e:	d112      	bne.n	8008286 <_dtoa_r+0x9e>
 8008260:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008262:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800826c:	4323      	orrs	r3, r4
 800826e:	f000 854d 	beq.w	8008d0c <_dtoa_r+0xb24>
 8008272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008274:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80084cc <_dtoa_r+0x2e4>
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 854f 	beq.w	8008d1c <_dtoa_r+0xb34>
 800827e:	f10a 0303 	add.w	r3, sl, #3
 8008282:	f000 bd49 	b.w	8008d18 <_dtoa_r+0xb30>
 8008286:	ed9d 7b02 	vldr	d7, [sp, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	ec51 0b17 	vmov	r0, r1, d7
 8008290:	2300      	movs	r3, #0
 8008292:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008296:	f7f8 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800829a:	4680      	mov	r8, r0
 800829c:	b158      	cbz	r0, 80082b6 <_dtoa_r+0xce>
 800829e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082a0:	2301      	movs	r3, #1
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082a6:	b113      	cbz	r3, 80082ae <_dtoa_r+0xc6>
 80082a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082aa:	4b84      	ldr	r3, [pc, #528]	@ (80084bc <_dtoa_r+0x2d4>)
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80084d0 <_dtoa_r+0x2e8>
 80082b2:	f000 bd33 	b.w	8008d1c <_dtoa_r+0xb34>
 80082b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80082ba:	aa16      	add	r2, sp, #88	@ 0x58
 80082bc:	a917      	add	r1, sp, #92	@ 0x5c
 80082be:	4658      	mov	r0, fp
 80082c0:	f001 f980 	bl	80095c4 <__d2b>
 80082c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80082c8:	4681      	mov	r9, r0
 80082ca:	2e00      	cmp	r6, #0
 80082cc:	d077      	beq.n	80083be <_dtoa_r+0x1d6>
 80082ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80082d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082e8:	4619      	mov	r1, r3
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b74      	ldr	r3, [pc, #464]	@ (80084c0 <_dtoa_r+0x2d8>)
 80082ee:	f7f7 ffcb 	bl	8000288 <__aeabi_dsub>
 80082f2:	a369      	add	r3, pc, #420	@ (adr r3, 8008498 <_dtoa_r+0x2b0>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f97e 	bl	80005f8 <__aeabi_dmul>
 80082fc:	a368      	add	r3, pc, #416	@ (adr r3, 80084a0 <_dtoa_r+0x2b8>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f7f7 ffc3 	bl	800028c <__adddf3>
 8008306:	4604      	mov	r4, r0
 8008308:	4630      	mov	r0, r6
 800830a:	460d      	mov	r5, r1
 800830c:	f7f8 f90a 	bl	8000524 <__aeabi_i2d>
 8008310:	a365      	add	r3, pc, #404	@ (adr r3, 80084a8 <_dtoa_r+0x2c0>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f8 f96f 	bl	80005f8 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4620      	mov	r0, r4
 8008320:	4629      	mov	r1, r5
 8008322:	f7f7 ffb3 	bl	800028c <__adddf3>
 8008326:	4604      	mov	r4, r0
 8008328:	460d      	mov	r5, r1
 800832a:	f7f8 fc15 	bl	8000b58 <__aeabi_d2iz>
 800832e:	2200      	movs	r2, #0
 8008330:	4607      	mov	r7, r0
 8008332:	2300      	movs	r3, #0
 8008334:	4620      	mov	r0, r4
 8008336:	4629      	mov	r1, r5
 8008338:	f7f8 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800833c:	b140      	cbz	r0, 8008350 <_dtoa_r+0x168>
 800833e:	4638      	mov	r0, r7
 8008340:	f7f8 f8f0 	bl	8000524 <__aeabi_i2d>
 8008344:	4622      	mov	r2, r4
 8008346:	462b      	mov	r3, r5
 8008348:	f7f8 fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800834c:	b900      	cbnz	r0, 8008350 <_dtoa_r+0x168>
 800834e:	3f01      	subs	r7, #1
 8008350:	2f16      	cmp	r7, #22
 8008352:	d851      	bhi.n	80083f8 <_dtoa_r+0x210>
 8008354:	4b5b      	ldr	r3, [pc, #364]	@ (80084c4 <_dtoa_r+0x2dc>)
 8008356:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008362:	f7f8 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8008366:	2800      	cmp	r0, #0
 8008368:	d048      	beq.n	80083fc <_dtoa_r+0x214>
 800836a:	3f01      	subs	r7, #1
 800836c:	2300      	movs	r3, #0
 800836e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008370:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008372:	1b9b      	subs	r3, r3, r6
 8008374:	1e5a      	subs	r2, r3, #1
 8008376:	bf44      	itt	mi
 8008378:	f1c3 0801 	rsbmi	r8, r3, #1
 800837c:	2300      	movmi	r3, #0
 800837e:	9208      	str	r2, [sp, #32]
 8008380:	bf54      	ite	pl
 8008382:	f04f 0800 	movpl.w	r8, #0
 8008386:	9308      	strmi	r3, [sp, #32]
 8008388:	2f00      	cmp	r7, #0
 800838a:	db39      	blt.n	8008400 <_dtoa_r+0x218>
 800838c:	9b08      	ldr	r3, [sp, #32]
 800838e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008390:	443b      	add	r3, r7
 8008392:	9308      	str	r3, [sp, #32]
 8008394:	2300      	movs	r3, #0
 8008396:	930a      	str	r3, [sp, #40]	@ 0x28
 8008398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839a:	2b09      	cmp	r3, #9
 800839c:	d864      	bhi.n	8008468 <_dtoa_r+0x280>
 800839e:	2b05      	cmp	r3, #5
 80083a0:	bfc4      	itt	gt
 80083a2:	3b04      	subgt	r3, #4
 80083a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a8:	f1a3 0302 	sub.w	r3, r3, #2
 80083ac:	bfcc      	ite	gt
 80083ae:	2400      	movgt	r4, #0
 80083b0:	2401      	movle	r4, #1
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d863      	bhi.n	800847e <_dtoa_r+0x296>
 80083b6:	e8df f003 	tbb	[pc, r3]
 80083ba:	372a      	.short	0x372a
 80083bc:	5535      	.short	0x5535
 80083be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80083c2:	441e      	add	r6, r3
 80083c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	bfc1      	itttt	gt
 80083cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80083d0:	409f      	lslgt	r7, r3
 80083d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80083d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80083da:	bfd6      	itet	le
 80083dc:	f1c3 0320 	rsble	r3, r3, #32
 80083e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80083e4:	fa04 f003 	lslle.w	r0, r4, r3
 80083e8:	f7f8 f88c 	bl	8000504 <__aeabi_ui2d>
 80083ec:	2201      	movs	r2, #1
 80083ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083f2:	3e01      	subs	r6, #1
 80083f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80083f6:	e777      	b.n	80082e8 <_dtoa_r+0x100>
 80083f8:	2301      	movs	r3, #1
 80083fa:	e7b8      	b.n	800836e <_dtoa_r+0x186>
 80083fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80083fe:	e7b7      	b.n	8008370 <_dtoa_r+0x188>
 8008400:	427b      	negs	r3, r7
 8008402:	930a      	str	r3, [sp, #40]	@ 0x28
 8008404:	2300      	movs	r3, #0
 8008406:	eba8 0807 	sub.w	r8, r8, r7
 800840a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800840c:	e7c4      	b.n	8008398 <_dtoa_r+0x1b0>
 800840e:	2300      	movs	r3, #0
 8008410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	dc35      	bgt.n	8008484 <_dtoa_r+0x29c>
 8008418:	2301      	movs	r3, #1
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	9307      	str	r3, [sp, #28]
 800841e:	461a      	mov	r2, r3
 8008420:	920e      	str	r2, [sp, #56]	@ 0x38
 8008422:	e00b      	b.n	800843c <_dtoa_r+0x254>
 8008424:	2301      	movs	r3, #1
 8008426:	e7f3      	b.n	8008410 <_dtoa_r+0x228>
 8008428:	2300      	movs	r3, #0
 800842a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800842c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842e:	18fb      	adds	r3, r7, r3
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	3301      	adds	r3, #1
 8008434:	2b01      	cmp	r3, #1
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	bfb8      	it	lt
 800843a:	2301      	movlt	r3, #1
 800843c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008440:	2100      	movs	r1, #0
 8008442:	2204      	movs	r2, #4
 8008444:	f102 0514 	add.w	r5, r2, #20
 8008448:	429d      	cmp	r5, r3
 800844a:	d91f      	bls.n	800848c <_dtoa_r+0x2a4>
 800844c:	6041      	str	r1, [r0, #4]
 800844e:	4658      	mov	r0, fp
 8008450:	f000 fd8e 	bl	8008f70 <_Balloc>
 8008454:	4682      	mov	sl, r0
 8008456:	2800      	cmp	r0, #0
 8008458:	d13c      	bne.n	80084d4 <_dtoa_r+0x2ec>
 800845a:	4b1b      	ldr	r3, [pc, #108]	@ (80084c8 <_dtoa_r+0x2e0>)
 800845c:	4602      	mov	r2, r0
 800845e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008462:	e6d8      	b.n	8008216 <_dtoa_r+0x2e>
 8008464:	2301      	movs	r3, #1
 8008466:	e7e0      	b.n	800842a <_dtoa_r+0x242>
 8008468:	2401      	movs	r4, #1
 800846a:	2300      	movs	r3, #0
 800846c:	9309      	str	r3, [sp, #36]	@ 0x24
 800846e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008470:	f04f 33ff 	mov.w	r3, #4294967295
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	9307      	str	r3, [sp, #28]
 8008478:	2200      	movs	r2, #0
 800847a:	2312      	movs	r3, #18
 800847c:	e7d0      	b.n	8008420 <_dtoa_r+0x238>
 800847e:	2301      	movs	r3, #1
 8008480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008482:	e7f5      	b.n	8008470 <_dtoa_r+0x288>
 8008484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	9307      	str	r3, [sp, #28]
 800848a:	e7d7      	b.n	800843c <_dtoa_r+0x254>
 800848c:	3101      	adds	r1, #1
 800848e:	0052      	lsls	r2, r2, #1
 8008490:	e7d8      	b.n	8008444 <_dtoa_r+0x25c>
 8008492:	bf00      	nop
 8008494:	f3af 8000 	nop.w
 8008498:	636f4361 	.word	0x636f4361
 800849c:	3fd287a7 	.word	0x3fd287a7
 80084a0:	8b60c8b3 	.word	0x8b60c8b3
 80084a4:	3fc68a28 	.word	0x3fc68a28
 80084a8:	509f79fb 	.word	0x509f79fb
 80084ac:	3fd34413 	.word	0x3fd34413
 80084b0:	0800b665 	.word	0x0800b665
 80084b4:	0800b67c 	.word	0x0800b67c
 80084b8:	7ff00000 	.word	0x7ff00000
 80084bc:	0800b635 	.word	0x0800b635
 80084c0:	3ff80000 	.word	0x3ff80000
 80084c4:	0800b778 	.word	0x0800b778
 80084c8:	0800b6d4 	.word	0x0800b6d4
 80084cc:	0800b661 	.word	0x0800b661
 80084d0:	0800b634 	.word	0x0800b634
 80084d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084d8:	6018      	str	r0, [r3, #0]
 80084da:	9b07      	ldr	r3, [sp, #28]
 80084dc:	2b0e      	cmp	r3, #14
 80084de:	f200 80a4 	bhi.w	800862a <_dtoa_r+0x442>
 80084e2:	2c00      	cmp	r4, #0
 80084e4:	f000 80a1 	beq.w	800862a <_dtoa_r+0x442>
 80084e8:	2f00      	cmp	r7, #0
 80084ea:	dd33      	ble.n	8008554 <_dtoa_r+0x36c>
 80084ec:	4bad      	ldr	r3, [pc, #692]	@ (80087a4 <_dtoa_r+0x5bc>)
 80084ee:	f007 020f 	and.w	r2, r7, #15
 80084f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084f6:	ed93 7b00 	vldr	d7, [r3]
 80084fa:	05f8      	lsls	r0, r7, #23
 80084fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008504:	d516      	bpl.n	8008534 <_dtoa_r+0x34c>
 8008506:	4ba8      	ldr	r3, [pc, #672]	@ (80087a8 <_dtoa_r+0x5c0>)
 8008508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800850c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008510:	f7f8 f99c 	bl	800084c <__aeabi_ddiv>
 8008514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008518:	f004 040f 	and.w	r4, r4, #15
 800851c:	2603      	movs	r6, #3
 800851e:	4da2      	ldr	r5, [pc, #648]	@ (80087a8 <_dtoa_r+0x5c0>)
 8008520:	b954      	cbnz	r4, 8008538 <_dtoa_r+0x350>
 8008522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800852a:	f7f8 f98f 	bl	800084c <__aeabi_ddiv>
 800852e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008532:	e028      	b.n	8008586 <_dtoa_r+0x39e>
 8008534:	2602      	movs	r6, #2
 8008536:	e7f2      	b.n	800851e <_dtoa_r+0x336>
 8008538:	07e1      	lsls	r1, r4, #31
 800853a:	d508      	bpl.n	800854e <_dtoa_r+0x366>
 800853c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800854c:	3601      	adds	r6, #1
 800854e:	1064      	asrs	r4, r4, #1
 8008550:	3508      	adds	r5, #8
 8008552:	e7e5      	b.n	8008520 <_dtoa_r+0x338>
 8008554:	f000 80d2 	beq.w	80086fc <_dtoa_r+0x514>
 8008558:	427c      	negs	r4, r7
 800855a:	4b92      	ldr	r3, [pc, #584]	@ (80087a4 <_dtoa_r+0x5bc>)
 800855c:	4d92      	ldr	r5, [pc, #584]	@ (80087a8 <_dtoa_r+0x5c0>)
 800855e:	f004 020f 	and.w	r2, r4, #15
 8008562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800856e:	f7f8 f843 	bl	80005f8 <__aeabi_dmul>
 8008572:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008576:	1124      	asrs	r4, r4, #4
 8008578:	2300      	movs	r3, #0
 800857a:	2602      	movs	r6, #2
 800857c:	2c00      	cmp	r4, #0
 800857e:	f040 80b2 	bne.w	80086e6 <_dtoa_r+0x4fe>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1d3      	bne.n	800852e <_dtoa_r+0x346>
 8008586:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008588:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 80b7 	beq.w	8008700 <_dtoa_r+0x518>
 8008592:	4b86      	ldr	r3, [pc, #536]	@ (80087ac <_dtoa_r+0x5c4>)
 8008594:	2200      	movs	r2, #0
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f8 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f000 80ae 	beq.w	8008700 <_dtoa_r+0x518>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 80aa 	beq.w	8008700 <_dtoa_r+0x518>
 80085ac:	9b00      	ldr	r3, [sp, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dd37      	ble.n	8008622 <_dtoa_r+0x43a>
 80085b2:	1e7b      	subs	r3, r7, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	4620      	mov	r0, r4
 80085b8:	4b7d      	ldr	r3, [pc, #500]	@ (80087b0 <_dtoa_r+0x5c8>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	4629      	mov	r1, r5
 80085be:	f7f8 f81b 	bl	80005f8 <__aeabi_dmul>
 80085c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085c6:	9c00      	ldr	r4, [sp, #0]
 80085c8:	3601      	adds	r6, #1
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7f7 ffaa 	bl	8000524 <__aeabi_i2d>
 80085d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d4:	f7f8 f810 	bl	80005f8 <__aeabi_dmul>
 80085d8:	4b76      	ldr	r3, [pc, #472]	@ (80087b4 <_dtoa_r+0x5cc>)
 80085da:	2200      	movs	r2, #0
 80085dc:	f7f7 fe56 	bl	800028c <__adddf3>
 80085e0:	4605      	mov	r5, r0
 80085e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085e6:	2c00      	cmp	r4, #0
 80085e8:	f040 808d 	bne.w	8008706 <_dtoa_r+0x51e>
 80085ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f0:	4b71      	ldr	r3, [pc, #452]	@ (80087b8 <_dtoa_r+0x5d0>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f7 fe48 	bl	8000288 <__aeabi_dsub>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008600:	462a      	mov	r2, r5
 8008602:	4633      	mov	r3, r6
 8008604:	f7f8 fa88 	bl	8000b18 <__aeabi_dcmpgt>
 8008608:	2800      	cmp	r0, #0
 800860a:	f040 828b 	bne.w	8008b24 <_dtoa_r+0x93c>
 800860e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008612:	462a      	mov	r2, r5
 8008614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008618:	f7f8 fa60 	bl	8000adc <__aeabi_dcmplt>
 800861c:	2800      	cmp	r0, #0
 800861e:	f040 8128 	bne.w	8008872 <_dtoa_r+0x68a>
 8008622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800862a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800862c:	2b00      	cmp	r3, #0
 800862e:	f2c0 815a 	blt.w	80088e6 <_dtoa_r+0x6fe>
 8008632:	2f0e      	cmp	r7, #14
 8008634:	f300 8157 	bgt.w	80088e6 <_dtoa_r+0x6fe>
 8008638:	4b5a      	ldr	r3, [pc, #360]	@ (80087a4 <_dtoa_r+0x5bc>)
 800863a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800863e:	ed93 7b00 	vldr	d7, [r3]
 8008642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	ed8d 7b00 	vstr	d7, [sp]
 800864a:	da03      	bge.n	8008654 <_dtoa_r+0x46c>
 800864c:	9b07      	ldr	r3, [sp, #28]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f340 8101 	ble.w	8008856 <_dtoa_r+0x66e>
 8008654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008658:	4656      	mov	r6, sl
 800865a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f8 f8f3 	bl	800084c <__aeabi_ddiv>
 8008666:	f7f8 fa77 	bl	8000b58 <__aeabi_d2iz>
 800866a:	4680      	mov	r8, r0
 800866c:	f7f7 ff5a 	bl	8000524 <__aeabi_i2d>
 8008670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008674:	f7f7 ffc0 	bl	80005f8 <__aeabi_dmul>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4620      	mov	r0, r4
 800867e:	4629      	mov	r1, r5
 8008680:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008684:	f7f7 fe00 	bl	8000288 <__aeabi_dsub>
 8008688:	f806 4b01 	strb.w	r4, [r6], #1
 800868c:	9d07      	ldr	r5, [sp, #28]
 800868e:	eba6 040a 	sub.w	r4, r6, sl
 8008692:	42a5      	cmp	r5, r4
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	f040 8117 	bne.w	80088ca <_dtoa_r+0x6e2>
 800869c:	f7f7 fdf6 	bl	800028c <__adddf3>
 80086a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086a4:	4604      	mov	r4, r0
 80086a6:	460d      	mov	r5, r1
 80086a8:	f7f8 fa36 	bl	8000b18 <__aeabi_dcmpgt>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f040 80f9 	bne.w	80088a4 <_dtoa_r+0x6bc>
 80086b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f8 fa05 	bl	8000ac8 <__aeabi_dcmpeq>
 80086be:	b118      	cbz	r0, 80086c8 <_dtoa_r+0x4e0>
 80086c0:	f018 0f01 	tst.w	r8, #1
 80086c4:	f040 80ee 	bne.w	80088a4 <_dtoa_r+0x6bc>
 80086c8:	4649      	mov	r1, r9
 80086ca:	4658      	mov	r0, fp
 80086cc:	f000 fc90 	bl	8008ff0 <_Bfree>
 80086d0:	2300      	movs	r3, #0
 80086d2:	7033      	strb	r3, [r6, #0]
 80086d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80086d6:	3701      	adds	r7, #1
 80086d8:	601f      	str	r7, [r3, #0]
 80086da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 831d 	beq.w	8008d1c <_dtoa_r+0xb34>
 80086e2:	601e      	str	r6, [r3, #0]
 80086e4:	e31a      	b.n	8008d1c <_dtoa_r+0xb34>
 80086e6:	07e2      	lsls	r2, r4, #31
 80086e8:	d505      	bpl.n	80086f6 <_dtoa_r+0x50e>
 80086ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086ee:	f7f7 ff83 	bl	80005f8 <__aeabi_dmul>
 80086f2:	3601      	adds	r6, #1
 80086f4:	2301      	movs	r3, #1
 80086f6:	1064      	asrs	r4, r4, #1
 80086f8:	3508      	adds	r5, #8
 80086fa:	e73f      	b.n	800857c <_dtoa_r+0x394>
 80086fc:	2602      	movs	r6, #2
 80086fe:	e742      	b.n	8008586 <_dtoa_r+0x39e>
 8008700:	9c07      	ldr	r4, [sp, #28]
 8008702:	9704      	str	r7, [sp, #16]
 8008704:	e761      	b.n	80085ca <_dtoa_r+0x3e2>
 8008706:	4b27      	ldr	r3, [pc, #156]	@ (80087a4 <_dtoa_r+0x5bc>)
 8008708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800870a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800870e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008712:	4454      	add	r4, sl
 8008714:	2900      	cmp	r1, #0
 8008716:	d053      	beq.n	80087c0 <_dtoa_r+0x5d8>
 8008718:	4928      	ldr	r1, [pc, #160]	@ (80087bc <_dtoa_r+0x5d4>)
 800871a:	2000      	movs	r0, #0
 800871c:	f7f8 f896 	bl	800084c <__aeabi_ddiv>
 8008720:	4633      	mov	r3, r6
 8008722:	462a      	mov	r2, r5
 8008724:	f7f7 fdb0 	bl	8000288 <__aeabi_dsub>
 8008728:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800872c:	4656      	mov	r6, sl
 800872e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008732:	f7f8 fa11 	bl	8000b58 <__aeabi_d2iz>
 8008736:	4605      	mov	r5, r0
 8008738:	f7f7 fef4 	bl	8000524 <__aeabi_i2d>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008744:	f7f7 fda0 	bl	8000288 <__aeabi_dsub>
 8008748:	3530      	adds	r5, #48	@ 0x30
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008752:	f806 5b01 	strb.w	r5, [r6], #1
 8008756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800875a:	f7f8 f9bf 	bl	8000adc <__aeabi_dcmplt>
 800875e:	2800      	cmp	r0, #0
 8008760:	d171      	bne.n	8008846 <_dtoa_r+0x65e>
 8008762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008766:	4911      	ldr	r1, [pc, #68]	@ (80087ac <_dtoa_r+0x5c4>)
 8008768:	2000      	movs	r0, #0
 800876a:	f7f7 fd8d 	bl	8000288 <__aeabi_dsub>
 800876e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008772:	f7f8 f9b3 	bl	8000adc <__aeabi_dcmplt>
 8008776:	2800      	cmp	r0, #0
 8008778:	f040 8095 	bne.w	80088a6 <_dtoa_r+0x6be>
 800877c:	42a6      	cmp	r6, r4
 800877e:	f43f af50 	beq.w	8008622 <_dtoa_r+0x43a>
 8008782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008786:	4b0a      	ldr	r3, [pc, #40]	@ (80087b0 <_dtoa_r+0x5c8>)
 8008788:	2200      	movs	r2, #0
 800878a:	f7f7 ff35 	bl	80005f8 <__aeabi_dmul>
 800878e:	4b08      	ldr	r3, [pc, #32]	@ (80087b0 <_dtoa_r+0x5c8>)
 8008790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008794:	2200      	movs	r2, #0
 8008796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a2:	e7c4      	b.n	800872e <_dtoa_r+0x546>
 80087a4:	0800b778 	.word	0x0800b778
 80087a8:	0800b750 	.word	0x0800b750
 80087ac:	3ff00000 	.word	0x3ff00000
 80087b0:	40240000 	.word	0x40240000
 80087b4:	401c0000 	.word	0x401c0000
 80087b8:	40140000 	.word	0x40140000
 80087bc:	3fe00000 	.word	0x3fe00000
 80087c0:	4631      	mov	r1, r6
 80087c2:	4628      	mov	r0, r5
 80087c4:	f7f7 ff18 	bl	80005f8 <__aeabi_dmul>
 80087c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80087ce:	4656      	mov	r6, sl
 80087d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d4:	f7f8 f9c0 	bl	8000b58 <__aeabi_d2iz>
 80087d8:	4605      	mov	r5, r0
 80087da:	f7f7 fea3 	bl	8000524 <__aeabi_i2d>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e6:	f7f7 fd4f 	bl	8000288 <__aeabi_dsub>
 80087ea:	3530      	adds	r5, #48	@ 0x30
 80087ec:	f806 5b01 	strb.w	r5, [r6], #1
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	d124      	bne.n	800884a <_dtoa_r+0x662>
 8008800:	4bac      	ldr	r3, [pc, #688]	@ (8008ab4 <_dtoa_r+0x8cc>)
 8008802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008806:	f7f7 fd41 	bl	800028c <__adddf3>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008812:	f7f8 f981 	bl	8000b18 <__aeabi_dcmpgt>
 8008816:	2800      	cmp	r0, #0
 8008818:	d145      	bne.n	80088a6 <_dtoa_r+0x6be>
 800881a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800881e:	49a5      	ldr	r1, [pc, #660]	@ (8008ab4 <_dtoa_r+0x8cc>)
 8008820:	2000      	movs	r0, #0
 8008822:	f7f7 fd31 	bl	8000288 <__aeabi_dsub>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800882e:	f7f8 f955 	bl	8000adc <__aeabi_dcmplt>
 8008832:	2800      	cmp	r0, #0
 8008834:	f43f aef5 	beq.w	8008622 <_dtoa_r+0x43a>
 8008838:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800883a:	1e73      	subs	r3, r6, #1
 800883c:	9315      	str	r3, [sp, #84]	@ 0x54
 800883e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008842:	2b30      	cmp	r3, #48	@ 0x30
 8008844:	d0f8      	beq.n	8008838 <_dtoa_r+0x650>
 8008846:	9f04      	ldr	r7, [sp, #16]
 8008848:	e73e      	b.n	80086c8 <_dtoa_r+0x4e0>
 800884a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ab8 <_dtoa_r+0x8d0>)
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008854:	e7bc      	b.n	80087d0 <_dtoa_r+0x5e8>
 8008856:	d10c      	bne.n	8008872 <_dtoa_r+0x68a>
 8008858:	4b98      	ldr	r3, [pc, #608]	@ (8008abc <_dtoa_r+0x8d4>)
 800885a:	2200      	movs	r2, #0
 800885c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008860:	f7f7 feca 	bl	80005f8 <__aeabi_dmul>
 8008864:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008868:	f7f8 f94c 	bl	8000b04 <__aeabi_dcmpge>
 800886c:	2800      	cmp	r0, #0
 800886e:	f000 8157 	beq.w	8008b20 <_dtoa_r+0x938>
 8008872:	2400      	movs	r4, #0
 8008874:	4625      	mov	r5, r4
 8008876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008878:	43db      	mvns	r3, r3
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	4656      	mov	r6, sl
 800887e:	2700      	movs	r7, #0
 8008880:	4621      	mov	r1, r4
 8008882:	4658      	mov	r0, fp
 8008884:	f000 fbb4 	bl	8008ff0 <_Bfree>
 8008888:	2d00      	cmp	r5, #0
 800888a:	d0dc      	beq.n	8008846 <_dtoa_r+0x65e>
 800888c:	b12f      	cbz	r7, 800889a <_dtoa_r+0x6b2>
 800888e:	42af      	cmp	r7, r5
 8008890:	d003      	beq.n	800889a <_dtoa_r+0x6b2>
 8008892:	4639      	mov	r1, r7
 8008894:	4658      	mov	r0, fp
 8008896:	f000 fbab 	bl	8008ff0 <_Bfree>
 800889a:	4629      	mov	r1, r5
 800889c:	4658      	mov	r0, fp
 800889e:	f000 fba7 	bl	8008ff0 <_Bfree>
 80088a2:	e7d0      	b.n	8008846 <_dtoa_r+0x65e>
 80088a4:	9704      	str	r7, [sp, #16]
 80088a6:	4633      	mov	r3, r6
 80088a8:	461e      	mov	r6, r3
 80088aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088ae:	2a39      	cmp	r2, #57	@ 0x39
 80088b0:	d107      	bne.n	80088c2 <_dtoa_r+0x6da>
 80088b2:	459a      	cmp	sl, r3
 80088b4:	d1f8      	bne.n	80088a8 <_dtoa_r+0x6c0>
 80088b6:	9a04      	ldr	r2, [sp, #16]
 80088b8:	3201      	adds	r2, #1
 80088ba:	9204      	str	r2, [sp, #16]
 80088bc:	2230      	movs	r2, #48	@ 0x30
 80088be:	f88a 2000 	strb.w	r2, [sl]
 80088c2:	781a      	ldrb	r2, [r3, #0]
 80088c4:	3201      	adds	r2, #1
 80088c6:	701a      	strb	r2, [r3, #0]
 80088c8:	e7bd      	b.n	8008846 <_dtoa_r+0x65e>
 80088ca:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab8 <_dtoa_r+0x8d0>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	f7f7 fe93 	bl	80005f8 <__aeabi_dmul>
 80088d2:	2200      	movs	r2, #0
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	f7f8 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80088de:	2800      	cmp	r0, #0
 80088e0:	f43f aebb 	beq.w	800865a <_dtoa_r+0x472>
 80088e4:	e6f0      	b.n	80086c8 <_dtoa_r+0x4e0>
 80088e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	f000 80db 	beq.w	8008aa4 <_dtoa_r+0x8bc>
 80088ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088f0:	2a01      	cmp	r2, #1
 80088f2:	f300 80bf 	bgt.w	8008a74 <_dtoa_r+0x88c>
 80088f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	f000 80b7 	beq.w	8008a6c <_dtoa_r+0x884>
 80088fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008902:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008904:	4646      	mov	r6, r8
 8008906:	9a08      	ldr	r2, [sp, #32]
 8008908:	2101      	movs	r1, #1
 800890a:	441a      	add	r2, r3
 800890c:	4658      	mov	r0, fp
 800890e:	4498      	add	r8, r3
 8008910:	9208      	str	r2, [sp, #32]
 8008912:	f000 fc21 	bl	8009158 <__i2b>
 8008916:	4605      	mov	r5, r0
 8008918:	b15e      	cbz	r6, 8008932 <_dtoa_r+0x74a>
 800891a:	9b08      	ldr	r3, [sp, #32]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd08      	ble.n	8008932 <_dtoa_r+0x74a>
 8008920:	42b3      	cmp	r3, r6
 8008922:	9a08      	ldr	r2, [sp, #32]
 8008924:	bfa8      	it	ge
 8008926:	4633      	movge	r3, r6
 8008928:	eba8 0803 	sub.w	r8, r8, r3
 800892c:	1af6      	subs	r6, r6, r3
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	9308      	str	r3, [sp, #32]
 8008932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008934:	b1f3      	cbz	r3, 8008974 <_dtoa_r+0x78c>
 8008936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80b7 	beq.w	8008aac <_dtoa_r+0x8c4>
 800893e:	b18c      	cbz	r4, 8008964 <_dtoa_r+0x77c>
 8008940:	4629      	mov	r1, r5
 8008942:	4622      	mov	r2, r4
 8008944:	4658      	mov	r0, fp
 8008946:	f000 fcc7 	bl	80092d8 <__pow5mult>
 800894a:	464a      	mov	r2, r9
 800894c:	4601      	mov	r1, r0
 800894e:	4605      	mov	r5, r0
 8008950:	4658      	mov	r0, fp
 8008952:	f000 fc17 	bl	8009184 <__multiply>
 8008956:	4649      	mov	r1, r9
 8008958:	9004      	str	r0, [sp, #16]
 800895a:	4658      	mov	r0, fp
 800895c:	f000 fb48 	bl	8008ff0 <_Bfree>
 8008960:	9b04      	ldr	r3, [sp, #16]
 8008962:	4699      	mov	r9, r3
 8008964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008966:	1b1a      	subs	r2, r3, r4
 8008968:	d004      	beq.n	8008974 <_dtoa_r+0x78c>
 800896a:	4649      	mov	r1, r9
 800896c:	4658      	mov	r0, fp
 800896e:	f000 fcb3 	bl	80092d8 <__pow5mult>
 8008972:	4681      	mov	r9, r0
 8008974:	2101      	movs	r1, #1
 8008976:	4658      	mov	r0, fp
 8008978:	f000 fbee 	bl	8009158 <__i2b>
 800897c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800897e:	4604      	mov	r4, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 81cf 	beq.w	8008d24 <_dtoa_r+0xb3c>
 8008986:	461a      	mov	r2, r3
 8008988:	4601      	mov	r1, r0
 800898a:	4658      	mov	r0, fp
 800898c:	f000 fca4 	bl	80092d8 <__pow5mult>
 8008990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008992:	2b01      	cmp	r3, #1
 8008994:	4604      	mov	r4, r0
 8008996:	f300 8095 	bgt.w	8008ac4 <_dtoa_r+0x8dc>
 800899a:	9b02      	ldr	r3, [sp, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 8087 	bne.w	8008ab0 <_dtoa_r+0x8c8>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f040 8089 	bne.w	8008ac0 <_dtoa_r+0x8d8>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089b4:	0d1b      	lsrs	r3, r3, #20
 80089b6:	051b      	lsls	r3, r3, #20
 80089b8:	b12b      	cbz	r3, 80089c6 <_dtoa_r+0x7de>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	3301      	adds	r3, #1
 80089be:	9308      	str	r3, [sp, #32]
 80089c0:	f108 0801 	add.w	r8, r8, #1
 80089c4:	2301      	movs	r3, #1
 80089c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 81b0 	beq.w	8008d30 <_dtoa_r+0xb48>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089d6:	6918      	ldr	r0, [r3, #16]
 80089d8:	f000 fb72 	bl	80090c0 <__hi0bits>
 80089dc:	f1c0 0020 	rsb	r0, r0, #32
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	4418      	add	r0, r3
 80089e4:	f010 001f 	ands.w	r0, r0, #31
 80089e8:	d077      	beq.n	8008ada <_dtoa_r+0x8f2>
 80089ea:	f1c0 0320 	rsb	r3, r0, #32
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	dd6b      	ble.n	8008aca <_dtoa_r+0x8e2>
 80089f2:	9b08      	ldr	r3, [sp, #32]
 80089f4:	f1c0 001c 	rsb	r0, r0, #28
 80089f8:	4403      	add	r3, r0
 80089fa:	4480      	add	r8, r0
 80089fc:	4406      	add	r6, r0
 80089fe:	9308      	str	r3, [sp, #32]
 8008a00:	f1b8 0f00 	cmp.w	r8, #0
 8008a04:	dd05      	ble.n	8008a12 <_dtoa_r+0x82a>
 8008a06:	4649      	mov	r1, r9
 8008a08:	4642      	mov	r2, r8
 8008a0a:	4658      	mov	r0, fp
 8008a0c:	f000 fcbe 	bl	800938c <__lshift>
 8008a10:	4681      	mov	r9, r0
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dd05      	ble.n	8008a24 <_dtoa_r+0x83c>
 8008a18:	4621      	mov	r1, r4
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	4658      	mov	r0, fp
 8008a1e:	f000 fcb5 	bl	800938c <__lshift>
 8008a22:	4604      	mov	r4, r0
 8008a24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d059      	beq.n	8008ade <_dtoa_r+0x8f6>
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f000 fd19 	bl	8009464 <__mcmp>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	da53      	bge.n	8008ade <_dtoa_r+0x8f6>
 8008a36:	1e7b      	subs	r3, r7, #1
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	220a      	movs	r2, #10
 8008a40:	4658      	mov	r0, fp
 8008a42:	f000 faf7 	bl	8009034 <__multadd>
 8008a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a48:	4681      	mov	r9, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8172 	beq.w	8008d34 <_dtoa_r+0xb4c>
 8008a50:	2300      	movs	r3, #0
 8008a52:	4629      	mov	r1, r5
 8008a54:	220a      	movs	r2, #10
 8008a56:	4658      	mov	r0, fp
 8008a58:	f000 faec 	bl	8009034 <__multadd>
 8008a5c:	9b00      	ldr	r3, [sp, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	4605      	mov	r5, r0
 8008a62:	dc67      	bgt.n	8008b34 <_dtoa_r+0x94c>
 8008a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	dc41      	bgt.n	8008aee <_dtoa_r+0x906>
 8008a6a:	e063      	b.n	8008b34 <_dtoa_r+0x94c>
 8008a6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a72:	e746      	b.n	8008902 <_dtoa_r+0x71a>
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	1e5c      	subs	r4, r3, #1
 8008a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a7a:	42a3      	cmp	r3, r4
 8008a7c:	bfbf      	itttt	lt
 8008a7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a84:	1ae3      	sublt	r3, r4, r3
 8008a86:	bfb4      	ite	lt
 8008a88:	18d2      	addlt	r2, r2, r3
 8008a8a:	1b1c      	subge	r4, r3, r4
 8008a8c:	9b07      	ldr	r3, [sp, #28]
 8008a8e:	bfbc      	itt	lt
 8008a90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a92:	2400      	movlt	r4, #0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bfb5      	itete	lt
 8008a98:	eba8 0603 	sublt.w	r6, r8, r3
 8008a9c:	9b07      	ldrge	r3, [sp, #28]
 8008a9e:	2300      	movlt	r3, #0
 8008aa0:	4646      	movge	r6, r8
 8008aa2:	e730      	b.n	8008906 <_dtoa_r+0x71e>
 8008aa4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008aa6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008aa8:	4646      	mov	r6, r8
 8008aaa:	e735      	b.n	8008918 <_dtoa_r+0x730>
 8008aac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008aae:	e75c      	b.n	800896a <_dtoa_r+0x782>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e788      	b.n	80089c6 <_dtoa_r+0x7de>
 8008ab4:	3fe00000 	.word	0x3fe00000
 8008ab8:	40240000 	.word	0x40240000
 8008abc:	40140000 	.word	0x40140000
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	e780      	b.n	80089c6 <_dtoa_r+0x7de>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ac8:	e782      	b.n	80089d0 <_dtoa_r+0x7e8>
 8008aca:	d099      	beq.n	8008a00 <_dtoa_r+0x818>
 8008acc:	9a08      	ldr	r2, [sp, #32]
 8008ace:	331c      	adds	r3, #28
 8008ad0:	441a      	add	r2, r3
 8008ad2:	4498      	add	r8, r3
 8008ad4:	441e      	add	r6, r3
 8008ad6:	9208      	str	r2, [sp, #32]
 8008ad8:	e792      	b.n	8008a00 <_dtoa_r+0x818>
 8008ada:	4603      	mov	r3, r0
 8008adc:	e7f6      	b.n	8008acc <_dtoa_r+0x8e4>
 8008ade:	9b07      	ldr	r3, [sp, #28]
 8008ae0:	9704      	str	r7, [sp, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dc20      	bgt.n	8008b28 <_dtoa_r+0x940>
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	dd1e      	ble.n	8008b2c <_dtoa_r+0x944>
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f47f aec0 	bne.w	8008876 <_dtoa_r+0x68e>
 8008af6:	4621      	mov	r1, r4
 8008af8:	2205      	movs	r2, #5
 8008afa:	4658      	mov	r0, fp
 8008afc:	f000 fa9a 	bl	8009034 <__multadd>
 8008b00:	4601      	mov	r1, r0
 8008b02:	4604      	mov	r4, r0
 8008b04:	4648      	mov	r0, r9
 8008b06:	f000 fcad 	bl	8009464 <__mcmp>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f77f aeb3 	ble.w	8008876 <_dtoa_r+0x68e>
 8008b10:	4656      	mov	r6, sl
 8008b12:	2331      	movs	r3, #49	@ 0x31
 8008b14:	f806 3b01 	strb.w	r3, [r6], #1
 8008b18:	9b04      	ldr	r3, [sp, #16]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	e6ae      	b.n	800887e <_dtoa_r+0x696>
 8008b20:	9c07      	ldr	r4, [sp, #28]
 8008b22:	9704      	str	r7, [sp, #16]
 8008b24:	4625      	mov	r5, r4
 8008b26:	e7f3      	b.n	8008b10 <_dtoa_r+0x928>
 8008b28:	9b07      	ldr	r3, [sp, #28]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f000 8104 	beq.w	8008d3c <_dtoa_r+0xb54>
 8008b34:	2e00      	cmp	r6, #0
 8008b36:	dd05      	ble.n	8008b44 <_dtoa_r+0x95c>
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4632      	mov	r2, r6
 8008b3c:	4658      	mov	r0, fp
 8008b3e:	f000 fc25 	bl	800938c <__lshift>
 8008b42:	4605      	mov	r5, r0
 8008b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d05a      	beq.n	8008c00 <_dtoa_r+0xa18>
 8008b4a:	6869      	ldr	r1, [r5, #4]
 8008b4c:	4658      	mov	r0, fp
 8008b4e:	f000 fa0f 	bl	8008f70 <_Balloc>
 8008b52:	4606      	mov	r6, r0
 8008b54:	b928      	cbnz	r0, 8008b62 <_dtoa_r+0x97a>
 8008b56:	4b84      	ldr	r3, [pc, #528]	@ (8008d68 <_dtoa_r+0xb80>)
 8008b58:	4602      	mov	r2, r0
 8008b5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b5e:	f7ff bb5a 	b.w	8008216 <_dtoa_r+0x2e>
 8008b62:	692a      	ldr	r2, [r5, #16]
 8008b64:	3202      	adds	r2, #2
 8008b66:	0092      	lsls	r2, r2, #2
 8008b68:	f105 010c 	add.w	r1, r5, #12
 8008b6c:	300c      	adds	r0, #12
 8008b6e:	f7ff faa4 	bl	80080ba <memcpy>
 8008b72:	2201      	movs	r2, #1
 8008b74:	4631      	mov	r1, r6
 8008b76:	4658      	mov	r0, fp
 8008b78:	f000 fc08 	bl	800938c <__lshift>
 8008b7c:	f10a 0301 	add.w	r3, sl, #1
 8008b80:	9307      	str	r3, [sp, #28]
 8008b82:	9b00      	ldr	r3, [sp, #0]
 8008b84:	4453      	add	r3, sl
 8008b86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b88:	9b02      	ldr	r3, [sp, #8]
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	462f      	mov	r7, r5
 8008b90:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b92:	4605      	mov	r5, r0
 8008b94:	9b07      	ldr	r3, [sp, #28]
 8008b96:	4621      	mov	r1, r4
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	4648      	mov	r0, r9
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	f7ff fa9a 	bl	80080d6 <quorem>
 8008ba2:	4639      	mov	r1, r7
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008baa:	4648      	mov	r0, r9
 8008bac:	f000 fc5a 	bl	8009464 <__mcmp>
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	9008      	str	r0, [sp, #32]
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	f000 fc70 	bl	800949c <__mdiff>
 8008bbc:	68c2      	ldr	r2, [r0, #12]
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	bb02      	cbnz	r2, 8008c04 <_dtoa_r+0xa1c>
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4648      	mov	r0, r9
 8008bc6:	f000 fc4d 	bl	8009464 <__mcmp>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4658      	mov	r0, fp
 8008bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bd2:	f000 fa0d 	bl	8008ff0 <_Bfree>
 8008bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bda:	9e07      	ldr	r6, [sp, #28]
 8008bdc:	ea43 0102 	orr.w	r1, r3, r2
 8008be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008be2:	4319      	orrs	r1, r3
 8008be4:	d110      	bne.n	8008c08 <_dtoa_r+0xa20>
 8008be6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bea:	d029      	beq.n	8008c40 <_dtoa_r+0xa58>
 8008bec:	9b08      	ldr	r3, [sp, #32]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dd02      	ble.n	8008bf8 <_dtoa_r+0xa10>
 8008bf2:	9b02      	ldr	r3, [sp, #8]
 8008bf4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008bf8:	9b00      	ldr	r3, [sp, #0]
 8008bfa:	f883 8000 	strb.w	r8, [r3]
 8008bfe:	e63f      	b.n	8008880 <_dtoa_r+0x698>
 8008c00:	4628      	mov	r0, r5
 8008c02:	e7bb      	b.n	8008b7c <_dtoa_r+0x994>
 8008c04:	2201      	movs	r2, #1
 8008c06:	e7e1      	b.n	8008bcc <_dtoa_r+0x9e4>
 8008c08:	9b08      	ldr	r3, [sp, #32]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	db04      	blt.n	8008c18 <_dtoa_r+0xa30>
 8008c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c10:	430b      	orrs	r3, r1
 8008c12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c14:	430b      	orrs	r3, r1
 8008c16:	d120      	bne.n	8008c5a <_dtoa_r+0xa72>
 8008c18:	2a00      	cmp	r2, #0
 8008c1a:	dded      	ble.n	8008bf8 <_dtoa_r+0xa10>
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4658      	mov	r0, fp
 8008c22:	f000 fbb3 	bl	800938c <__lshift>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4681      	mov	r9, r0
 8008c2a:	f000 fc1b 	bl	8009464 <__mcmp>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	dc03      	bgt.n	8008c3a <_dtoa_r+0xa52>
 8008c32:	d1e1      	bne.n	8008bf8 <_dtoa_r+0xa10>
 8008c34:	f018 0f01 	tst.w	r8, #1
 8008c38:	d0de      	beq.n	8008bf8 <_dtoa_r+0xa10>
 8008c3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c3e:	d1d8      	bne.n	8008bf2 <_dtoa_r+0xa0a>
 8008c40:	9a00      	ldr	r2, [sp, #0]
 8008c42:	2339      	movs	r3, #57	@ 0x39
 8008c44:	7013      	strb	r3, [r2, #0]
 8008c46:	4633      	mov	r3, r6
 8008c48:	461e      	mov	r6, r3
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c50:	2a39      	cmp	r2, #57	@ 0x39
 8008c52:	d052      	beq.n	8008cfa <_dtoa_r+0xb12>
 8008c54:	3201      	adds	r2, #1
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	e612      	b.n	8008880 <_dtoa_r+0x698>
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	dd07      	ble.n	8008c6e <_dtoa_r+0xa86>
 8008c5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c62:	d0ed      	beq.n	8008c40 <_dtoa_r+0xa58>
 8008c64:	9a00      	ldr	r2, [sp, #0]
 8008c66:	f108 0301 	add.w	r3, r8, #1
 8008c6a:	7013      	strb	r3, [r2, #0]
 8008c6c:	e608      	b.n	8008880 <_dtoa_r+0x698>
 8008c6e:	9b07      	ldr	r3, [sp, #28]
 8008c70:	9a07      	ldr	r2, [sp, #28]
 8008c72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d028      	beq.n	8008cce <_dtoa_r+0xae6>
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	2300      	movs	r3, #0
 8008c80:	220a      	movs	r2, #10
 8008c82:	4658      	mov	r0, fp
 8008c84:	f000 f9d6 	bl	8009034 <__multadd>
 8008c88:	42af      	cmp	r7, r5
 8008c8a:	4681      	mov	r9, r0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	f04f 020a 	mov.w	r2, #10
 8008c94:	4639      	mov	r1, r7
 8008c96:	4658      	mov	r0, fp
 8008c98:	d107      	bne.n	8008caa <_dtoa_r+0xac2>
 8008c9a:	f000 f9cb 	bl	8009034 <__multadd>
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	9b07      	ldr	r3, [sp, #28]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	9307      	str	r3, [sp, #28]
 8008ca8:	e774      	b.n	8008b94 <_dtoa_r+0x9ac>
 8008caa:	f000 f9c3 	bl	8009034 <__multadd>
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4607      	mov	r7, r0
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	220a      	movs	r2, #10
 8008cb6:	4658      	mov	r0, fp
 8008cb8:	f000 f9bc 	bl	8009034 <__multadd>
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	e7f0      	b.n	8008ca2 <_dtoa_r+0xaba>
 8008cc0:	9b00      	ldr	r3, [sp, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	bfcc      	ite	gt
 8008cc6:	461e      	movgt	r6, r3
 8008cc8:	2601      	movle	r6, #1
 8008cca:	4456      	add	r6, sl
 8008ccc:	2700      	movs	r7, #0
 8008cce:	4649      	mov	r1, r9
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4658      	mov	r0, fp
 8008cd4:	f000 fb5a 	bl	800938c <__lshift>
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4681      	mov	r9, r0
 8008cdc:	f000 fbc2 	bl	8009464 <__mcmp>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	dcb0      	bgt.n	8008c46 <_dtoa_r+0xa5e>
 8008ce4:	d102      	bne.n	8008cec <_dtoa_r+0xb04>
 8008ce6:	f018 0f01 	tst.w	r8, #1
 8008cea:	d1ac      	bne.n	8008c46 <_dtoa_r+0xa5e>
 8008cec:	4633      	mov	r3, r6
 8008cee:	461e      	mov	r6, r3
 8008cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cf4:	2a30      	cmp	r2, #48	@ 0x30
 8008cf6:	d0fa      	beq.n	8008cee <_dtoa_r+0xb06>
 8008cf8:	e5c2      	b.n	8008880 <_dtoa_r+0x698>
 8008cfa:	459a      	cmp	sl, r3
 8008cfc:	d1a4      	bne.n	8008c48 <_dtoa_r+0xa60>
 8008cfe:	9b04      	ldr	r3, [sp, #16]
 8008d00:	3301      	adds	r3, #1
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	2331      	movs	r3, #49	@ 0x31
 8008d06:	f88a 3000 	strb.w	r3, [sl]
 8008d0a:	e5b9      	b.n	8008880 <_dtoa_r+0x698>
 8008d0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d6c <_dtoa_r+0xb84>
 8008d12:	b11b      	cbz	r3, 8008d1c <_dtoa_r+0xb34>
 8008d14:	f10a 0308 	add.w	r3, sl, #8
 8008d18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	4650      	mov	r0, sl
 8008d1e:	b019      	add	sp, #100	@ 0x64
 8008d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	f77f ae37 	ble.w	800899a <_dtoa_r+0x7b2>
 8008d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d30:	2001      	movs	r0, #1
 8008d32:	e655      	b.n	80089e0 <_dtoa_r+0x7f8>
 8008d34:	9b00      	ldr	r3, [sp, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f77f aed6 	ble.w	8008ae8 <_dtoa_r+0x900>
 8008d3c:	4656      	mov	r6, sl
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4648      	mov	r0, r9
 8008d42:	f7ff f9c8 	bl	80080d6 <quorem>
 8008d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d4a:	f806 8b01 	strb.w	r8, [r6], #1
 8008d4e:	9b00      	ldr	r3, [sp, #0]
 8008d50:	eba6 020a 	sub.w	r2, r6, sl
 8008d54:	4293      	cmp	r3, r2
 8008d56:	ddb3      	ble.n	8008cc0 <_dtoa_r+0xad8>
 8008d58:	4649      	mov	r1, r9
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	4658      	mov	r0, fp
 8008d60:	f000 f968 	bl	8009034 <__multadd>
 8008d64:	4681      	mov	r9, r0
 8008d66:	e7ea      	b.n	8008d3e <_dtoa_r+0xb56>
 8008d68:	0800b6d4 	.word	0x0800b6d4
 8008d6c:	0800b658 	.word	0x0800b658

08008d70 <_free_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4605      	mov	r5, r0
 8008d74:	2900      	cmp	r1, #0
 8008d76:	d041      	beq.n	8008dfc <_free_r+0x8c>
 8008d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d7c:	1f0c      	subs	r4, r1, #4
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	bfb8      	it	lt
 8008d82:	18e4      	addlt	r4, r4, r3
 8008d84:	f000 f8e8 	bl	8008f58 <__malloc_lock>
 8008d88:	4a1d      	ldr	r2, [pc, #116]	@ (8008e00 <_free_r+0x90>)
 8008d8a:	6813      	ldr	r3, [r2, #0]
 8008d8c:	b933      	cbnz	r3, 8008d9c <_free_r+0x2c>
 8008d8e:	6063      	str	r3, [r4, #4]
 8008d90:	6014      	str	r4, [r2, #0]
 8008d92:	4628      	mov	r0, r5
 8008d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d98:	f000 b8e4 	b.w	8008f64 <__malloc_unlock>
 8008d9c:	42a3      	cmp	r3, r4
 8008d9e:	d908      	bls.n	8008db2 <_free_r+0x42>
 8008da0:	6820      	ldr	r0, [r4, #0]
 8008da2:	1821      	adds	r1, r4, r0
 8008da4:	428b      	cmp	r3, r1
 8008da6:	bf01      	itttt	eq
 8008da8:	6819      	ldreq	r1, [r3, #0]
 8008daa:	685b      	ldreq	r3, [r3, #4]
 8008dac:	1809      	addeq	r1, r1, r0
 8008dae:	6021      	streq	r1, [r4, #0]
 8008db0:	e7ed      	b.n	8008d8e <_free_r+0x1e>
 8008db2:	461a      	mov	r2, r3
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	b10b      	cbz	r3, 8008dbc <_free_r+0x4c>
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	d9fa      	bls.n	8008db2 <_free_r+0x42>
 8008dbc:	6811      	ldr	r1, [r2, #0]
 8008dbe:	1850      	adds	r0, r2, r1
 8008dc0:	42a0      	cmp	r0, r4
 8008dc2:	d10b      	bne.n	8008ddc <_free_r+0x6c>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	4401      	add	r1, r0
 8008dc8:	1850      	adds	r0, r2, r1
 8008dca:	4283      	cmp	r3, r0
 8008dcc:	6011      	str	r1, [r2, #0]
 8008dce:	d1e0      	bne.n	8008d92 <_free_r+0x22>
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	6053      	str	r3, [r2, #4]
 8008dd6:	4408      	add	r0, r1
 8008dd8:	6010      	str	r0, [r2, #0]
 8008dda:	e7da      	b.n	8008d92 <_free_r+0x22>
 8008ddc:	d902      	bls.n	8008de4 <_free_r+0x74>
 8008dde:	230c      	movs	r3, #12
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	e7d6      	b.n	8008d92 <_free_r+0x22>
 8008de4:	6820      	ldr	r0, [r4, #0]
 8008de6:	1821      	adds	r1, r4, r0
 8008de8:	428b      	cmp	r3, r1
 8008dea:	bf04      	itt	eq
 8008dec:	6819      	ldreq	r1, [r3, #0]
 8008dee:	685b      	ldreq	r3, [r3, #4]
 8008df0:	6063      	str	r3, [r4, #4]
 8008df2:	bf04      	itt	eq
 8008df4:	1809      	addeq	r1, r1, r0
 8008df6:	6021      	streq	r1, [r4, #0]
 8008df8:	6054      	str	r4, [r2, #4]
 8008dfa:	e7ca      	b.n	8008d92 <_free_r+0x22>
 8008dfc:	bd38      	pop	{r3, r4, r5, pc}
 8008dfe:	bf00      	nop
 8008e00:	20004e30 	.word	0x20004e30

08008e04 <malloc>:
 8008e04:	4b02      	ldr	r3, [pc, #8]	@ (8008e10 <malloc+0xc>)
 8008e06:	4601      	mov	r1, r0
 8008e08:	6818      	ldr	r0, [r3, #0]
 8008e0a:	f000 b825 	b.w	8008e58 <_malloc_r>
 8008e0e:	bf00      	nop
 8008e10:	20000028 	.word	0x20000028

08008e14 <sbrk_aligned>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4e0f      	ldr	r6, [pc, #60]	@ (8008e54 <sbrk_aligned+0x40>)
 8008e18:	460c      	mov	r4, r1
 8008e1a:	6831      	ldr	r1, [r6, #0]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	b911      	cbnz	r1, 8008e26 <sbrk_aligned+0x12>
 8008e20:	f000 fe46 	bl	8009ab0 <_sbrk_r>
 8008e24:	6030      	str	r0, [r6, #0]
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 fe41 	bl	8009ab0 <_sbrk_r>
 8008e2e:	1c43      	adds	r3, r0, #1
 8008e30:	d103      	bne.n	8008e3a <sbrk_aligned+0x26>
 8008e32:	f04f 34ff 	mov.w	r4, #4294967295
 8008e36:	4620      	mov	r0, r4
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
 8008e3a:	1cc4      	adds	r4, r0, #3
 8008e3c:	f024 0403 	bic.w	r4, r4, #3
 8008e40:	42a0      	cmp	r0, r4
 8008e42:	d0f8      	beq.n	8008e36 <sbrk_aligned+0x22>
 8008e44:	1a21      	subs	r1, r4, r0
 8008e46:	4628      	mov	r0, r5
 8008e48:	f000 fe32 	bl	8009ab0 <_sbrk_r>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d1f2      	bne.n	8008e36 <sbrk_aligned+0x22>
 8008e50:	e7ef      	b.n	8008e32 <sbrk_aligned+0x1e>
 8008e52:	bf00      	nop
 8008e54:	20004e2c 	.word	0x20004e2c

08008e58 <_malloc_r>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	1ccd      	adds	r5, r1, #3
 8008e5e:	f025 0503 	bic.w	r5, r5, #3
 8008e62:	3508      	adds	r5, #8
 8008e64:	2d0c      	cmp	r5, #12
 8008e66:	bf38      	it	cc
 8008e68:	250c      	movcc	r5, #12
 8008e6a:	2d00      	cmp	r5, #0
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	db01      	blt.n	8008e74 <_malloc_r+0x1c>
 8008e70:	42a9      	cmp	r1, r5
 8008e72:	d904      	bls.n	8008e7e <_malloc_r+0x26>
 8008e74:	230c      	movs	r3, #12
 8008e76:	6033      	str	r3, [r6, #0]
 8008e78:	2000      	movs	r0, #0
 8008e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f54 <_malloc_r+0xfc>
 8008e82:	f000 f869 	bl	8008f58 <__malloc_lock>
 8008e86:	f8d8 3000 	ldr.w	r3, [r8]
 8008e8a:	461c      	mov	r4, r3
 8008e8c:	bb44      	cbnz	r4, 8008ee0 <_malloc_r+0x88>
 8008e8e:	4629      	mov	r1, r5
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7ff ffbf 	bl	8008e14 <sbrk_aligned>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	4604      	mov	r4, r0
 8008e9a:	d158      	bne.n	8008f4e <_malloc_r+0xf6>
 8008e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8008ea0:	4627      	mov	r7, r4
 8008ea2:	2f00      	cmp	r7, #0
 8008ea4:	d143      	bne.n	8008f2e <_malloc_r+0xd6>
 8008ea6:	2c00      	cmp	r4, #0
 8008ea8:	d04b      	beq.n	8008f42 <_malloc_r+0xea>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	4639      	mov	r1, r7
 8008eae:	4630      	mov	r0, r6
 8008eb0:	eb04 0903 	add.w	r9, r4, r3
 8008eb4:	f000 fdfc 	bl	8009ab0 <_sbrk_r>
 8008eb8:	4581      	cmp	r9, r0
 8008eba:	d142      	bne.n	8008f42 <_malloc_r+0xea>
 8008ebc:	6821      	ldr	r1, [r4, #0]
 8008ebe:	1a6d      	subs	r5, r5, r1
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7ff ffa6 	bl	8008e14 <sbrk_aligned>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d03a      	beq.n	8008f42 <_malloc_r+0xea>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	442b      	add	r3, r5
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	bb62      	cbnz	r2, 8008f34 <_malloc_r+0xdc>
 8008eda:	f8c8 7000 	str.w	r7, [r8]
 8008ede:	e00f      	b.n	8008f00 <_malloc_r+0xa8>
 8008ee0:	6822      	ldr	r2, [r4, #0]
 8008ee2:	1b52      	subs	r2, r2, r5
 8008ee4:	d420      	bmi.n	8008f28 <_malloc_r+0xd0>
 8008ee6:	2a0b      	cmp	r2, #11
 8008ee8:	d917      	bls.n	8008f1a <_malloc_r+0xc2>
 8008eea:	1961      	adds	r1, r4, r5
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	6025      	str	r5, [r4, #0]
 8008ef0:	bf18      	it	ne
 8008ef2:	6059      	strne	r1, [r3, #4]
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	bf08      	it	eq
 8008ef8:	f8c8 1000 	streq.w	r1, [r8]
 8008efc:	5162      	str	r2, [r4, r5]
 8008efe:	604b      	str	r3, [r1, #4]
 8008f00:	4630      	mov	r0, r6
 8008f02:	f000 f82f 	bl	8008f64 <__malloc_unlock>
 8008f06:	f104 000b 	add.w	r0, r4, #11
 8008f0a:	1d23      	adds	r3, r4, #4
 8008f0c:	f020 0007 	bic.w	r0, r0, #7
 8008f10:	1ac2      	subs	r2, r0, r3
 8008f12:	bf1c      	itt	ne
 8008f14:	1a1b      	subne	r3, r3, r0
 8008f16:	50a3      	strne	r3, [r4, r2]
 8008f18:	e7af      	b.n	8008e7a <_malloc_r+0x22>
 8008f1a:	6862      	ldr	r2, [r4, #4]
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	bf0c      	ite	eq
 8008f20:	f8c8 2000 	streq.w	r2, [r8]
 8008f24:	605a      	strne	r2, [r3, #4]
 8008f26:	e7eb      	b.n	8008f00 <_malloc_r+0xa8>
 8008f28:	4623      	mov	r3, r4
 8008f2a:	6864      	ldr	r4, [r4, #4]
 8008f2c:	e7ae      	b.n	8008e8c <_malloc_r+0x34>
 8008f2e:	463c      	mov	r4, r7
 8008f30:	687f      	ldr	r7, [r7, #4]
 8008f32:	e7b6      	b.n	8008ea2 <_malloc_r+0x4a>
 8008f34:	461a      	mov	r2, r3
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d1fb      	bne.n	8008f34 <_malloc_r+0xdc>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6053      	str	r3, [r2, #4]
 8008f40:	e7de      	b.n	8008f00 <_malloc_r+0xa8>
 8008f42:	230c      	movs	r3, #12
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	4630      	mov	r0, r6
 8008f48:	f000 f80c 	bl	8008f64 <__malloc_unlock>
 8008f4c:	e794      	b.n	8008e78 <_malloc_r+0x20>
 8008f4e:	6005      	str	r5, [r0, #0]
 8008f50:	e7d6      	b.n	8008f00 <_malloc_r+0xa8>
 8008f52:	bf00      	nop
 8008f54:	20004e30 	.word	0x20004e30

08008f58 <__malloc_lock>:
 8008f58:	4801      	ldr	r0, [pc, #4]	@ (8008f60 <__malloc_lock+0x8>)
 8008f5a:	f7ff b8ac 	b.w	80080b6 <__retarget_lock_acquire_recursive>
 8008f5e:	bf00      	nop
 8008f60:	20004e28 	.word	0x20004e28

08008f64 <__malloc_unlock>:
 8008f64:	4801      	ldr	r0, [pc, #4]	@ (8008f6c <__malloc_unlock+0x8>)
 8008f66:	f7ff b8a7 	b.w	80080b8 <__retarget_lock_release_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	20004e28 	.word	0x20004e28

08008f70 <_Balloc>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	69c6      	ldr	r6, [r0, #28]
 8008f74:	4604      	mov	r4, r0
 8008f76:	460d      	mov	r5, r1
 8008f78:	b976      	cbnz	r6, 8008f98 <_Balloc+0x28>
 8008f7a:	2010      	movs	r0, #16
 8008f7c:	f7ff ff42 	bl	8008e04 <malloc>
 8008f80:	4602      	mov	r2, r0
 8008f82:	61e0      	str	r0, [r4, #28]
 8008f84:	b920      	cbnz	r0, 8008f90 <_Balloc+0x20>
 8008f86:	4b18      	ldr	r3, [pc, #96]	@ (8008fe8 <_Balloc+0x78>)
 8008f88:	4818      	ldr	r0, [pc, #96]	@ (8008fec <_Balloc+0x7c>)
 8008f8a:	216b      	movs	r1, #107	@ 0x6b
 8008f8c:	f000 fda0 	bl	8009ad0 <__assert_func>
 8008f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f94:	6006      	str	r6, [r0, #0]
 8008f96:	60c6      	str	r6, [r0, #12]
 8008f98:	69e6      	ldr	r6, [r4, #28]
 8008f9a:	68f3      	ldr	r3, [r6, #12]
 8008f9c:	b183      	cbz	r3, 8008fc0 <_Balloc+0x50>
 8008f9e:	69e3      	ldr	r3, [r4, #28]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fa6:	b9b8      	cbnz	r0, 8008fd8 <_Balloc+0x68>
 8008fa8:	2101      	movs	r1, #1
 8008faa:	fa01 f605 	lsl.w	r6, r1, r5
 8008fae:	1d72      	adds	r2, r6, #5
 8008fb0:	0092      	lsls	r2, r2, #2
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fdaa 	bl	8009b0c <_calloc_r>
 8008fb8:	b160      	cbz	r0, 8008fd4 <_Balloc+0x64>
 8008fba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fbe:	e00e      	b.n	8008fde <_Balloc+0x6e>
 8008fc0:	2221      	movs	r2, #33	@ 0x21
 8008fc2:	2104      	movs	r1, #4
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 fda1 	bl	8009b0c <_calloc_r>
 8008fca:	69e3      	ldr	r3, [r4, #28]
 8008fcc:	60f0      	str	r0, [r6, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e4      	bne.n	8008f9e <_Balloc+0x2e>
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	6802      	ldr	r2, [r0, #0]
 8008fda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fe4:	e7f7      	b.n	8008fd6 <_Balloc+0x66>
 8008fe6:	bf00      	nop
 8008fe8:	0800b665 	.word	0x0800b665
 8008fec:	0800b6e5 	.word	0x0800b6e5

08008ff0 <_Bfree>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	69c6      	ldr	r6, [r0, #28]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	b976      	cbnz	r6, 8009018 <_Bfree+0x28>
 8008ffa:	2010      	movs	r0, #16
 8008ffc:	f7ff ff02 	bl	8008e04 <malloc>
 8009000:	4602      	mov	r2, r0
 8009002:	61e8      	str	r0, [r5, #28]
 8009004:	b920      	cbnz	r0, 8009010 <_Bfree+0x20>
 8009006:	4b09      	ldr	r3, [pc, #36]	@ (800902c <_Bfree+0x3c>)
 8009008:	4809      	ldr	r0, [pc, #36]	@ (8009030 <_Bfree+0x40>)
 800900a:	218f      	movs	r1, #143	@ 0x8f
 800900c:	f000 fd60 	bl	8009ad0 <__assert_func>
 8009010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009014:	6006      	str	r6, [r0, #0]
 8009016:	60c6      	str	r6, [r0, #12]
 8009018:	b13c      	cbz	r4, 800902a <_Bfree+0x3a>
 800901a:	69eb      	ldr	r3, [r5, #28]
 800901c:	6862      	ldr	r2, [r4, #4]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009024:	6021      	str	r1, [r4, #0]
 8009026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	0800b665 	.word	0x0800b665
 8009030:	0800b6e5 	.word	0x0800b6e5

08009034 <__multadd>:
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	690d      	ldr	r5, [r1, #16]
 800903a:	4607      	mov	r7, r0
 800903c:	460c      	mov	r4, r1
 800903e:	461e      	mov	r6, r3
 8009040:	f101 0c14 	add.w	ip, r1, #20
 8009044:	2000      	movs	r0, #0
 8009046:	f8dc 3000 	ldr.w	r3, [ip]
 800904a:	b299      	uxth	r1, r3
 800904c:	fb02 6101 	mla	r1, r2, r1, r6
 8009050:	0c1e      	lsrs	r6, r3, #16
 8009052:	0c0b      	lsrs	r3, r1, #16
 8009054:	fb02 3306 	mla	r3, r2, r6, r3
 8009058:	b289      	uxth	r1, r1
 800905a:	3001      	adds	r0, #1
 800905c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009060:	4285      	cmp	r5, r0
 8009062:	f84c 1b04 	str.w	r1, [ip], #4
 8009066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800906a:	dcec      	bgt.n	8009046 <__multadd+0x12>
 800906c:	b30e      	cbz	r6, 80090b2 <__multadd+0x7e>
 800906e:	68a3      	ldr	r3, [r4, #8]
 8009070:	42ab      	cmp	r3, r5
 8009072:	dc19      	bgt.n	80090a8 <__multadd+0x74>
 8009074:	6861      	ldr	r1, [r4, #4]
 8009076:	4638      	mov	r0, r7
 8009078:	3101      	adds	r1, #1
 800907a:	f7ff ff79 	bl	8008f70 <_Balloc>
 800907e:	4680      	mov	r8, r0
 8009080:	b928      	cbnz	r0, 800908e <__multadd+0x5a>
 8009082:	4602      	mov	r2, r0
 8009084:	4b0c      	ldr	r3, [pc, #48]	@ (80090b8 <__multadd+0x84>)
 8009086:	480d      	ldr	r0, [pc, #52]	@ (80090bc <__multadd+0x88>)
 8009088:	21ba      	movs	r1, #186	@ 0xba
 800908a:	f000 fd21 	bl	8009ad0 <__assert_func>
 800908e:	6922      	ldr	r2, [r4, #16]
 8009090:	3202      	adds	r2, #2
 8009092:	f104 010c 	add.w	r1, r4, #12
 8009096:	0092      	lsls	r2, r2, #2
 8009098:	300c      	adds	r0, #12
 800909a:	f7ff f80e 	bl	80080ba <memcpy>
 800909e:	4621      	mov	r1, r4
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff ffa5 	bl	8008ff0 <_Bfree>
 80090a6:	4644      	mov	r4, r8
 80090a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090ac:	3501      	adds	r5, #1
 80090ae:	615e      	str	r6, [r3, #20]
 80090b0:	6125      	str	r5, [r4, #16]
 80090b2:	4620      	mov	r0, r4
 80090b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b8:	0800b6d4 	.word	0x0800b6d4
 80090bc:	0800b6e5 	.word	0x0800b6e5

080090c0 <__hi0bits>:
 80090c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80090c4:	4603      	mov	r3, r0
 80090c6:	bf36      	itet	cc
 80090c8:	0403      	lslcc	r3, r0, #16
 80090ca:	2000      	movcs	r0, #0
 80090cc:	2010      	movcc	r0, #16
 80090ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090d2:	bf3c      	itt	cc
 80090d4:	021b      	lslcc	r3, r3, #8
 80090d6:	3008      	addcc	r0, #8
 80090d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090dc:	bf3c      	itt	cc
 80090de:	011b      	lslcc	r3, r3, #4
 80090e0:	3004      	addcc	r0, #4
 80090e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e6:	bf3c      	itt	cc
 80090e8:	009b      	lslcc	r3, r3, #2
 80090ea:	3002      	addcc	r0, #2
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	db05      	blt.n	80090fc <__hi0bits+0x3c>
 80090f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090f4:	f100 0001 	add.w	r0, r0, #1
 80090f8:	bf08      	it	eq
 80090fa:	2020      	moveq	r0, #32
 80090fc:	4770      	bx	lr

080090fe <__lo0bits>:
 80090fe:	6803      	ldr	r3, [r0, #0]
 8009100:	4602      	mov	r2, r0
 8009102:	f013 0007 	ands.w	r0, r3, #7
 8009106:	d00b      	beq.n	8009120 <__lo0bits+0x22>
 8009108:	07d9      	lsls	r1, r3, #31
 800910a:	d421      	bmi.n	8009150 <__lo0bits+0x52>
 800910c:	0798      	lsls	r0, r3, #30
 800910e:	bf49      	itett	mi
 8009110:	085b      	lsrmi	r3, r3, #1
 8009112:	089b      	lsrpl	r3, r3, #2
 8009114:	2001      	movmi	r0, #1
 8009116:	6013      	strmi	r3, [r2, #0]
 8009118:	bf5c      	itt	pl
 800911a:	6013      	strpl	r3, [r2, #0]
 800911c:	2002      	movpl	r0, #2
 800911e:	4770      	bx	lr
 8009120:	b299      	uxth	r1, r3
 8009122:	b909      	cbnz	r1, 8009128 <__lo0bits+0x2a>
 8009124:	0c1b      	lsrs	r3, r3, #16
 8009126:	2010      	movs	r0, #16
 8009128:	b2d9      	uxtb	r1, r3
 800912a:	b909      	cbnz	r1, 8009130 <__lo0bits+0x32>
 800912c:	3008      	adds	r0, #8
 800912e:	0a1b      	lsrs	r3, r3, #8
 8009130:	0719      	lsls	r1, r3, #28
 8009132:	bf04      	itt	eq
 8009134:	091b      	lsreq	r3, r3, #4
 8009136:	3004      	addeq	r0, #4
 8009138:	0799      	lsls	r1, r3, #30
 800913a:	bf04      	itt	eq
 800913c:	089b      	lsreq	r3, r3, #2
 800913e:	3002      	addeq	r0, #2
 8009140:	07d9      	lsls	r1, r3, #31
 8009142:	d403      	bmi.n	800914c <__lo0bits+0x4e>
 8009144:	085b      	lsrs	r3, r3, #1
 8009146:	f100 0001 	add.w	r0, r0, #1
 800914a:	d003      	beq.n	8009154 <__lo0bits+0x56>
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	4770      	bx	lr
 8009150:	2000      	movs	r0, #0
 8009152:	4770      	bx	lr
 8009154:	2020      	movs	r0, #32
 8009156:	4770      	bx	lr

08009158 <__i2b>:
 8009158:	b510      	push	{r4, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	2101      	movs	r1, #1
 800915e:	f7ff ff07 	bl	8008f70 <_Balloc>
 8009162:	4602      	mov	r2, r0
 8009164:	b928      	cbnz	r0, 8009172 <__i2b+0x1a>
 8009166:	4b05      	ldr	r3, [pc, #20]	@ (800917c <__i2b+0x24>)
 8009168:	4805      	ldr	r0, [pc, #20]	@ (8009180 <__i2b+0x28>)
 800916a:	f240 1145 	movw	r1, #325	@ 0x145
 800916e:	f000 fcaf 	bl	8009ad0 <__assert_func>
 8009172:	2301      	movs	r3, #1
 8009174:	6144      	str	r4, [r0, #20]
 8009176:	6103      	str	r3, [r0, #16]
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop
 800917c:	0800b6d4 	.word	0x0800b6d4
 8009180:	0800b6e5 	.word	0x0800b6e5

08009184 <__multiply>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	4614      	mov	r4, r2
 800918a:	690a      	ldr	r2, [r1, #16]
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	bfa8      	it	ge
 8009192:	4623      	movge	r3, r4
 8009194:	460f      	mov	r7, r1
 8009196:	bfa4      	itt	ge
 8009198:	460c      	movge	r4, r1
 800919a:	461f      	movge	r7, r3
 800919c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80091a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80091a4:	68a3      	ldr	r3, [r4, #8]
 80091a6:	6861      	ldr	r1, [r4, #4]
 80091a8:	eb0a 0609 	add.w	r6, sl, r9
 80091ac:	42b3      	cmp	r3, r6
 80091ae:	b085      	sub	sp, #20
 80091b0:	bfb8      	it	lt
 80091b2:	3101      	addlt	r1, #1
 80091b4:	f7ff fedc 	bl	8008f70 <_Balloc>
 80091b8:	b930      	cbnz	r0, 80091c8 <__multiply+0x44>
 80091ba:	4602      	mov	r2, r0
 80091bc:	4b44      	ldr	r3, [pc, #272]	@ (80092d0 <__multiply+0x14c>)
 80091be:	4845      	ldr	r0, [pc, #276]	@ (80092d4 <__multiply+0x150>)
 80091c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80091c4:	f000 fc84 	bl	8009ad0 <__assert_func>
 80091c8:	f100 0514 	add.w	r5, r0, #20
 80091cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091d0:	462b      	mov	r3, r5
 80091d2:	2200      	movs	r2, #0
 80091d4:	4543      	cmp	r3, r8
 80091d6:	d321      	bcc.n	800921c <__multiply+0x98>
 80091d8:	f107 0114 	add.w	r1, r7, #20
 80091dc:	f104 0214 	add.w	r2, r4, #20
 80091e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091e8:	9302      	str	r3, [sp, #8]
 80091ea:	1b13      	subs	r3, r2, r4
 80091ec:	3b15      	subs	r3, #21
 80091ee:	f023 0303 	bic.w	r3, r3, #3
 80091f2:	3304      	adds	r3, #4
 80091f4:	f104 0715 	add.w	r7, r4, #21
 80091f8:	42ba      	cmp	r2, r7
 80091fa:	bf38      	it	cc
 80091fc:	2304      	movcc	r3, #4
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	9b02      	ldr	r3, [sp, #8]
 8009202:	9103      	str	r1, [sp, #12]
 8009204:	428b      	cmp	r3, r1
 8009206:	d80c      	bhi.n	8009222 <__multiply+0x9e>
 8009208:	2e00      	cmp	r6, #0
 800920a:	dd03      	ble.n	8009214 <__multiply+0x90>
 800920c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009210:	2b00      	cmp	r3, #0
 8009212:	d05b      	beq.n	80092cc <__multiply+0x148>
 8009214:	6106      	str	r6, [r0, #16]
 8009216:	b005      	add	sp, #20
 8009218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921c:	f843 2b04 	str.w	r2, [r3], #4
 8009220:	e7d8      	b.n	80091d4 <__multiply+0x50>
 8009222:	f8b1 a000 	ldrh.w	sl, [r1]
 8009226:	f1ba 0f00 	cmp.w	sl, #0
 800922a:	d024      	beq.n	8009276 <__multiply+0xf2>
 800922c:	f104 0e14 	add.w	lr, r4, #20
 8009230:	46a9      	mov	r9, r5
 8009232:	f04f 0c00 	mov.w	ip, #0
 8009236:	f85e 7b04 	ldr.w	r7, [lr], #4
 800923a:	f8d9 3000 	ldr.w	r3, [r9]
 800923e:	fa1f fb87 	uxth.w	fp, r7
 8009242:	b29b      	uxth	r3, r3
 8009244:	fb0a 330b 	mla	r3, sl, fp, r3
 8009248:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800924c:	f8d9 7000 	ldr.w	r7, [r9]
 8009250:	4463      	add	r3, ip
 8009252:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009256:	fb0a c70b 	mla	r7, sl, fp, ip
 800925a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800925e:	b29b      	uxth	r3, r3
 8009260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009264:	4572      	cmp	r2, lr
 8009266:	f849 3b04 	str.w	r3, [r9], #4
 800926a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800926e:	d8e2      	bhi.n	8009236 <__multiply+0xb2>
 8009270:	9b01      	ldr	r3, [sp, #4]
 8009272:	f845 c003 	str.w	ip, [r5, r3]
 8009276:	9b03      	ldr	r3, [sp, #12]
 8009278:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800927c:	3104      	adds	r1, #4
 800927e:	f1b9 0f00 	cmp.w	r9, #0
 8009282:	d021      	beq.n	80092c8 <__multiply+0x144>
 8009284:	682b      	ldr	r3, [r5, #0]
 8009286:	f104 0c14 	add.w	ip, r4, #20
 800928a:	46ae      	mov	lr, r5
 800928c:	f04f 0a00 	mov.w	sl, #0
 8009290:	f8bc b000 	ldrh.w	fp, [ip]
 8009294:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009298:	fb09 770b 	mla	r7, r9, fp, r7
 800929c:	4457      	add	r7, sl
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092a4:	f84e 3b04 	str.w	r3, [lr], #4
 80092a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092b0:	f8be 3000 	ldrh.w	r3, [lr]
 80092b4:	fb09 330a 	mla	r3, r9, sl, r3
 80092b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80092bc:	4562      	cmp	r2, ip
 80092be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092c2:	d8e5      	bhi.n	8009290 <__multiply+0x10c>
 80092c4:	9f01      	ldr	r7, [sp, #4]
 80092c6:	51eb      	str	r3, [r5, r7]
 80092c8:	3504      	adds	r5, #4
 80092ca:	e799      	b.n	8009200 <__multiply+0x7c>
 80092cc:	3e01      	subs	r6, #1
 80092ce:	e79b      	b.n	8009208 <__multiply+0x84>
 80092d0:	0800b6d4 	.word	0x0800b6d4
 80092d4:	0800b6e5 	.word	0x0800b6e5

080092d8 <__pow5mult>:
 80092d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092dc:	4615      	mov	r5, r2
 80092de:	f012 0203 	ands.w	r2, r2, #3
 80092e2:	4607      	mov	r7, r0
 80092e4:	460e      	mov	r6, r1
 80092e6:	d007      	beq.n	80092f8 <__pow5mult+0x20>
 80092e8:	4c25      	ldr	r4, [pc, #148]	@ (8009380 <__pow5mult+0xa8>)
 80092ea:	3a01      	subs	r2, #1
 80092ec:	2300      	movs	r3, #0
 80092ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092f2:	f7ff fe9f 	bl	8009034 <__multadd>
 80092f6:	4606      	mov	r6, r0
 80092f8:	10ad      	asrs	r5, r5, #2
 80092fa:	d03d      	beq.n	8009378 <__pow5mult+0xa0>
 80092fc:	69fc      	ldr	r4, [r7, #28]
 80092fe:	b97c      	cbnz	r4, 8009320 <__pow5mult+0x48>
 8009300:	2010      	movs	r0, #16
 8009302:	f7ff fd7f 	bl	8008e04 <malloc>
 8009306:	4602      	mov	r2, r0
 8009308:	61f8      	str	r0, [r7, #28]
 800930a:	b928      	cbnz	r0, 8009318 <__pow5mult+0x40>
 800930c:	4b1d      	ldr	r3, [pc, #116]	@ (8009384 <__pow5mult+0xac>)
 800930e:	481e      	ldr	r0, [pc, #120]	@ (8009388 <__pow5mult+0xb0>)
 8009310:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009314:	f000 fbdc 	bl	8009ad0 <__assert_func>
 8009318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800931c:	6004      	str	r4, [r0, #0]
 800931e:	60c4      	str	r4, [r0, #12]
 8009320:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009328:	b94c      	cbnz	r4, 800933e <__pow5mult+0x66>
 800932a:	f240 2171 	movw	r1, #625	@ 0x271
 800932e:	4638      	mov	r0, r7
 8009330:	f7ff ff12 	bl	8009158 <__i2b>
 8009334:	2300      	movs	r3, #0
 8009336:	f8c8 0008 	str.w	r0, [r8, #8]
 800933a:	4604      	mov	r4, r0
 800933c:	6003      	str	r3, [r0, #0]
 800933e:	f04f 0900 	mov.w	r9, #0
 8009342:	07eb      	lsls	r3, r5, #31
 8009344:	d50a      	bpl.n	800935c <__pow5mult+0x84>
 8009346:	4631      	mov	r1, r6
 8009348:	4622      	mov	r2, r4
 800934a:	4638      	mov	r0, r7
 800934c:	f7ff ff1a 	bl	8009184 <__multiply>
 8009350:	4631      	mov	r1, r6
 8009352:	4680      	mov	r8, r0
 8009354:	4638      	mov	r0, r7
 8009356:	f7ff fe4b 	bl	8008ff0 <_Bfree>
 800935a:	4646      	mov	r6, r8
 800935c:	106d      	asrs	r5, r5, #1
 800935e:	d00b      	beq.n	8009378 <__pow5mult+0xa0>
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	b938      	cbnz	r0, 8009374 <__pow5mult+0x9c>
 8009364:	4622      	mov	r2, r4
 8009366:	4621      	mov	r1, r4
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff ff0b 	bl	8009184 <__multiply>
 800936e:	6020      	str	r0, [r4, #0]
 8009370:	f8c0 9000 	str.w	r9, [r0]
 8009374:	4604      	mov	r4, r0
 8009376:	e7e4      	b.n	8009342 <__pow5mult+0x6a>
 8009378:	4630      	mov	r0, r6
 800937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937e:	bf00      	nop
 8009380:	0800b740 	.word	0x0800b740
 8009384:	0800b665 	.word	0x0800b665
 8009388:	0800b6e5 	.word	0x0800b6e5

0800938c <__lshift>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	460c      	mov	r4, r1
 8009392:	6849      	ldr	r1, [r1, #4]
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	4607      	mov	r7, r0
 800939e:	4691      	mov	r9, r2
 80093a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093a4:	f108 0601 	add.w	r6, r8, #1
 80093a8:	42b3      	cmp	r3, r6
 80093aa:	db0b      	blt.n	80093c4 <__lshift+0x38>
 80093ac:	4638      	mov	r0, r7
 80093ae:	f7ff fddf 	bl	8008f70 <_Balloc>
 80093b2:	4605      	mov	r5, r0
 80093b4:	b948      	cbnz	r0, 80093ca <__lshift+0x3e>
 80093b6:	4602      	mov	r2, r0
 80093b8:	4b28      	ldr	r3, [pc, #160]	@ (800945c <__lshift+0xd0>)
 80093ba:	4829      	ldr	r0, [pc, #164]	@ (8009460 <__lshift+0xd4>)
 80093bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80093c0:	f000 fb86 	bl	8009ad0 <__assert_func>
 80093c4:	3101      	adds	r1, #1
 80093c6:	005b      	lsls	r3, r3, #1
 80093c8:	e7ee      	b.n	80093a8 <__lshift+0x1c>
 80093ca:	2300      	movs	r3, #0
 80093cc:	f100 0114 	add.w	r1, r0, #20
 80093d0:	f100 0210 	add.w	r2, r0, #16
 80093d4:	4618      	mov	r0, r3
 80093d6:	4553      	cmp	r3, sl
 80093d8:	db33      	blt.n	8009442 <__lshift+0xb6>
 80093da:	6920      	ldr	r0, [r4, #16]
 80093dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093e0:	f104 0314 	add.w	r3, r4, #20
 80093e4:	f019 091f 	ands.w	r9, r9, #31
 80093e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093f0:	d02b      	beq.n	800944a <__lshift+0xbe>
 80093f2:	f1c9 0e20 	rsb	lr, r9, #32
 80093f6:	468a      	mov	sl, r1
 80093f8:	2200      	movs	r2, #0
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009400:	4310      	orrs	r0, r2
 8009402:	f84a 0b04 	str.w	r0, [sl], #4
 8009406:	f853 2b04 	ldr.w	r2, [r3], #4
 800940a:	459c      	cmp	ip, r3
 800940c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009410:	d8f3      	bhi.n	80093fa <__lshift+0x6e>
 8009412:	ebac 0304 	sub.w	r3, ip, r4
 8009416:	3b15      	subs	r3, #21
 8009418:	f023 0303 	bic.w	r3, r3, #3
 800941c:	3304      	adds	r3, #4
 800941e:	f104 0015 	add.w	r0, r4, #21
 8009422:	4584      	cmp	ip, r0
 8009424:	bf38      	it	cc
 8009426:	2304      	movcc	r3, #4
 8009428:	50ca      	str	r2, [r1, r3]
 800942a:	b10a      	cbz	r2, 8009430 <__lshift+0xa4>
 800942c:	f108 0602 	add.w	r6, r8, #2
 8009430:	3e01      	subs	r6, #1
 8009432:	4638      	mov	r0, r7
 8009434:	612e      	str	r6, [r5, #16]
 8009436:	4621      	mov	r1, r4
 8009438:	f7ff fdda 	bl	8008ff0 <_Bfree>
 800943c:	4628      	mov	r0, r5
 800943e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009442:	f842 0f04 	str.w	r0, [r2, #4]!
 8009446:	3301      	adds	r3, #1
 8009448:	e7c5      	b.n	80093d6 <__lshift+0x4a>
 800944a:	3904      	subs	r1, #4
 800944c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009450:	f841 2f04 	str.w	r2, [r1, #4]!
 8009454:	459c      	cmp	ip, r3
 8009456:	d8f9      	bhi.n	800944c <__lshift+0xc0>
 8009458:	e7ea      	b.n	8009430 <__lshift+0xa4>
 800945a:	bf00      	nop
 800945c:	0800b6d4 	.word	0x0800b6d4
 8009460:	0800b6e5 	.word	0x0800b6e5

08009464 <__mcmp>:
 8009464:	690a      	ldr	r2, [r1, #16]
 8009466:	4603      	mov	r3, r0
 8009468:	6900      	ldr	r0, [r0, #16]
 800946a:	1a80      	subs	r0, r0, r2
 800946c:	b530      	push	{r4, r5, lr}
 800946e:	d10e      	bne.n	800948e <__mcmp+0x2a>
 8009470:	3314      	adds	r3, #20
 8009472:	3114      	adds	r1, #20
 8009474:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009478:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800947c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009484:	4295      	cmp	r5, r2
 8009486:	d003      	beq.n	8009490 <__mcmp+0x2c>
 8009488:	d205      	bcs.n	8009496 <__mcmp+0x32>
 800948a:	f04f 30ff 	mov.w	r0, #4294967295
 800948e:	bd30      	pop	{r4, r5, pc}
 8009490:	42a3      	cmp	r3, r4
 8009492:	d3f3      	bcc.n	800947c <__mcmp+0x18>
 8009494:	e7fb      	b.n	800948e <__mcmp+0x2a>
 8009496:	2001      	movs	r0, #1
 8009498:	e7f9      	b.n	800948e <__mcmp+0x2a>
	...

0800949c <__mdiff>:
 800949c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	4689      	mov	r9, r1
 80094a2:	4606      	mov	r6, r0
 80094a4:	4611      	mov	r1, r2
 80094a6:	4648      	mov	r0, r9
 80094a8:	4614      	mov	r4, r2
 80094aa:	f7ff ffdb 	bl	8009464 <__mcmp>
 80094ae:	1e05      	subs	r5, r0, #0
 80094b0:	d112      	bne.n	80094d8 <__mdiff+0x3c>
 80094b2:	4629      	mov	r1, r5
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff fd5b 	bl	8008f70 <_Balloc>
 80094ba:	4602      	mov	r2, r0
 80094bc:	b928      	cbnz	r0, 80094ca <__mdiff+0x2e>
 80094be:	4b3f      	ldr	r3, [pc, #252]	@ (80095bc <__mdiff+0x120>)
 80094c0:	f240 2137 	movw	r1, #567	@ 0x237
 80094c4:	483e      	ldr	r0, [pc, #248]	@ (80095c0 <__mdiff+0x124>)
 80094c6:	f000 fb03 	bl	8009ad0 <__assert_func>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094d0:	4610      	mov	r0, r2
 80094d2:	b003      	add	sp, #12
 80094d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d8:	bfbc      	itt	lt
 80094da:	464b      	movlt	r3, r9
 80094dc:	46a1      	movlt	r9, r4
 80094de:	4630      	mov	r0, r6
 80094e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094e4:	bfba      	itte	lt
 80094e6:	461c      	movlt	r4, r3
 80094e8:	2501      	movlt	r5, #1
 80094ea:	2500      	movge	r5, #0
 80094ec:	f7ff fd40 	bl	8008f70 <_Balloc>
 80094f0:	4602      	mov	r2, r0
 80094f2:	b918      	cbnz	r0, 80094fc <__mdiff+0x60>
 80094f4:	4b31      	ldr	r3, [pc, #196]	@ (80095bc <__mdiff+0x120>)
 80094f6:	f240 2145 	movw	r1, #581	@ 0x245
 80094fa:	e7e3      	b.n	80094c4 <__mdiff+0x28>
 80094fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009500:	6926      	ldr	r6, [r4, #16]
 8009502:	60c5      	str	r5, [r0, #12]
 8009504:	f109 0310 	add.w	r3, r9, #16
 8009508:	f109 0514 	add.w	r5, r9, #20
 800950c:	f104 0e14 	add.w	lr, r4, #20
 8009510:	f100 0b14 	add.w	fp, r0, #20
 8009514:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009518:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	46d9      	mov	r9, fp
 8009520:	f04f 0c00 	mov.w	ip, #0
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	f85e 0b04 	ldr.w	r0, [lr], #4
 800952a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	fa1f f38a 	uxth.w	r3, sl
 8009534:	4619      	mov	r1, r3
 8009536:	b283      	uxth	r3, r0
 8009538:	1acb      	subs	r3, r1, r3
 800953a:	0c00      	lsrs	r0, r0, #16
 800953c:	4463      	add	r3, ip
 800953e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009542:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009546:	b29b      	uxth	r3, r3
 8009548:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800954c:	4576      	cmp	r6, lr
 800954e:	f849 3b04 	str.w	r3, [r9], #4
 8009552:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009556:	d8e5      	bhi.n	8009524 <__mdiff+0x88>
 8009558:	1b33      	subs	r3, r6, r4
 800955a:	3b15      	subs	r3, #21
 800955c:	f023 0303 	bic.w	r3, r3, #3
 8009560:	3415      	adds	r4, #21
 8009562:	3304      	adds	r3, #4
 8009564:	42a6      	cmp	r6, r4
 8009566:	bf38      	it	cc
 8009568:	2304      	movcc	r3, #4
 800956a:	441d      	add	r5, r3
 800956c:	445b      	add	r3, fp
 800956e:	461e      	mov	r6, r3
 8009570:	462c      	mov	r4, r5
 8009572:	4544      	cmp	r4, r8
 8009574:	d30e      	bcc.n	8009594 <__mdiff+0xf8>
 8009576:	f108 0103 	add.w	r1, r8, #3
 800957a:	1b49      	subs	r1, r1, r5
 800957c:	f021 0103 	bic.w	r1, r1, #3
 8009580:	3d03      	subs	r5, #3
 8009582:	45a8      	cmp	r8, r5
 8009584:	bf38      	it	cc
 8009586:	2100      	movcc	r1, #0
 8009588:	440b      	add	r3, r1
 800958a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800958e:	b191      	cbz	r1, 80095b6 <__mdiff+0x11a>
 8009590:	6117      	str	r7, [r2, #16]
 8009592:	e79d      	b.n	80094d0 <__mdiff+0x34>
 8009594:	f854 1b04 	ldr.w	r1, [r4], #4
 8009598:	46e6      	mov	lr, ip
 800959a:	0c08      	lsrs	r0, r1, #16
 800959c:	fa1c fc81 	uxtah	ip, ip, r1
 80095a0:	4471      	add	r1, lr
 80095a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80095a6:	b289      	uxth	r1, r1
 80095a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80095ac:	f846 1b04 	str.w	r1, [r6], #4
 80095b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095b4:	e7dd      	b.n	8009572 <__mdiff+0xd6>
 80095b6:	3f01      	subs	r7, #1
 80095b8:	e7e7      	b.n	800958a <__mdiff+0xee>
 80095ba:	bf00      	nop
 80095bc:	0800b6d4 	.word	0x0800b6d4
 80095c0:	0800b6e5 	.word	0x0800b6e5

080095c4 <__d2b>:
 80095c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095c8:	460f      	mov	r7, r1
 80095ca:	2101      	movs	r1, #1
 80095cc:	ec59 8b10 	vmov	r8, r9, d0
 80095d0:	4616      	mov	r6, r2
 80095d2:	f7ff fccd 	bl	8008f70 <_Balloc>
 80095d6:	4604      	mov	r4, r0
 80095d8:	b930      	cbnz	r0, 80095e8 <__d2b+0x24>
 80095da:	4602      	mov	r2, r0
 80095dc:	4b23      	ldr	r3, [pc, #140]	@ (800966c <__d2b+0xa8>)
 80095de:	4824      	ldr	r0, [pc, #144]	@ (8009670 <__d2b+0xac>)
 80095e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80095e4:	f000 fa74 	bl	8009ad0 <__assert_func>
 80095e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095f0:	b10d      	cbz	r5, 80095f6 <__d2b+0x32>
 80095f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	f1b8 0300 	subs.w	r3, r8, #0
 80095fc:	d023      	beq.n	8009646 <__d2b+0x82>
 80095fe:	4668      	mov	r0, sp
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	f7ff fd7c 	bl	80090fe <__lo0bits>
 8009606:	e9dd 1200 	ldrd	r1, r2, [sp]
 800960a:	b1d0      	cbz	r0, 8009642 <__d2b+0x7e>
 800960c:	f1c0 0320 	rsb	r3, r0, #32
 8009610:	fa02 f303 	lsl.w	r3, r2, r3
 8009614:	430b      	orrs	r3, r1
 8009616:	40c2      	lsrs	r2, r0
 8009618:	6163      	str	r3, [r4, #20]
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	61a3      	str	r3, [r4, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	bf0c      	ite	eq
 8009624:	2201      	moveq	r2, #1
 8009626:	2202      	movne	r2, #2
 8009628:	6122      	str	r2, [r4, #16]
 800962a:	b1a5      	cbz	r5, 8009656 <__d2b+0x92>
 800962c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009630:	4405      	add	r5, r0
 8009632:	603d      	str	r5, [r7, #0]
 8009634:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009638:	6030      	str	r0, [r6, #0]
 800963a:	4620      	mov	r0, r4
 800963c:	b003      	add	sp, #12
 800963e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009642:	6161      	str	r1, [r4, #20]
 8009644:	e7ea      	b.n	800961c <__d2b+0x58>
 8009646:	a801      	add	r0, sp, #4
 8009648:	f7ff fd59 	bl	80090fe <__lo0bits>
 800964c:	9b01      	ldr	r3, [sp, #4]
 800964e:	6163      	str	r3, [r4, #20]
 8009650:	3020      	adds	r0, #32
 8009652:	2201      	movs	r2, #1
 8009654:	e7e8      	b.n	8009628 <__d2b+0x64>
 8009656:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800965a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800965e:	6038      	str	r0, [r7, #0]
 8009660:	6918      	ldr	r0, [r3, #16]
 8009662:	f7ff fd2d 	bl	80090c0 <__hi0bits>
 8009666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800966a:	e7e5      	b.n	8009638 <__d2b+0x74>
 800966c:	0800b6d4 	.word	0x0800b6d4
 8009670:	0800b6e5 	.word	0x0800b6e5

08009674 <__ssputs_r>:
 8009674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	688e      	ldr	r6, [r1, #8]
 800967a:	461f      	mov	r7, r3
 800967c:	42be      	cmp	r6, r7
 800967e:	680b      	ldr	r3, [r1, #0]
 8009680:	4682      	mov	sl, r0
 8009682:	460c      	mov	r4, r1
 8009684:	4690      	mov	r8, r2
 8009686:	d82d      	bhi.n	80096e4 <__ssputs_r+0x70>
 8009688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800968c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009690:	d026      	beq.n	80096e0 <__ssputs_r+0x6c>
 8009692:	6965      	ldr	r5, [r4, #20]
 8009694:	6909      	ldr	r1, [r1, #16]
 8009696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800969a:	eba3 0901 	sub.w	r9, r3, r1
 800969e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096a2:	1c7b      	adds	r3, r7, #1
 80096a4:	444b      	add	r3, r9
 80096a6:	106d      	asrs	r5, r5, #1
 80096a8:	429d      	cmp	r5, r3
 80096aa:	bf38      	it	cc
 80096ac:	461d      	movcc	r5, r3
 80096ae:	0553      	lsls	r3, r2, #21
 80096b0:	d527      	bpl.n	8009702 <__ssputs_r+0x8e>
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7ff fbd0 	bl	8008e58 <_malloc_r>
 80096b8:	4606      	mov	r6, r0
 80096ba:	b360      	cbz	r0, 8009716 <__ssputs_r+0xa2>
 80096bc:	6921      	ldr	r1, [r4, #16]
 80096be:	464a      	mov	r2, r9
 80096c0:	f7fe fcfb 	bl	80080ba <memcpy>
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	6126      	str	r6, [r4, #16]
 80096d2:	6165      	str	r5, [r4, #20]
 80096d4:	444e      	add	r6, r9
 80096d6:	eba5 0509 	sub.w	r5, r5, r9
 80096da:	6026      	str	r6, [r4, #0]
 80096dc:	60a5      	str	r5, [r4, #8]
 80096de:	463e      	mov	r6, r7
 80096e0:	42be      	cmp	r6, r7
 80096e2:	d900      	bls.n	80096e6 <__ssputs_r+0x72>
 80096e4:	463e      	mov	r6, r7
 80096e6:	6820      	ldr	r0, [r4, #0]
 80096e8:	4632      	mov	r2, r6
 80096ea:	4641      	mov	r1, r8
 80096ec:	f000 f9c6 	bl	8009a7c <memmove>
 80096f0:	68a3      	ldr	r3, [r4, #8]
 80096f2:	1b9b      	subs	r3, r3, r6
 80096f4:	60a3      	str	r3, [r4, #8]
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	4433      	add	r3, r6
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	2000      	movs	r0, #0
 80096fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009702:	462a      	mov	r2, r5
 8009704:	f000 fa28 	bl	8009b58 <_realloc_r>
 8009708:	4606      	mov	r6, r0
 800970a:	2800      	cmp	r0, #0
 800970c:	d1e0      	bne.n	80096d0 <__ssputs_r+0x5c>
 800970e:	6921      	ldr	r1, [r4, #16]
 8009710:	4650      	mov	r0, sl
 8009712:	f7ff fb2d 	bl	8008d70 <_free_r>
 8009716:	230c      	movs	r3, #12
 8009718:	f8ca 3000 	str.w	r3, [sl]
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009722:	81a3      	strh	r3, [r4, #12]
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	e7e9      	b.n	80096fe <__ssputs_r+0x8a>
	...

0800972c <_svfiprintf_r>:
 800972c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009730:	4698      	mov	r8, r3
 8009732:	898b      	ldrh	r3, [r1, #12]
 8009734:	061b      	lsls	r3, r3, #24
 8009736:	b09d      	sub	sp, #116	@ 0x74
 8009738:	4607      	mov	r7, r0
 800973a:	460d      	mov	r5, r1
 800973c:	4614      	mov	r4, r2
 800973e:	d510      	bpl.n	8009762 <_svfiprintf_r+0x36>
 8009740:	690b      	ldr	r3, [r1, #16]
 8009742:	b973      	cbnz	r3, 8009762 <_svfiprintf_r+0x36>
 8009744:	2140      	movs	r1, #64	@ 0x40
 8009746:	f7ff fb87 	bl	8008e58 <_malloc_r>
 800974a:	6028      	str	r0, [r5, #0]
 800974c:	6128      	str	r0, [r5, #16]
 800974e:	b930      	cbnz	r0, 800975e <_svfiprintf_r+0x32>
 8009750:	230c      	movs	r3, #12
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	f04f 30ff 	mov.w	r0, #4294967295
 8009758:	b01d      	add	sp, #116	@ 0x74
 800975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975e:	2340      	movs	r3, #64	@ 0x40
 8009760:	616b      	str	r3, [r5, #20]
 8009762:	2300      	movs	r3, #0
 8009764:	9309      	str	r3, [sp, #36]	@ 0x24
 8009766:	2320      	movs	r3, #32
 8009768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800976c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009770:	2330      	movs	r3, #48	@ 0x30
 8009772:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009910 <_svfiprintf_r+0x1e4>
 8009776:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800977a:	f04f 0901 	mov.w	r9, #1
 800977e:	4623      	mov	r3, r4
 8009780:	469a      	mov	sl, r3
 8009782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009786:	b10a      	cbz	r2, 800978c <_svfiprintf_r+0x60>
 8009788:	2a25      	cmp	r2, #37	@ 0x25
 800978a:	d1f9      	bne.n	8009780 <_svfiprintf_r+0x54>
 800978c:	ebba 0b04 	subs.w	fp, sl, r4
 8009790:	d00b      	beq.n	80097aa <_svfiprintf_r+0x7e>
 8009792:	465b      	mov	r3, fp
 8009794:	4622      	mov	r2, r4
 8009796:	4629      	mov	r1, r5
 8009798:	4638      	mov	r0, r7
 800979a:	f7ff ff6b 	bl	8009674 <__ssputs_r>
 800979e:	3001      	adds	r0, #1
 80097a0:	f000 80a7 	beq.w	80098f2 <_svfiprintf_r+0x1c6>
 80097a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097a6:	445a      	add	r2, fp
 80097a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80097aa:	f89a 3000 	ldrb.w	r3, [sl]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 809f 	beq.w	80098f2 <_svfiprintf_r+0x1c6>
 80097b4:	2300      	movs	r3, #0
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097be:	f10a 0a01 	add.w	sl, sl, #1
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	9307      	str	r3, [sp, #28]
 80097c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80097cc:	4654      	mov	r4, sl
 80097ce:	2205      	movs	r2, #5
 80097d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d4:	484e      	ldr	r0, [pc, #312]	@ (8009910 <_svfiprintf_r+0x1e4>)
 80097d6:	f7f6 fcfb 	bl	80001d0 <memchr>
 80097da:	9a04      	ldr	r2, [sp, #16]
 80097dc:	b9d8      	cbnz	r0, 8009816 <_svfiprintf_r+0xea>
 80097de:	06d0      	lsls	r0, r2, #27
 80097e0:	bf44      	itt	mi
 80097e2:	2320      	movmi	r3, #32
 80097e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097e8:	0711      	lsls	r1, r2, #28
 80097ea:	bf44      	itt	mi
 80097ec:	232b      	movmi	r3, #43	@ 0x2b
 80097ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097f2:	f89a 3000 	ldrb.w	r3, [sl]
 80097f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097f8:	d015      	beq.n	8009826 <_svfiprintf_r+0xfa>
 80097fa:	9a07      	ldr	r2, [sp, #28]
 80097fc:	4654      	mov	r4, sl
 80097fe:	2000      	movs	r0, #0
 8009800:	f04f 0c0a 	mov.w	ip, #10
 8009804:	4621      	mov	r1, r4
 8009806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800980a:	3b30      	subs	r3, #48	@ 0x30
 800980c:	2b09      	cmp	r3, #9
 800980e:	d94b      	bls.n	80098a8 <_svfiprintf_r+0x17c>
 8009810:	b1b0      	cbz	r0, 8009840 <_svfiprintf_r+0x114>
 8009812:	9207      	str	r2, [sp, #28]
 8009814:	e014      	b.n	8009840 <_svfiprintf_r+0x114>
 8009816:	eba0 0308 	sub.w	r3, r0, r8
 800981a:	fa09 f303 	lsl.w	r3, r9, r3
 800981e:	4313      	orrs	r3, r2
 8009820:	9304      	str	r3, [sp, #16]
 8009822:	46a2      	mov	sl, r4
 8009824:	e7d2      	b.n	80097cc <_svfiprintf_r+0xa0>
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	1d19      	adds	r1, r3, #4
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	9103      	str	r1, [sp, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	bfbb      	ittet	lt
 8009832:	425b      	neglt	r3, r3
 8009834:	f042 0202 	orrlt.w	r2, r2, #2
 8009838:	9307      	strge	r3, [sp, #28]
 800983a:	9307      	strlt	r3, [sp, #28]
 800983c:	bfb8      	it	lt
 800983e:	9204      	strlt	r2, [sp, #16]
 8009840:	7823      	ldrb	r3, [r4, #0]
 8009842:	2b2e      	cmp	r3, #46	@ 0x2e
 8009844:	d10a      	bne.n	800985c <_svfiprintf_r+0x130>
 8009846:	7863      	ldrb	r3, [r4, #1]
 8009848:	2b2a      	cmp	r3, #42	@ 0x2a
 800984a:	d132      	bne.n	80098b2 <_svfiprintf_r+0x186>
 800984c:	9b03      	ldr	r3, [sp, #12]
 800984e:	1d1a      	adds	r2, r3, #4
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	9203      	str	r2, [sp, #12]
 8009854:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009858:	3402      	adds	r4, #2
 800985a:	9305      	str	r3, [sp, #20]
 800985c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009920 <_svfiprintf_r+0x1f4>
 8009860:	7821      	ldrb	r1, [r4, #0]
 8009862:	2203      	movs	r2, #3
 8009864:	4650      	mov	r0, sl
 8009866:	f7f6 fcb3 	bl	80001d0 <memchr>
 800986a:	b138      	cbz	r0, 800987c <_svfiprintf_r+0x150>
 800986c:	9b04      	ldr	r3, [sp, #16]
 800986e:	eba0 000a 	sub.w	r0, r0, sl
 8009872:	2240      	movs	r2, #64	@ 0x40
 8009874:	4082      	lsls	r2, r0
 8009876:	4313      	orrs	r3, r2
 8009878:	3401      	adds	r4, #1
 800987a:	9304      	str	r3, [sp, #16]
 800987c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009880:	4824      	ldr	r0, [pc, #144]	@ (8009914 <_svfiprintf_r+0x1e8>)
 8009882:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009886:	2206      	movs	r2, #6
 8009888:	f7f6 fca2 	bl	80001d0 <memchr>
 800988c:	2800      	cmp	r0, #0
 800988e:	d036      	beq.n	80098fe <_svfiprintf_r+0x1d2>
 8009890:	4b21      	ldr	r3, [pc, #132]	@ (8009918 <_svfiprintf_r+0x1ec>)
 8009892:	bb1b      	cbnz	r3, 80098dc <_svfiprintf_r+0x1b0>
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	3307      	adds	r3, #7
 8009898:	f023 0307 	bic.w	r3, r3, #7
 800989c:	3308      	adds	r3, #8
 800989e:	9303      	str	r3, [sp, #12]
 80098a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a2:	4433      	add	r3, r6
 80098a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098a6:	e76a      	b.n	800977e <_svfiprintf_r+0x52>
 80098a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80098ac:	460c      	mov	r4, r1
 80098ae:	2001      	movs	r0, #1
 80098b0:	e7a8      	b.n	8009804 <_svfiprintf_r+0xd8>
 80098b2:	2300      	movs	r3, #0
 80098b4:	3401      	adds	r4, #1
 80098b6:	9305      	str	r3, [sp, #20]
 80098b8:	4619      	mov	r1, r3
 80098ba:	f04f 0c0a 	mov.w	ip, #10
 80098be:	4620      	mov	r0, r4
 80098c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098c4:	3a30      	subs	r2, #48	@ 0x30
 80098c6:	2a09      	cmp	r2, #9
 80098c8:	d903      	bls.n	80098d2 <_svfiprintf_r+0x1a6>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0c6      	beq.n	800985c <_svfiprintf_r+0x130>
 80098ce:	9105      	str	r1, [sp, #20]
 80098d0:	e7c4      	b.n	800985c <_svfiprintf_r+0x130>
 80098d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098d6:	4604      	mov	r4, r0
 80098d8:	2301      	movs	r3, #1
 80098da:	e7f0      	b.n	80098be <_svfiprintf_r+0x192>
 80098dc:	ab03      	add	r3, sp, #12
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	462a      	mov	r2, r5
 80098e2:	4b0e      	ldr	r3, [pc, #56]	@ (800991c <_svfiprintf_r+0x1f0>)
 80098e4:	a904      	add	r1, sp, #16
 80098e6:	4638      	mov	r0, r7
 80098e8:	f7fd fe76 	bl	80075d8 <_printf_float>
 80098ec:	1c42      	adds	r2, r0, #1
 80098ee:	4606      	mov	r6, r0
 80098f0:	d1d6      	bne.n	80098a0 <_svfiprintf_r+0x174>
 80098f2:	89ab      	ldrh	r3, [r5, #12]
 80098f4:	065b      	lsls	r3, r3, #25
 80098f6:	f53f af2d 	bmi.w	8009754 <_svfiprintf_r+0x28>
 80098fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098fc:	e72c      	b.n	8009758 <_svfiprintf_r+0x2c>
 80098fe:	ab03      	add	r3, sp, #12
 8009900:	9300      	str	r3, [sp, #0]
 8009902:	462a      	mov	r2, r5
 8009904:	4b05      	ldr	r3, [pc, #20]	@ (800991c <_svfiprintf_r+0x1f0>)
 8009906:	a904      	add	r1, sp, #16
 8009908:	4638      	mov	r0, r7
 800990a:	f7fe f8fd 	bl	8007b08 <_printf_i>
 800990e:	e7ed      	b.n	80098ec <_svfiprintf_r+0x1c0>
 8009910:	0800b840 	.word	0x0800b840
 8009914:	0800b84a 	.word	0x0800b84a
 8009918:	080075d9 	.word	0x080075d9
 800991c:	08009675 	.word	0x08009675
 8009920:	0800b846 	.word	0x0800b846

08009924 <__sflush_r>:
 8009924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992c:	0716      	lsls	r6, r2, #28
 800992e:	4605      	mov	r5, r0
 8009930:	460c      	mov	r4, r1
 8009932:	d454      	bmi.n	80099de <__sflush_r+0xba>
 8009934:	684b      	ldr	r3, [r1, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	dc02      	bgt.n	8009940 <__sflush_r+0x1c>
 800993a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800993c:	2b00      	cmp	r3, #0
 800993e:	dd48      	ble.n	80099d2 <__sflush_r+0xae>
 8009940:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009942:	2e00      	cmp	r6, #0
 8009944:	d045      	beq.n	80099d2 <__sflush_r+0xae>
 8009946:	2300      	movs	r3, #0
 8009948:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800994c:	682f      	ldr	r7, [r5, #0]
 800994e:	6a21      	ldr	r1, [r4, #32]
 8009950:	602b      	str	r3, [r5, #0]
 8009952:	d030      	beq.n	80099b6 <__sflush_r+0x92>
 8009954:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009956:	89a3      	ldrh	r3, [r4, #12]
 8009958:	0759      	lsls	r1, r3, #29
 800995a:	d505      	bpl.n	8009968 <__sflush_r+0x44>
 800995c:	6863      	ldr	r3, [r4, #4]
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009962:	b10b      	cbz	r3, 8009968 <__sflush_r+0x44>
 8009964:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009966:	1ad2      	subs	r2, r2, r3
 8009968:	2300      	movs	r3, #0
 800996a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800996c:	6a21      	ldr	r1, [r4, #32]
 800996e:	4628      	mov	r0, r5
 8009970:	47b0      	blx	r6
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	89a3      	ldrh	r3, [r4, #12]
 8009976:	d106      	bne.n	8009986 <__sflush_r+0x62>
 8009978:	6829      	ldr	r1, [r5, #0]
 800997a:	291d      	cmp	r1, #29
 800997c:	d82b      	bhi.n	80099d6 <__sflush_r+0xb2>
 800997e:	4a2a      	ldr	r2, [pc, #168]	@ (8009a28 <__sflush_r+0x104>)
 8009980:	410a      	asrs	r2, r1
 8009982:	07d6      	lsls	r6, r2, #31
 8009984:	d427      	bmi.n	80099d6 <__sflush_r+0xb2>
 8009986:	2200      	movs	r2, #0
 8009988:	6062      	str	r2, [r4, #4]
 800998a:	04d9      	lsls	r1, r3, #19
 800998c:	6922      	ldr	r2, [r4, #16]
 800998e:	6022      	str	r2, [r4, #0]
 8009990:	d504      	bpl.n	800999c <__sflush_r+0x78>
 8009992:	1c42      	adds	r2, r0, #1
 8009994:	d101      	bne.n	800999a <__sflush_r+0x76>
 8009996:	682b      	ldr	r3, [r5, #0]
 8009998:	b903      	cbnz	r3, 800999c <__sflush_r+0x78>
 800999a:	6560      	str	r0, [r4, #84]	@ 0x54
 800999c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800999e:	602f      	str	r7, [r5, #0]
 80099a0:	b1b9      	cbz	r1, 80099d2 <__sflush_r+0xae>
 80099a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099a6:	4299      	cmp	r1, r3
 80099a8:	d002      	beq.n	80099b0 <__sflush_r+0x8c>
 80099aa:	4628      	mov	r0, r5
 80099ac:	f7ff f9e0 	bl	8008d70 <_free_r>
 80099b0:	2300      	movs	r3, #0
 80099b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80099b4:	e00d      	b.n	80099d2 <__sflush_r+0xae>
 80099b6:	2301      	movs	r3, #1
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b0      	blx	r6
 80099bc:	4602      	mov	r2, r0
 80099be:	1c50      	adds	r0, r2, #1
 80099c0:	d1c9      	bne.n	8009956 <__sflush_r+0x32>
 80099c2:	682b      	ldr	r3, [r5, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0c6      	beq.n	8009956 <__sflush_r+0x32>
 80099c8:	2b1d      	cmp	r3, #29
 80099ca:	d001      	beq.n	80099d0 <__sflush_r+0xac>
 80099cc:	2b16      	cmp	r3, #22
 80099ce:	d11e      	bne.n	8009a0e <__sflush_r+0xea>
 80099d0:	602f      	str	r7, [r5, #0]
 80099d2:	2000      	movs	r0, #0
 80099d4:	e022      	b.n	8009a1c <__sflush_r+0xf8>
 80099d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099da:	b21b      	sxth	r3, r3
 80099dc:	e01b      	b.n	8009a16 <__sflush_r+0xf2>
 80099de:	690f      	ldr	r7, [r1, #16]
 80099e0:	2f00      	cmp	r7, #0
 80099e2:	d0f6      	beq.n	80099d2 <__sflush_r+0xae>
 80099e4:	0793      	lsls	r3, r2, #30
 80099e6:	680e      	ldr	r6, [r1, #0]
 80099e8:	bf08      	it	eq
 80099ea:	694b      	ldreq	r3, [r1, #20]
 80099ec:	600f      	str	r7, [r1, #0]
 80099ee:	bf18      	it	ne
 80099f0:	2300      	movne	r3, #0
 80099f2:	eba6 0807 	sub.w	r8, r6, r7
 80099f6:	608b      	str	r3, [r1, #8]
 80099f8:	f1b8 0f00 	cmp.w	r8, #0
 80099fc:	dde9      	ble.n	80099d2 <__sflush_r+0xae>
 80099fe:	6a21      	ldr	r1, [r4, #32]
 8009a00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a02:	4643      	mov	r3, r8
 8009a04:	463a      	mov	r2, r7
 8009a06:	4628      	mov	r0, r5
 8009a08:	47b0      	blx	r6
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	dc08      	bgt.n	8009a20 <__sflush_r+0xfc>
 8009a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a16:	81a3      	strh	r3, [r4, #12]
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a20:	4407      	add	r7, r0
 8009a22:	eba8 0800 	sub.w	r8, r8, r0
 8009a26:	e7e7      	b.n	80099f8 <__sflush_r+0xd4>
 8009a28:	dfbffffe 	.word	0xdfbffffe

08009a2c <_fflush_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	690b      	ldr	r3, [r1, #16]
 8009a30:	4605      	mov	r5, r0
 8009a32:	460c      	mov	r4, r1
 8009a34:	b913      	cbnz	r3, 8009a3c <_fflush_r+0x10>
 8009a36:	2500      	movs	r5, #0
 8009a38:	4628      	mov	r0, r5
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	b118      	cbz	r0, 8009a46 <_fflush_r+0x1a>
 8009a3e:	6a03      	ldr	r3, [r0, #32]
 8009a40:	b90b      	cbnz	r3, 8009a46 <_fflush_r+0x1a>
 8009a42:	f7fe fa0d 	bl	8007e60 <__sinit>
 8009a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0f3      	beq.n	8009a36 <_fflush_r+0xa>
 8009a4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a50:	07d0      	lsls	r0, r2, #31
 8009a52:	d404      	bmi.n	8009a5e <_fflush_r+0x32>
 8009a54:	0599      	lsls	r1, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_fflush_r+0x32>
 8009a58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a5a:	f7fe fb2c 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8009a5e:	4628      	mov	r0, r5
 8009a60:	4621      	mov	r1, r4
 8009a62:	f7ff ff5f 	bl	8009924 <__sflush_r>
 8009a66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a68:	07da      	lsls	r2, r3, #31
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	d4e4      	bmi.n	8009a38 <_fflush_r+0xc>
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	059b      	lsls	r3, r3, #22
 8009a72:	d4e1      	bmi.n	8009a38 <_fflush_r+0xc>
 8009a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a76:	f7fe fb1f 	bl	80080b8 <__retarget_lock_release_recursive>
 8009a7a:	e7dd      	b.n	8009a38 <_fflush_r+0xc>

08009a7c <memmove>:
 8009a7c:	4288      	cmp	r0, r1
 8009a7e:	b510      	push	{r4, lr}
 8009a80:	eb01 0402 	add.w	r4, r1, r2
 8009a84:	d902      	bls.n	8009a8c <memmove+0x10>
 8009a86:	4284      	cmp	r4, r0
 8009a88:	4623      	mov	r3, r4
 8009a8a:	d807      	bhi.n	8009a9c <memmove+0x20>
 8009a8c:	1e43      	subs	r3, r0, #1
 8009a8e:	42a1      	cmp	r1, r4
 8009a90:	d008      	beq.n	8009aa4 <memmove+0x28>
 8009a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a9a:	e7f8      	b.n	8009a8e <memmove+0x12>
 8009a9c:	4402      	add	r2, r0
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	428a      	cmp	r2, r1
 8009aa2:	d100      	bne.n	8009aa6 <memmove+0x2a>
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aae:	e7f7      	b.n	8009aa0 <memmove+0x24>

08009ab0 <_sbrk_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d06      	ldr	r5, [pc, #24]	@ (8009acc <_sbrk_r+0x1c>)
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	4608      	mov	r0, r1
 8009aba:	602b      	str	r3, [r5, #0]
 8009abc:	f7f8 f9be 	bl	8001e3c <_sbrk>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d102      	bne.n	8009aca <_sbrk_r+0x1a>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	b103      	cbz	r3, 8009aca <_sbrk_r+0x1a>
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	bd38      	pop	{r3, r4, r5, pc}
 8009acc:	20004e24 	.word	0x20004e24

08009ad0 <__assert_func>:
 8009ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ad2:	4614      	mov	r4, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4b09      	ldr	r3, [pc, #36]	@ (8009afc <__assert_func+0x2c>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4605      	mov	r5, r0
 8009adc:	68d8      	ldr	r0, [r3, #12]
 8009ade:	b954      	cbnz	r4, 8009af6 <__assert_func+0x26>
 8009ae0:	4b07      	ldr	r3, [pc, #28]	@ (8009b00 <__assert_func+0x30>)
 8009ae2:	461c      	mov	r4, r3
 8009ae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ae8:	9100      	str	r1, [sp, #0]
 8009aea:	462b      	mov	r3, r5
 8009aec:	4905      	ldr	r1, [pc, #20]	@ (8009b04 <__assert_func+0x34>)
 8009aee:	f000 f86f 	bl	8009bd0 <fiprintf>
 8009af2:	f000 f87f 	bl	8009bf4 <abort>
 8009af6:	4b04      	ldr	r3, [pc, #16]	@ (8009b08 <__assert_func+0x38>)
 8009af8:	e7f4      	b.n	8009ae4 <__assert_func+0x14>
 8009afa:	bf00      	nop
 8009afc:	20000028 	.word	0x20000028
 8009b00:	0800b896 	.word	0x0800b896
 8009b04:	0800b868 	.word	0x0800b868
 8009b08:	0800b85b 	.word	0x0800b85b

08009b0c <_calloc_r>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	fba1 5402 	umull	r5, r4, r1, r2
 8009b12:	b93c      	cbnz	r4, 8009b24 <_calloc_r+0x18>
 8009b14:	4629      	mov	r1, r5
 8009b16:	f7ff f99f 	bl	8008e58 <_malloc_r>
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	b928      	cbnz	r0, 8009b2a <_calloc_r+0x1e>
 8009b1e:	2600      	movs	r6, #0
 8009b20:	4630      	mov	r0, r6
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	220c      	movs	r2, #12
 8009b26:	6002      	str	r2, [r0, #0]
 8009b28:	e7f9      	b.n	8009b1e <_calloc_r+0x12>
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f7fe fa44 	bl	8007fba <memset>
 8009b32:	e7f5      	b.n	8009b20 <_calloc_r+0x14>

08009b34 <__ascii_mbtowc>:
 8009b34:	b082      	sub	sp, #8
 8009b36:	b901      	cbnz	r1, 8009b3a <__ascii_mbtowc+0x6>
 8009b38:	a901      	add	r1, sp, #4
 8009b3a:	b142      	cbz	r2, 8009b4e <__ascii_mbtowc+0x1a>
 8009b3c:	b14b      	cbz	r3, 8009b52 <__ascii_mbtowc+0x1e>
 8009b3e:	7813      	ldrb	r3, [r2, #0]
 8009b40:	600b      	str	r3, [r1, #0]
 8009b42:	7812      	ldrb	r2, [r2, #0]
 8009b44:	1e10      	subs	r0, r2, #0
 8009b46:	bf18      	it	ne
 8009b48:	2001      	movne	r0, #1
 8009b4a:	b002      	add	sp, #8
 8009b4c:	4770      	bx	lr
 8009b4e:	4610      	mov	r0, r2
 8009b50:	e7fb      	b.n	8009b4a <__ascii_mbtowc+0x16>
 8009b52:	f06f 0001 	mvn.w	r0, #1
 8009b56:	e7f8      	b.n	8009b4a <__ascii_mbtowc+0x16>

08009b58 <_realloc_r>:
 8009b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	4615      	mov	r5, r2
 8009b60:	460c      	mov	r4, r1
 8009b62:	b921      	cbnz	r1, 8009b6e <_realloc_r+0x16>
 8009b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b68:	4611      	mov	r1, r2
 8009b6a:	f7ff b975 	b.w	8008e58 <_malloc_r>
 8009b6e:	b92a      	cbnz	r2, 8009b7c <_realloc_r+0x24>
 8009b70:	f7ff f8fe 	bl	8008d70 <_free_r>
 8009b74:	2400      	movs	r4, #0
 8009b76:	4620      	mov	r0, r4
 8009b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b7c:	f000 f841 	bl	8009c02 <_malloc_usable_size_r>
 8009b80:	4285      	cmp	r5, r0
 8009b82:	4606      	mov	r6, r0
 8009b84:	d802      	bhi.n	8009b8c <_realloc_r+0x34>
 8009b86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b8a:	d8f4      	bhi.n	8009b76 <_realloc_r+0x1e>
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4640      	mov	r0, r8
 8009b90:	f7ff f962 	bl	8008e58 <_malloc_r>
 8009b94:	4607      	mov	r7, r0
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d0ec      	beq.n	8009b74 <_realloc_r+0x1c>
 8009b9a:	42b5      	cmp	r5, r6
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	bf28      	it	cs
 8009ba2:	4632      	movcs	r2, r6
 8009ba4:	f7fe fa89 	bl	80080ba <memcpy>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4640      	mov	r0, r8
 8009bac:	f7ff f8e0 	bl	8008d70 <_free_r>
 8009bb0:	463c      	mov	r4, r7
 8009bb2:	e7e0      	b.n	8009b76 <_realloc_r+0x1e>

08009bb4 <__ascii_wctomb>:
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	4608      	mov	r0, r1
 8009bb8:	b141      	cbz	r1, 8009bcc <__ascii_wctomb+0x18>
 8009bba:	2aff      	cmp	r2, #255	@ 0xff
 8009bbc:	d904      	bls.n	8009bc8 <__ascii_wctomb+0x14>
 8009bbe:	228a      	movs	r2, #138	@ 0x8a
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc6:	4770      	bx	lr
 8009bc8:	700a      	strb	r2, [r1, #0]
 8009bca:	2001      	movs	r0, #1
 8009bcc:	4770      	bx	lr
	...

08009bd0 <fiprintf>:
 8009bd0:	b40e      	push	{r1, r2, r3}
 8009bd2:	b503      	push	{r0, r1, lr}
 8009bd4:	4601      	mov	r1, r0
 8009bd6:	ab03      	add	r3, sp, #12
 8009bd8:	4805      	ldr	r0, [pc, #20]	@ (8009bf0 <fiprintf+0x20>)
 8009bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bde:	6800      	ldr	r0, [r0, #0]
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	f000 f83f 	bl	8009c64 <_vfiprintf_r>
 8009be6:	b002      	add	sp, #8
 8009be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bec:	b003      	add	sp, #12
 8009bee:	4770      	bx	lr
 8009bf0:	20000028 	.word	0x20000028

08009bf4 <abort>:
 8009bf4:	b508      	push	{r3, lr}
 8009bf6:	2006      	movs	r0, #6
 8009bf8:	f000 fa08 	bl	800a00c <raise>
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	f7f8 f8a5 	bl	8001d4c <_exit>

08009c02 <_malloc_usable_size_r>:
 8009c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c06:	1f18      	subs	r0, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	bfbc      	itt	lt
 8009c0c:	580b      	ldrlt	r3, [r1, r0]
 8009c0e:	18c0      	addlt	r0, r0, r3
 8009c10:	4770      	bx	lr

08009c12 <__sfputc_r>:
 8009c12:	6893      	ldr	r3, [r2, #8]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	b410      	push	{r4}
 8009c1a:	6093      	str	r3, [r2, #8]
 8009c1c:	da08      	bge.n	8009c30 <__sfputc_r+0x1e>
 8009c1e:	6994      	ldr	r4, [r2, #24]
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	db01      	blt.n	8009c28 <__sfputc_r+0x16>
 8009c24:	290a      	cmp	r1, #10
 8009c26:	d103      	bne.n	8009c30 <__sfputc_r+0x1e>
 8009c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c2c:	f000 b932 	b.w	8009e94 <__swbuf_r>
 8009c30:	6813      	ldr	r3, [r2, #0]
 8009c32:	1c58      	adds	r0, r3, #1
 8009c34:	6010      	str	r0, [r2, #0]
 8009c36:	7019      	strb	r1, [r3, #0]
 8009c38:	4608      	mov	r0, r1
 8009c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <__sfputs_r>:
 8009c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c42:	4606      	mov	r6, r0
 8009c44:	460f      	mov	r7, r1
 8009c46:	4614      	mov	r4, r2
 8009c48:	18d5      	adds	r5, r2, r3
 8009c4a:	42ac      	cmp	r4, r5
 8009c4c:	d101      	bne.n	8009c52 <__sfputs_r+0x12>
 8009c4e:	2000      	movs	r0, #0
 8009c50:	e007      	b.n	8009c62 <__sfputs_r+0x22>
 8009c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c56:	463a      	mov	r2, r7
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7ff ffda 	bl	8009c12 <__sfputc_r>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	d1f3      	bne.n	8009c4a <__sfputs_r+0xa>
 8009c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c64 <_vfiprintf_r>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	460d      	mov	r5, r1
 8009c6a:	b09d      	sub	sp, #116	@ 0x74
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	4698      	mov	r8, r3
 8009c70:	4606      	mov	r6, r0
 8009c72:	b118      	cbz	r0, 8009c7c <_vfiprintf_r+0x18>
 8009c74:	6a03      	ldr	r3, [r0, #32]
 8009c76:	b90b      	cbnz	r3, 8009c7c <_vfiprintf_r+0x18>
 8009c78:	f7fe f8f2 	bl	8007e60 <__sinit>
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x2a>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x2a>
 8009c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c8a:	f7fe fa14 	bl	80080b6 <__retarget_lock_acquire_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	071b      	lsls	r3, r3, #28
 8009c92:	d501      	bpl.n	8009c98 <_vfiprintf_r+0x34>
 8009c94:	692b      	ldr	r3, [r5, #16]
 8009c96:	b99b      	cbnz	r3, 8009cc0 <_vfiprintf_r+0x5c>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f000 f938 	bl	8009f10 <__swsetup_r>
 8009ca0:	b170      	cbz	r0, 8009cc0 <_vfiprintf_r+0x5c>
 8009ca2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ca4:	07dc      	lsls	r4, r3, #31
 8009ca6:	d504      	bpl.n	8009cb2 <_vfiprintf_r+0x4e>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	b01d      	add	sp, #116	@ 0x74
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	0598      	lsls	r0, r3, #22
 8009cb6:	d4f7      	bmi.n	8009ca8 <_vfiprintf_r+0x44>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cba:	f7fe f9fd 	bl	80080b8 <__retarget_lock_release_recursive>
 8009cbe:	e7f3      	b.n	8009ca8 <_vfiprintf_r+0x44>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cce:	2330      	movs	r3, #48	@ 0x30
 8009cd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e80 <_vfiprintf_r+0x21c>
 8009cd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cd8:	f04f 0901 	mov.w	r9, #1
 8009cdc:	4623      	mov	r3, r4
 8009cde:	469a      	mov	sl, r3
 8009ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce4:	b10a      	cbz	r2, 8009cea <_vfiprintf_r+0x86>
 8009ce6:	2a25      	cmp	r2, #37	@ 0x25
 8009ce8:	d1f9      	bne.n	8009cde <_vfiprintf_r+0x7a>
 8009cea:	ebba 0b04 	subs.w	fp, sl, r4
 8009cee:	d00b      	beq.n	8009d08 <_vfiprintf_r+0xa4>
 8009cf0:	465b      	mov	r3, fp
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ffa2 	bl	8009c40 <__sfputs_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f000 80a7 	beq.w	8009e50 <_vfiprintf_r+0x1ec>
 8009d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d04:	445a      	add	r2, fp
 8009d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d08:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 809f 	beq.w	8009e50 <_vfiprintf_r+0x1ec>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1c:	f10a 0a01 	add.w	sl, sl, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d28:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d2a:	4654      	mov	r4, sl
 8009d2c:	2205      	movs	r2, #5
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4853      	ldr	r0, [pc, #332]	@ (8009e80 <_vfiprintf_r+0x21c>)
 8009d34:	f7f6 fa4c 	bl	80001d0 <memchr>
 8009d38:	9a04      	ldr	r2, [sp, #16]
 8009d3a:	b9d8      	cbnz	r0, 8009d74 <_vfiprintf_r+0x110>
 8009d3c:	06d1      	lsls	r1, r2, #27
 8009d3e:	bf44      	itt	mi
 8009d40:	2320      	movmi	r3, #32
 8009d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d46:	0713      	lsls	r3, r2, #28
 8009d48:	bf44      	itt	mi
 8009d4a:	232b      	movmi	r3, #43	@ 0x2b
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d50:	f89a 3000 	ldrb.w	r3, [sl]
 8009d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d56:	d015      	beq.n	8009d84 <_vfiprintf_r+0x120>
 8009d58:	9a07      	ldr	r2, [sp, #28]
 8009d5a:	4654      	mov	r4, sl
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	f04f 0c0a 	mov.w	ip, #10
 8009d62:	4621      	mov	r1, r4
 8009d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d68:	3b30      	subs	r3, #48	@ 0x30
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d94b      	bls.n	8009e06 <_vfiprintf_r+0x1a2>
 8009d6e:	b1b0      	cbz	r0, 8009d9e <_vfiprintf_r+0x13a>
 8009d70:	9207      	str	r2, [sp, #28]
 8009d72:	e014      	b.n	8009d9e <_vfiprintf_r+0x13a>
 8009d74:	eba0 0308 	sub.w	r3, r0, r8
 8009d78:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	46a2      	mov	sl, r4
 8009d82:	e7d2      	b.n	8009d2a <_vfiprintf_r+0xc6>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	1d19      	adds	r1, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9103      	str	r1, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfbb      	ittet	lt
 8009d90:	425b      	neglt	r3, r3
 8009d92:	f042 0202 	orrlt.w	r2, r2, #2
 8009d96:	9307      	strge	r3, [sp, #28]
 8009d98:	9307      	strlt	r3, [sp, #28]
 8009d9a:	bfb8      	it	lt
 8009d9c:	9204      	strlt	r2, [sp, #16]
 8009d9e:	7823      	ldrb	r3, [r4, #0]
 8009da0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009da2:	d10a      	bne.n	8009dba <_vfiprintf_r+0x156>
 8009da4:	7863      	ldrb	r3, [r4, #1]
 8009da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009da8:	d132      	bne.n	8009e10 <_vfiprintf_r+0x1ac>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	1d1a      	adds	r2, r3, #4
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	9203      	str	r2, [sp, #12]
 8009db2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009db6:	3402      	adds	r4, #2
 8009db8:	9305      	str	r3, [sp, #20]
 8009dba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e90 <_vfiprintf_r+0x22c>
 8009dbe:	7821      	ldrb	r1, [r4, #0]
 8009dc0:	2203      	movs	r2, #3
 8009dc2:	4650      	mov	r0, sl
 8009dc4:	f7f6 fa04 	bl	80001d0 <memchr>
 8009dc8:	b138      	cbz	r0, 8009dda <_vfiprintf_r+0x176>
 8009dca:	9b04      	ldr	r3, [sp, #16]
 8009dcc:	eba0 000a 	sub.w	r0, r0, sl
 8009dd0:	2240      	movs	r2, #64	@ 0x40
 8009dd2:	4082      	lsls	r2, r0
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	3401      	adds	r4, #1
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dde:	4829      	ldr	r0, [pc, #164]	@ (8009e84 <_vfiprintf_r+0x220>)
 8009de0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009de4:	2206      	movs	r2, #6
 8009de6:	f7f6 f9f3 	bl	80001d0 <memchr>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	d03f      	beq.n	8009e6e <_vfiprintf_r+0x20a>
 8009dee:	4b26      	ldr	r3, [pc, #152]	@ (8009e88 <_vfiprintf_r+0x224>)
 8009df0:	bb1b      	cbnz	r3, 8009e3a <_vfiprintf_r+0x1d6>
 8009df2:	9b03      	ldr	r3, [sp, #12]
 8009df4:	3307      	adds	r3, #7
 8009df6:	f023 0307 	bic.w	r3, r3, #7
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	9303      	str	r3, [sp, #12]
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	443b      	add	r3, r7
 8009e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e04:	e76a      	b.n	8009cdc <_vfiprintf_r+0x78>
 8009e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	e7a8      	b.n	8009d62 <_vfiprintf_r+0xfe>
 8009e10:	2300      	movs	r3, #0
 8009e12:	3401      	adds	r4, #1
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	4619      	mov	r1, r3
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e22:	3a30      	subs	r2, #48	@ 0x30
 8009e24:	2a09      	cmp	r2, #9
 8009e26:	d903      	bls.n	8009e30 <_vfiprintf_r+0x1cc>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d0c6      	beq.n	8009dba <_vfiprintf_r+0x156>
 8009e2c:	9105      	str	r1, [sp, #20]
 8009e2e:	e7c4      	b.n	8009dba <_vfiprintf_r+0x156>
 8009e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e34:	4604      	mov	r4, r0
 8009e36:	2301      	movs	r3, #1
 8009e38:	e7f0      	b.n	8009e1c <_vfiprintf_r+0x1b8>
 8009e3a:	ab03      	add	r3, sp, #12
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	462a      	mov	r2, r5
 8009e40:	4b12      	ldr	r3, [pc, #72]	@ (8009e8c <_vfiprintf_r+0x228>)
 8009e42:	a904      	add	r1, sp, #16
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7fd fbc7 	bl	80075d8 <_printf_float>
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	1c78      	adds	r0, r7, #1
 8009e4e:	d1d6      	bne.n	8009dfe <_vfiprintf_r+0x19a>
 8009e50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e52:	07d9      	lsls	r1, r3, #31
 8009e54:	d405      	bmi.n	8009e62 <_vfiprintf_r+0x1fe>
 8009e56:	89ab      	ldrh	r3, [r5, #12]
 8009e58:	059a      	lsls	r2, r3, #22
 8009e5a:	d402      	bmi.n	8009e62 <_vfiprintf_r+0x1fe>
 8009e5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e5e:	f7fe f92b 	bl	80080b8 <__retarget_lock_release_recursive>
 8009e62:	89ab      	ldrh	r3, [r5, #12]
 8009e64:	065b      	lsls	r3, r3, #25
 8009e66:	f53f af1f 	bmi.w	8009ca8 <_vfiprintf_r+0x44>
 8009e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e6c:	e71e      	b.n	8009cac <_vfiprintf_r+0x48>
 8009e6e:	ab03      	add	r3, sp, #12
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	462a      	mov	r2, r5
 8009e74:	4b05      	ldr	r3, [pc, #20]	@ (8009e8c <_vfiprintf_r+0x228>)
 8009e76:	a904      	add	r1, sp, #16
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f7fd fe45 	bl	8007b08 <_printf_i>
 8009e7e:	e7e4      	b.n	8009e4a <_vfiprintf_r+0x1e6>
 8009e80:	0800b840 	.word	0x0800b840
 8009e84:	0800b84a 	.word	0x0800b84a
 8009e88:	080075d9 	.word	0x080075d9
 8009e8c:	08009c41 	.word	0x08009c41
 8009e90:	0800b846 	.word	0x0800b846

08009e94 <__swbuf_r>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	460e      	mov	r6, r1
 8009e98:	4614      	mov	r4, r2
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	b118      	cbz	r0, 8009ea6 <__swbuf_r+0x12>
 8009e9e:	6a03      	ldr	r3, [r0, #32]
 8009ea0:	b90b      	cbnz	r3, 8009ea6 <__swbuf_r+0x12>
 8009ea2:	f7fd ffdd 	bl	8007e60 <__sinit>
 8009ea6:	69a3      	ldr	r3, [r4, #24]
 8009ea8:	60a3      	str	r3, [r4, #8]
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	071a      	lsls	r2, r3, #28
 8009eae:	d501      	bpl.n	8009eb4 <__swbuf_r+0x20>
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	b943      	cbnz	r3, 8009ec6 <__swbuf_r+0x32>
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f000 f82a 	bl	8009f10 <__swsetup_r>
 8009ebc:	b118      	cbz	r0, 8009ec6 <__swbuf_r+0x32>
 8009ebe:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec6:	6823      	ldr	r3, [r4, #0]
 8009ec8:	6922      	ldr	r2, [r4, #16]
 8009eca:	1a98      	subs	r0, r3, r2
 8009ecc:	6963      	ldr	r3, [r4, #20]
 8009ece:	b2f6      	uxtb	r6, r6
 8009ed0:	4283      	cmp	r3, r0
 8009ed2:	4637      	mov	r7, r6
 8009ed4:	dc05      	bgt.n	8009ee2 <__swbuf_r+0x4e>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7ff fda7 	bl	8009a2c <_fflush_r>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d1ed      	bne.n	8009ebe <__swbuf_r+0x2a>
 8009ee2:	68a3      	ldr	r3, [r4, #8]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	60a3      	str	r3, [r4, #8]
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	6022      	str	r2, [r4, #0]
 8009eee:	701e      	strb	r6, [r3, #0]
 8009ef0:	6962      	ldr	r2, [r4, #20]
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d004      	beq.n	8009f02 <__swbuf_r+0x6e>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	07db      	lsls	r3, r3, #31
 8009efc:	d5e1      	bpl.n	8009ec2 <__swbuf_r+0x2e>
 8009efe:	2e0a      	cmp	r6, #10
 8009f00:	d1df      	bne.n	8009ec2 <__swbuf_r+0x2e>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4628      	mov	r0, r5
 8009f06:	f7ff fd91 	bl	8009a2c <_fflush_r>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d0d9      	beq.n	8009ec2 <__swbuf_r+0x2e>
 8009f0e:	e7d6      	b.n	8009ebe <__swbuf_r+0x2a>

08009f10 <__swsetup_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4b29      	ldr	r3, [pc, #164]	@ (8009fb8 <__swsetup_r+0xa8>)
 8009f14:	4605      	mov	r5, r0
 8009f16:	6818      	ldr	r0, [r3, #0]
 8009f18:	460c      	mov	r4, r1
 8009f1a:	b118      	cbz	r0, 8009f24 <__swsetup_r+0x14>
 8009f1c:	6a03      	ldr	r3, [r0, #32]
 8009f1e:	b90b      	cbnz	r3, 8009f24 <__swsetup_r+0x14>
 8009f20:	f7fd ff9e 	bl	8007e60 <__sinit>
 8009f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f28:	0719      	lsls	r1, r3, #28
 8009f2a:	d422      	bmi.n	8009f72 <__swsetup_r+0x62>
 8009f2c:	06da      	lsls	r2, r3, #27
 8009f2e:	d407      	bmi.n	8009f40 <__swsetup_r+0x30>
 8009f30:	2209      	movs	r2, #9
 8009f32:	602a      	str	r2, [r5, #0]
 8009f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f38:	81a3      	strh	r3, [r4, #12]
 8009f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3e:	e033      	b.n	8009fa8 <__swsetup_r+0x98>
 8009f40:	0758      	lsls	r0, r3, #29
 8009f42:	d512      	bpl.n	8009f6a <__swsetup_r+0x5a>
 8009f44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f46:	b141      	cbz	r1, 8009f5a <__swsetup_r+0x4a>
 8009f48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d002      	beq.n	8009f56 <__swsetup_r+0x46>
 8009f50:	4628      	mov	r0, r5
 8009f52:	f7fe ff0d 	bl	8008d70 <_free_r>
 8009f56:	2300      	movs	r3, #0
 8009f58:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	2300      	movs	r3, #0
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b94b      	cbnz	r3, 8009f8a <__swsetup_r+0x7a>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f80:	d003      	beq.n	8009f8a <__swsetup_r+0x7a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 f883 	bl	800a090 <__smakebuf_r>
 8009f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f8e:	f013 0201 	ands.w	r2, r3, #1
 8009f92:	d00a      	beq.n	8009faa <__swsetup_r+0x9a>
 8009f94:	2200      	movs	r2, #0
 8009f96:	60a2      	str	r2, [r4, #8]
 8009f98:	6962      	ldr	r2, [r4, #20]
 8009f9a:	4252      	negs	r2, r2
 8009f9c:	61a2      	str	r2, [r4, #24]
 8009f9e:	6922      	ldr	r2, [r4, #16]
 8009fa0:	b942      	cbnz	r2, 8009fb4 <__swsetup_r+0xa4>
 8009fa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009fa6:	d1c5      	bne.n	8009f34 <__swsetup_r+0x24>
 8009fa8:	bd38      	pop	{r3, r4, r5, pc}
 8009faa:	0799      	lsls	r1, r3, #30
 8009fac:	bf58      	it	pl
 8009fae:	6962      	ldrpl	r2, [r4, #20]
 8009fb0:	60a2      	str	r2, [r4, #8]
 8009fb2:	e7f4      	b.n	8009f9e <__swsetup_r+0x8e>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e7f7      	b.n	8009fa8 <__swsetup_r+0x98>
 8009fb8:	20000028 	.word	0x20000028

08009fbc <_raise_r>:
 8009fbc:	291f      	cmp	r1, #31
 8009fbe:	b538      	push	{r3, r4, r5, lr}
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	d904      	bls.n	8009fd0 <_raise_r+0x14>
 8009fc6:	2316      	movs	r3, #22
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	f04f 30ff 	mov.w	r0, #4294967295
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fd2:	b112      	cbz	r2, 8009fda <_raise_r+0x1e>
 8009fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fd8:	b94b      	cbnz	r3, 8009fee <_raise_r+0x32>
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 f830 	bl	800a040 <_getpid_r>
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fea:	f000 b817 	b.w	800a01c <_kill_r>
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d00a      	beq.n	800a008 <_raise_r+0x4c>
 8009ff2:	1c59      	adds	r1, r3, #1
 8009ff4:	d103      	bne.n	8009ffe <_raise_r+0x42>
 8009ff6:	2316      	movs	r3, #22
 8009ff8:	6003      	str	r3, [r0, #0]
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	e7e7      	b.n	8009fce <_raise_r+0x12>
 8009ffe:	2100      	movs	r1, #0
 800a000:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a004:	4620      	mov	r0, r4
 800a006:	4798      	blx	r3
 800a008:	2000      	movs	r0, #0
 800a00a:	e7e0      	b.n	8009fce <_raise_r+0x12>

0800a00c <raise>:
 800a00c:	4b02      	ldr	r3, [pc, #8]	@ (800a018 <raise+0xc>)
 800a00e:	4601      	mov	r1, r0
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	f7ff bfd3 	b.w	8009fbc <_raise_r>
 800a016:	bf00      	nop
 800a018:	20000028 	.word	0x20000028

0800a01c <_kill_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d07      	ldr	r5, [pc, #28]	@ (800a03c <_kill_r+0x20>)
 800a020:	2300      	movs	r3, #0
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	4611      	mov	r1, r2
 800a028:	602b      	str	r3, [r5, #0]
 800a02a:	f7f7 fe7f 	bl	8001d2c <_kill>
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	d102      	bne.n	800a038 <_kill_r+0x1c>
 800a032:	682b      	ldr	r3, [r5, #0]
 800a034:	b103      	cbz	r3, 800a038 <_kill_r+0x1c>
 800a036:	6023      	str	r3, [r4, #0]
 800a038:	bd38      	pop	{r3, r4, r5, pc}
 800a03a:	bf00      	nop
 800a03c:	20004e24 	.word	0x20004e24

0800a040 <_getpid_r>:
 800a040:	f7f7 be6c 	b.w	8001d1c <_getpid>

0800a044 <__swhatbuf_r>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	460c      	mov	r4, r1
 800a048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04c:	2900      	cmp	r1, #0
 800a04e:	b096      	sub	sp, #88	@ 0x58
 800a050:	4615      	mov	r5, r2
 800a052:	461e      	mov	r6, r3
 800a054:	da0d      	bge.n	800a072 <__swhatbuf_r+0x2e>
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a05c:	f04f 0100 	mov.w	r1, #0
 800a060:	bf14      	ite	ne
 800a062:	2340      	movne	r3, #64	@ 0x40
 800a064:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a068:	2000      	movs	r0, #0
 800a06a:	6031      	str	r1, [r6, #0]
 800a06c:	602b      	str	r3, [r5, #0]
 800a06e:	b016      	add	sp, #88	@ 0x58
 800a070:	bd70      	pop	{r4, r5, r6, pc}
 800a072:	466a      	mov	r2, sp
 800a074:	f000 f848 	bl	800a108 <_fstat_r>
 800a078:	2800      	cmp	r0, #0
 800a07a:	dbec      	blt.n	800a056 <__swhatbuf_r+0x12>
 800a07c:	9901      	ldr	r1, [sp, #4]
 800a07e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a082:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a086:	4259      	negs	r1, r3
 800a088:	4159      	adcs	r1, r3
 800a08a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a08e:	e7eb      	b.n	800a068 <__swhatbuf_r+0x24>

0800a090 <__smakebuf_r>:
 800a090:	898b      	ldrh	r3, [r1, #12]
 800a092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a094:	079d      	lsls	r5, r3, #30
 800a096:	4606      	mov	r6, r0
 800a098:	460c      	mov	r4, r1
 800a09a:	d507      	bpl.n	800a0ac <__smakebuf_r+0x1c>
 800a09c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	6123      	str	r3, [r4, #16]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	6163      	str	r3, [r4, #20]
 800a0a8:	b003      	add	sp, #12
 800a0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ac:	ab01      	add	r3, sp, #4
 800a0ae:	466a      	mov	r2, sp
 800a0b0:	f7ff ffc8 	bl	800a044 <__swhatbuf_r>
 800a0b4:	9f00      	ldr	r7, [sp, #0]
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7fe fecc 	bl	8008e58 <_malloc_r>
 800a0c0:	b948      	cbnz	r0, 800a0d6 <__smakebuf_r+0x46>
 800a0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c6:	059a      	lsls	r2, r3, #22
 800a0c8:	d4ee      	bmi.n	800a0a8 <__smakebuf_r+0x18>
 800a0ca:	f023 0303 	bic.w	r3, r3, #3
 800a0ce:	f043 0302 	orr.w	r3, r3, #2
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	e7e2      	b.n	800a09c <__smakebuf_r+0xc>
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	6020      	str	r0, [r4, #0]
 800a0da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	9b01      	ldr	r3, [sp, #4]
 800a0e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0e6:	b15b      	cbz	r3, 800a100 <__smakebuf_r+0x70>
 800a0e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f000 f81d 	bl	800a12c <_isatty_r>
 800a0f2:	b128      	cbz	r0, 800a100 <__smakebuf_r+0x70>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	f043 0301 	orr.w	r3, r3, #1
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	431d      	orrs	r5, r3
 800a104:	81a5      	strh	r5, [r4, #12]
 800a106:	e7cf      	b.n	800a0a8 <__smakebuf_r+0x18>

0800a108 <_fstat_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d07      	ldr	r5, [pc, #28]	@ (800a128 <_fstat_r+0x20>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	4611      	mov	r1, r2
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	f7f7 fe69 	bl	8001dec <_fstat>
 800a11a:	1c43      	adds	r3, r0, #1
 800a11c:	d102      	bne.n	800a124 <_fstat_r+0x1c>
 800a11e:	682b      	ldr	r3, [r5, #0]
 800a120:	b103      	cbz	r3, 800a124 <_fstat_r+0x1c>
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	bd38      	pop	{r3, r4, r5, pc}
 800a126:	bf00      	nop
 800a128:	20004e24 	.word	0x20004e24

0800a12c <_isatty_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4d06      	ldr	r5, [pc, #24]	@ (800a148 <_isatty_r+0x1c>)
 800a130:	2300      	movs	r3, #0
 800a132:	4604      	mov	r4, r0
 800a134:	4608      	mov	r0, r1
 800a136:	602b      	str	r3, [r5, #0]
 800a138:	f7f7 fe68 	bl	8001e0c <_isatty>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d102      	bne.n	800a146 <_isatty_r+0x1a>
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	b103      	cbz	r3, 800a146 <_isatty_r+0x1a>
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	20004e24 	.word	0x20004e24

0800a14c <_init>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	bf00      	nop
 800a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a152:	bc08      	pop	{r3}
 800a154:	469e      	mov	lr, r3
 800a156:	4770      	bx	lr

0800a158 <_fini>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	bf00      	nop
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr
